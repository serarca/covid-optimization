ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.747594682419763
best_error: 11.747594681199134
best_error: 11.721540807943743
best_error: 11.721540804364725
best_error: 9.571839904002129
best_error: 9.571839639826987
best_error: 8.974796083851604
best_error: 8.9747960838516
best_error: 8.974796077738755
best_error: 8.97479606094893
best_error: 8.641670737227669
best_error: 8.641670737227667
best_error: 8.64167071570991
best_error: 8.641670705709116
best_error: 7.7907071854511925
best_error: 7.790706988769722
best_error: 7.723848037426706
best_error: 7.723847969892906
best_error: 7.72273770867263
best_error: 7.722737682362601
best_error: 7.722649261619479
best_error: 7.722649195393015
best_error: 7.722572425485342
best_error: 7.722572359273867
best_error: 7.722537010002769
best_error: 7.722536974129537
best_error: 7.691931204907741
best_error: 7.629590373457859
best_error: 7.616650752230262
best_error: 7.616650752230261
best_error: 7.615324119276129
best_error: 7.615324119276127
best_error: 7.614107910382616
best_error: 7.568140551771124
best_error: 7.551140713651566
best_error: 7.549254294036176
best_error: 7.5455934441929005
best_error: 7.54387172681748
best_error: 7.543244875595283
best_error: 7.542819095132906
best_error: 7.542785066299226
best_error: 7.542779241063114
best_error: 7.542779207116558
best_error: 7.54277889929782
best_error: 7.4649891163600035
best_error: 7.464989103833494
best_error: 7.032375992876998
best_error: 7.032375608758976
best_error: 6.483710025364215
best_error: 6.4837099827504385
best_error: 6.472646847918614
best_error: 6.472646847918613
best_error: 6.436268634574593
best_error: 6.395922277355799
best_error: 6.3959222773557975
best_error: 6.38353426075208
best_error: 6.383534241381553
best_error: 6.35894529995999
best_error: 6.358945289875729
best_error: 6.350682914189745
best_error: 6.3506829104028055
best_error: 6.350639473756269
best_error: 6.350639473756268
best_error: 6.345457883587589
best_error: 6.3454578835875886
best_error: 6.34317444981799
best_error: 6.343174449817989
best_error: 6.341398248141532
best_error: 6.336157271856127
best_error: 6.329680074711496
best_error: 6.329680074711495
best_error: 6.329680074711479
best_error: 6.326970636897036
best_error: 6.3269706368970215
best_error: 6.325086035787001
best_error: 6.325086035786987
best_error: 6.32475180543562
best_error: 6.324751805435612
best_error: 6.324597370415335
best_error: 6.324597370415321
best_error: 6.32454884980243
best_error: 6.3245394421358805
best_error: 6.32453944213588
best_error: 6.3245394421358645
best_error: 6.324475350159108
best_error: 6.324475350159107
best_error: 6.324475350159096
best_error: 6.324469161427947
best_error: 6.324469161427946
best_error: 6.324469161427934
best_error: 6.324466208976342
best_error: 6.324466208976341
best_error: 6.324466208976329
best_error: 6.324463399747558
best_error: 6.324463399747557
best_error: 6.3244633997475495
best_error: 6.3244629016833
best_error: 6.324462901683299
best_error: 6.324462901683288
best_error: 6.324462816281211
best_error: 6.324462816281209
best_error: 6.324462816281203
best_error: 6.324044790920131
best_error: 6.324044790920118
best_error: 6.322671937282808
best_error: 6.322671937282795
best_error: 6.320736575962532
best_error: 6.320736575962529
best_error: 6.320736575962518
best_error: 6.3207027020815545
best_error: 6.320702702081539
best_error: 6.320695012142348
best_error: 6.320695012142347
best_error: 6.3206950121423375
best_error: 6.3206668969288256
best_error: 6.320666896928811
best_error: 6.320490891877378
best_error: 6.320490891877377
best_error: 6.320490891877364
best_error: 6.32048067044516
best_error: 6.320480670445159
best_error: 6.320480670445145
best_error: 6.320454565091045
best_error: 6.320454565091043
best_error: 6.3204545650910315
best_error: 6.320403721327936
best_error: 6.320403721327935
best_error: 6.3204037213279225
best_error: 6.320402176865236
best_error: 6.320402176865235
best_error: 6.3204021768652225
best_error: 6.3203716284183304
best_error: 6.320371628418328
best_error: 6.320371628418313
best_error: 6.320371205526221
best_error: 6.32037120552622
best_error: 6.320371205526208
best_error: 6.320370899549966
best_error: 6.3203708995499515
best_error: 6.320370662267914
best_error: 6.320370662267898
best_error: 6.3203704505095555
best_error: 6.32037045050954
best_error: 6.320370162657217
best_error: 6.3203701626572055
best_error: 6.320367815762353
best_error: 6.320367815762339
best_error: 6.320363126898429
best_error: 6.320363126898428
best_error: 6.320363126898416
best_error: 6.320363062977146
best_error: 6.320363062977145
best_error: 6.320363062977127
best_error: 6.320363020777647
best_error: 6.320363020777636
best_error: 6.320362992769347
best_error: 6.320362992769345
best_error: 6.32036299276933
best_error: 6.320362974134722
best_error: 6.320362974134705
best_error: 6.320362961654213
best_error: 6.320362961654212
best_error: 6.320362961654199
best_error: 6.320362953222045
best_error: 6.32036295322203
best_error: 6.320362947433496
best_error: 6.320362947433495
best_error: 6.320362947433484
best_error: 6.320362943357226
best_error: 6.320362943357225
best_error: 6.320362943357213
best_error: 6.320362940355962
best_error: 6.320362940355961
best_error: 6.320362940355949
best_error: 6.320362937947569
best_error: 6.320362937947554
