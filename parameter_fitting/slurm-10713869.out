ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 13.413590842247022
best_error: 13.413590838387364
best_error: 13.413590828741023
best_error: 13.021004732934449
best_error: 13.021004720941745
best_error: 13.021004697508928
best_error: 11.098715481145616
best_error: 11.098715422862277
best_error: 10.982561962624928
best_error: 10.982561900143656
best_error: 10.97504885531589
best_error: 10.975048791307156
best_error: 10.962300066753752
best_error: 10.962300003076482
best_error: 8.754673207052818
best_error: 8.754673159381998
best_error: 8.754673143226842
best_error: 8.432405238630032
best_error: 8.432405190506097
best_error: 8.432405181256316
best_error: 6.169390548790169
best_error: 6.169390411350207
best_error: 5.68180256790336
best_error: 5.681802370200545
best_error: 5.503447874971968
best_error: 5.503447852169592
best_error: 5.503447845288381
best_error: 5.433087608301036
best_error: 5.433087588536216
best_error: 5.433087577519929
best_error: 5.149129206841255
best_error: 5.149129192412408
best_error: 5.14912916974616
best_error: 5.036265337747077
best_error: 5.036265323672767
best_error: 5.036265295729356
best_error: 4.976288187668517
best_error: 4.976288172823116
best_error: 4.976288143287695
best_error: 4.94249329107354
best_error: 4.942493275974526
best_error: 4.942493244796646
best_error: 4.918497558529737
best_error: 4.918497543139919
best_error: 4.918497511059853
best_error: 4.907819267702621
best_error: 4.907819252208536
best_error: 4.907819219608065
best_error: 4.903392713119743
best_error: 4.903392015836928
best_error: 4.903362110743372
best_error: 4.90336209526373
best_error: 4.903362062395535
best_error: 4.90283339868804
best_error: 4.9028333832100905
best_error: 4.9028333503101
best_error: 4.902781970275445
best_error: 4.902781954797654
best_error: 4.902781921894574
best_error: 4.902748195151732
best_error: 4.9027481796740435
best_error: 4.902748146768939
best_error: 4.902733902374042
best_error: 4.902733886896414
best_error: 4.902733853990437
best_error: 4.902730603809482
best_error: 4.902730588331874
best_error: 4.902730555425691
best_error: 4.902728242601988
best_error: 4.902728227124385
best_error: 4.90272819421806
best_error: 4.9027280785994165
best_error: 4.902728063121789
best_error: 4.9027280302154805
best_error: 4.902727985530057
best_error: 4.902727970052445
best_error: 4.902727937146114
best_error: 4.902727937098215
best_error: 4.902727748186177
best_error: 4.902727736835879
best_error: 4.902727588523801
best_error: 4.902727572385422
best_error: 4.902727526766824
best_error: 4.902727512487006
best_error: 4.902727508016731
best_error: 4.902727506617284
best_error: 4.888762753859384
best_error: 4.888762505712501
best_error: 4.883765478036106
best_error: 4.883765470637497
best_error: 4.883765458322509
best_error: 4.8837654291502
best_error: 4.798577112721496
best_error: 4.798577048035627
best_error: 4.742680430221287
best_error: 4.742679767566378
best_error: 4.699721111869126
best_error: 4.699720763532967
best_error: 4.699413069385449
best_error: 4.699412719580062
best_error: 4.699310983880007
best_error: 4.6993106340392785
best_error: 4.699250363131922
best_error: 4.6992500132702215
best_error: 4.699249373122617
best_error: 4.6992493677161296
best_error: 4.699249338090988
best_error: 4.699249338084707
best_error: 4.69924932459128
best_error: 4.699248265126082
best_error: 4.699248218797969
best_error: 4.699248102323443
best_error: 4.699244318307056
best_error: 4.699243968450382
best_error: 4.699232998405503
best_error: 4.699232648559467
best_error: 4.699187762703475
best_error: 4.699187412899998
best_error: 4.699076845800628
best_error: 4.699076497535147
best_error: 4.699055626453897
best_error: 4.699055282906629
best_error: 4.699009297957876
best_error: 4.699008953526802
best_error: 4.698829124640217
best_error: 4.698828779450022
best_error: 4.698815793238418
best_error: 4.698815778707809
best_error: 4.698707206469718
best_error: 4.698707191392202
best_error: 4.698526940009552
best_error: 4.698526924551779
best_error: 4.698260919134757
best_error: 4.698260902625536
best_error: 4.697807515434745
best_error: 4.697807498917253
best_error: 4.696285508514185
best_error: 4.696285492306167
best_error: 4.6870601104280185
best_error: 4.687059789815967
best_error: 4.6855370900804445
best_error: 4.6855367812192865
best_error: 4.673569930540248
best_error: 4.673569612916098
best_error: 4.640350818500282
best_error: 4.640350818493564
best_error: 4.6080482631066895
best_error: 4.608047925445413
best_error: 4.586522859119013
best_error: 4.586522496209582
best_error: 4.582253222498563
best_error: 4.58225281839378
best_error: 4.567383650726729
best_error: 4.567383650720307
best_error: 4.5669851525005765
best_error: 4.566984747476782
best_error: 4.5503554423373345
best_error: 4.550355035083267
best_error: 4.548884729099125
best_error: 4.548884321660222
best_error: 4.54819050557677
best_error: 4.548190098050563
best_error: 4.548190037799683
best_error: 4.548189630270719
best_error: 4.548188678732404
best_error: 4.548188271195313
best_error: 4.548180559554744
best_error: 4.548180151967017
best_error: 4.548172504398144
best_error: 4.548172096755794
best_error: 4.548165418806912
best_error: 4.548165011160389
best_error: 4.548160865105164
best_error: 4.548160454842938
best_error: 4.548158098278584
best_error: 4.548157688014602
best_error: 4.54815561428687
best_error: 4.548155204021325
best_error: 4.548152598280004
best_error: 4.548152188012544
best_error: 4.548148058461309
best_error: 4.548147648190991
best_error: 4.54814466880924
best_error: 4.548144668802837
best_error: 4.548144038475413
best_error: 4.548143628202553
best_error: 4.548140788409913
best_error: 4.548140378136612
best_error: 4.54814017125884
best_error: 4.548140171252463
best_error: 4.5481398522047005
best_error: 4.548139599820379
best_error: 4.548139574079038
best_error: 4.548139462678921
