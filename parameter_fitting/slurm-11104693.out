ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 86
days_switch 60
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 98.58609149385744
best_error: 98.58609138098622
best_error: 98.58609135094399
best_error: 18.529755769608276
best_error: 18.52975548762994
best_error: 18.52975352414444
best_error: 15.593273796131372
best_error: 15.593273796056058
best_error: 15.593273772172529
best_error: 15.559679798361934
best_error: 15.559679798286448
best_error: 15.559679773075349
best_error: 15.406815187824677
best_error: 15.406815187769855
best_error: 15.406815155884043
best_error: 14.12131823390666
best_error: 14.121318112284978
best_error: 13.972303313099253
best_error: 13.972303176744996
best_error: 13.789172917352555
best_error: 13.789172762659467
best_error: 13.63219960445643
best_error: 13.632199433112799
best_error: 13.45181135521473
best_error: 13.451811164082734
best_error: 10.996720764303687
best_error: 10.99672035648933
best_error: 9.620960641194237
best_error: 9.620960481258923
best_error: 9.535606824042565
best_error: 9.535606762295656
best_error: 9.488087539829472
best_error: 9.488087516836515
best_error: 9.471818418381668
best_error: 9.471818399515161
best_error: 9.471818396716946
best_error: 9.463375870371557
best_error: 9.463375849990808
best_error: 9.463375848594104
best_error: 9.46210808886148
best_error: 9.462108062597679
best_error: 9.462108056784679
best_error: 9.461429851621451
best_error: 9.461429830887184
best_error: 9.461429829818156
best_error: 9.459117363909067
best_error: 9.459117342755889
best_error: 9.45911734207513
best_error: 9.45901275228654
best_error: 9.459012731111907
best_error: 9.459012730449913
best_error: 9.45894404781545
best_error: 9.458944026626725
best_error: 9.458944025977058
best_error: 9.458886474673527
best_error: 9.458886453472989
best_error: 9.458886452833648
best_error: 9.458856160032926
best_error: 9.458856138826174
best_error: 9.458856138192276
best_error: 9.458825716702608
best_error: 9.458825695489622
best_error: 9.458825694861176
best_error: 9.458813393728924
best_error: 9.458813372513404
best_error: 9.458813371887175
best_error: 9.458805780715071
best_error: 9.458805759497993
best_error: 9.458805758873128
best_error: 9.458800252157406
best_error: 9.458800230939197
best_error: 9.458800230315315
best_error: 9.458796654272103
best_error: 9.458796633053158
best_error: 9.45879663242992
best_error: 9.45879359357685
best_error: 9.458793572357267
best_error: 9.458793571734583
best_error: 9.458792016482748
best_error: 9.458791995262843
best_error: 9.458791994640443
best_error: 9.458790418689704
best_error: 9.458790397469473
best_error: 9.458790396847357
best_error: 9.458789783084693
best_error: 9.458789761864344
best_error: 9.458789761242338
best_error: 9.458789393165539
best_error: 9.458789371945102
best_error: 9.458789371323174
best_error: 9.458789107341556
best_error: 9.458789086121062
best_error: 9.458789085499179
best_error: 9.458788923987735
best_error: 9.458788902767203
best_error: 9.458788902145349
best_error: 9.458788763776655
best_error: 9.45878874255608
best_error: 9.458788741934269
best_error: 9.458788684227835
best_error: 9.458788663007258
best_error: 9.458788662385448
best_error: 9.458788602526589
best_error: 9.458788581305987
best_error: 9.458788580684198
best_error: 9.458788570910931
best_error: 9.45878856347331
best_error: 9.458788559981661
best_error: 9.45878854906854
best_error: 9.456697262669904
best_error: 9.456697241487165
best_error: 9.45669724116338
best_error: 9.451654525891811
best_error: 9.451654496667768
best_error: 9.347755452046746
best_error: 9.347755416782253
best_error: 9.16292047206574
best_error: 9.162920446863042
best_error: 9.162920440610343
best_error: 8.703341582859506
best_error: 8.703341561600713
best_error: 8.703341553995052
best_error: 8.614789972656867
best_error: 8.614789887513666
best_error: 7.994222271063287
best_error: 7.99422220931469
best_error: 7.962165548069653
best_error: 7.962164987864386
best_error: 7.7959877208942565
best_error: 7.795987682262813
best_error: 7.7804391167714915
best_error: 7.780438611101411
best_error: 7.775766548262058
best_error: 7.775766405046259
best_error: 7.76881858560747
best_error: 7.76881805610952
best_error: 7.767020185228681
best_error: 7.76702015541028
best_error: 7.762896342209144
best_error: 7.762896169034082
best_error: 7.741017237925508
best_error: 7.741017093212303
best_error: 7.71838207225437
best_error: 7.718382033692677
best_error: 7.7051932849037685
best_error: 7.705193237576635
best_error: 7.691618422735157
best_error: 7.691618374900431
best_error: 7.657445258945003
best_error: 7.657445219426778
best_error: 7.6309844600071335
best_error: 7.630984440392477
best_error: 7.628312606596589
best_error: 7.628312589462542
best_error: 7.624672089380157
best_error: 7.624672074294524
best_error: 7.619416179466636
best_error: 7.619416171970434
best_error: 7.619416171622363
best_error: 7.611291172743678
best_error: 7.611291165805528
best_error: 7.611291165534581
best_error: 7.611291164899525
best_error: 7.582177613450915
best_error: 7.58217760832391
best_error: 7.582177603624894
best_error: 7.247159310171251
best_error: 7.247159197215844
best_error: 7.23213928782343
best_error: 7.232139212261709
best_error: 7.202569434019006
best_error: 7.2025694318630435
best_error: 7.202569422553489
best_error: 7.2025693945484015
best_error: 7.202569383169807
best_error: 7.2020071795599225
best_error: 7.202007177719116
best_error: 7.202007167457539
best_error: 7.202007140340079
best_error: 7.201613745277308
best_error: 7.201613744720382
best_error: 7.201613728417424
best_error: 7.201613705520242
best_error: 7.2016137039890635
best_error: 7.201537889583212
best_error: 7.201537889128504
best_error: 7.201537872521296
best_error: 7.201537849826997
best_error: 7.156216041515504
best_error: 7.156216039075414
best_error: 7.1562160320731785
best_error: 7.156216002375774
best_error: 7.156215975285393
best_error: 7.154812273743003
best_error: 7.1548122721916805
best_error: 7.154812261594394
best_error: 7.154812234175183
best_error: 7.154812218970342
best_error: 7.154108120884898
best_error: 7.154108120207692
best_error: 7.154108105850182
best_error: 7.154108080850074
best_error: 7.154108076069377
best_error: 7.153774376536662
best_error: 7.1537743760885215
best_error: 7.1537743611058495
best_error: 7.153774336595181
best_error: 7.153643727601576
best_error: 7.153643710869788
best_error: 7.1536437061089995
best_error: 7.153643687148081
best_error: 7.106767045427183
best_error: 7.106767042897486
best_error: 7.106767035150224
best_error: 7.106767006147379
best_error: 7.106766978939559
best_error: 7.105672715979496
best_error: 7.105672714077508
best_error: 7.105672703564669
best_error: 7.105672676336637
best_error: 7.105672659616005
best_error: 7.104950230169209
best_error: 7.104950229521811
best_error: 7.1049502138133525
best_error: 7.104950189884039
best_error: 7.104950188230548
best_error: 7.104895646474976
best_error: 7.104895638673822
best_error: 7.104895625981969
best_error: 7.1048956047833505
best_error: 7.104893126967899
best_error: 7.104893126900697
best_error: 7.104893126462825
best_error: 7.104893108524768
best_error: 7.104893085997203
best_error: 7.00867880603718
best_error: 7.008678800976853
best_error: 7.008678785640654
best_error: 7.008678763821761
best_error: 6.968170854125426
best_error: 6.968170790838162
best_error: 6.883234673246105
best_error: 6.8832345802315125
best_error: 6.879156333974565
best_error: 6.879156227919027
best_error: 6.85491687369262
best_error: 6.8549161533699
best_error: 6.458230947550216
best_error: 6.458230484581547
best_error: 6.445604305438177
best_error: 6.445604301942636
best_error: 6.445604275745921
