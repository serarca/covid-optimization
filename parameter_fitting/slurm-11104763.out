ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 92
days_switch 45
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 98.46167408203584
best_error: 98.46167391244853
best_error: 98.46167386040094
best_error: 15.468469464610632
best_error: 15.468469455184398
best_error: 15.462360364574597
best_error: 15.462360355583714
best_error: 15.45556452522369
best_error: 15.45556452390899
best_error: 15.452298827919744
best_error: 15.45229882684122
best_error: 15.446455655633388
best_error: 15.446455655571677
best_error: 15.446455655388638
best_error: 15.439220855966349
best_error: 15.43922085590149
best_error: 15.439220855763242
best_error: 15.40172959080991
best_error: 15.401729590625777
best_error: 15.131033148618489
best_error: 15.131033148609024
best_error: 15.131033148408251
best_error: 14.115152437850451
best_error: 14.115152437827986
best_error: 14.115152437826879
best_error: 14.029237518183884
best_error: 14.029237499160146
best_error: 13.934312912611347
best_error: 13.934312898217275
best_error: 13.917937301223654
best_error: 13.917937301203537
best_error: 13.91793730093415
best_error: 13.917777856414725
best_error: 13.917777856394576
best_error: 13.917777856111867
best_error: 13.917745033905126
best_error: 13.917745033885017
best_error: 13.917745033602458
best_error: 13.917636477561771
best_error: 13.917636476814561
best_error: 13.917350561050842
best_error: 13.91735055948957
best_error: 13.91448300802746
best_error: 13.914483004020665
best_error: 13.902010780253928
best_error: 13.90201076698791
best_error: 13.86705790806496
best_error: 13.867057908057262
best_error: 13.8670578854022
best_error: 13.821798546796048
best_error: 13.821798546783016
best_error: 13.821798517573376
best_error: 13.801424653403357
best_error: 13.801424628102112
best_error: 13.759729668670301
best_error: 13.759729668492987
best_error: 13.755374873668247
best_error: 13.755374873477454
best_error: 13.755374873471293
best_error: 13.75534933421066
best_error: 13.755349334020158
best_error: 13.755349334013575
best_error: 13.755282384730974
best_error: 13.755282383904778
best_error: 13.755273547100266
best_error: 13.75527354690939
best_error: 13.755273546904363
best_error: 13.755212001571184
best_error: 13.75521200137835
best_error: 13.755212001375208
best_error: 13.754963572057132
best_error: 13.754963571856251
best_error: 13.754423997610393
best_error: 13.754423997553307
best_error: 13.754423997391385
best_error: 13.75441787397626
best_error: 13.754417873912564
best_error: 13.754417873756557
best_error: 13.754392691628883
best_error: 13.754392691538694
best_error: 13.754392691406325
best_error: 13.75431660686863
best_error: 13.754316606635914
best_error: 13.7542282249005
best_error: 13.754228224652802
best_error: 13.754096520692402
best_error: 13.754096520434205
best_error: 13.751710274323715
best_error: 13.751710274241965
best_error: 13.751710273867282
best_error: 13.701388069848011
best_error: 13.701388066398572
best_error: 13.701388064534546
best_error: 13.576588059377517
best_error: 13.576588059162445
best_error: 13.576588053004919
best_error: 13.576588040192426
best_error: 13.475412380781385
best_error: 13.475412380583666
best_error: 13.475412369076004
best_error: 13.450869238395288
best_error: 13.450869238394391
best_error: 13.450869237220571
best_error: 13.449801523144293
best_error: 13.449801523143448
best_error: 13.44980152311655
best_error: 13.390992638275739
best_error: 13.390992635655518
best_error: 13.347419493098576
best_error: 13.347419493098574
best_error: 13.347419493097904
best_error: 13.347419492707006
best_error: 13.334943452215668
best_error: 13.334943451846438
best_error: 13.334943437954655
best_error: 13.331312159397752
best_error: 13.33131215939775
best_error: 13.331312159397243
best_error: 13.331312158779937
best_error: 13.330712289235096
best_error: 13.330712287765595
best_error: 13.330339407547104
best_error: 13.330339407259608
best_error: 13.330339406977682
best_error: 13.33027074729791
best_error: 13.33027074729738
best_error: 13.330270746728106
best_error: 13.33008318354821
best_error: 13.33008318354768
best_error: 13.330083182978571
best_error: 13.329342276187253
best_error: 13.329342276178107
best_error: 13.329342275618265
best_error: 13.327243383572632
best_error: 13.327243383314594
best_error: 13.32724337401718
best_error: 13.317199807630118
best_error: 13.317199806676332
best_error: 13.317199786722364
best_error: 13.275041539675405
best_error: 13.275041535944023
best_error: 13.275041483550032
best_error: 13.265170542041616
best_error: 13.265170536305114
best_error: 13.265170463033957
best_error: 13.202422130878201
best_error: 13.202422121350168
best_error: 13.202422011652903
best_error: 12.858315949862135
best_error: 12.858315944037965
best_error: 12.858315931040295
best_error: 12.814746243512944
best_error: 12.814746234149334
best_error: 12.814746165603356
best_error: 12.804438786944559
best_error: 12.804438783919498
best_error: 12.8044387816766
best_error: 12.766885751104883
best_error: 12.766885749185741
best_error: 12.766885748743817
best_error: 12.75021837591349
best_error: 12.750218370872894
best_error: 12.750218329111888
best_error: 12.737686293627664
best_error: 12.737686292912906
best_error: 12.737686291140134
best_error: 12.719948856952056
best_error: 12.719948856115067
best_error: 12.719948846053969
best_error: 12.719948845783712
best_error: 12.716416413343778
best_error: 12.716416413341618
best_error: 12.716416401672468
best_error: 12.714986296791757
best_error: 12.714986296789597
best_error: 12.714986286359716
best_error: 12.712985059581742
best_error: 12.712985058555507
best_error: 12.712985046448745
best_error: 12.71298504613456
best_error: 12.710153923041045
best_error: 12.710153922585318
best_error: 12.71015391489558
best_error: 12.71015391461675
best_error: 12.710029405065194
best_error: 12.710029403825285
best_error: 12.71002938992554
best_error: 12.710029389459331
best_error: 12.710028538789203
best_error: 12.710028537550308
best_error: 12.710028523664407
best_error: 12.710028523193703
best_error: 12.710027503381472
best_error: 12.710027502143745
best_error: 12.710027488273802
best_error: 12.710027487797909
best_error: 12.71002636680117
best_error: 12.71002636556467
best_error: 12.710026351711623
best_error: 12.710026351230248
best_error: 12.71002435751073
best_error: 12.710024356192662
best_error: 12.710024341631877
best_error: 12.710024341193247
best_error: 12.710023775060971
best_error: 12.710023773827109
best_error: 12.710023760010381
best_error: 12.710023759517235
best_error: 12.710023499417462
best_error: 12.710023498183864
best_error: 12.710023484370844
best_error: 12.71002348387648
best_error: 12.710023433459572
best_error: 12.710023432226063
best_error: 12.710023418414087
best_error: 12.710023417919386
best_error: 12.710023379217217
best_error: 12.710023377983767
best_error: 12.710023364172647
best_error: 12.71002336367767
best_error: 12.710023354521649
best_error: 12.710023353288236
best_error: 12.710023339477496
best_error: 12.710023338982399
best_error: 12.71002333654182
best_error: 12.7100233360467
best_error: 12.710023333356295
best_error: 12.71002333286116
best_error: 12.71002333088894
best_error: 12.710023330451751
