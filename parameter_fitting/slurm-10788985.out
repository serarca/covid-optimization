ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 8.741630987508437
best_error: 8.741630920621908
best_error: 7.456895777782323
best_error: 7.4568956367336225
best_error: 7.075709001798657
best_error: 7.0757090003423695
best_error: 7.075708835646868
best_error: 6.859863711800286
best_error: 6.859863664469508
best_error: 6.859863550440135
best_error: 6.550896977851925
best_error: 6.550896924091868
best_error: 6.550896801551378
best_error: 6.135219268147823
best_error: 6.135219194489514
best_error: 6.1352191628232955
best_error: 5.770005519696106
best_error: 5.770005443032895
best_error: 5.770005428181513
best_error: 5.4667895847703125
best_error: 5.466789506521083
best_error: 5.466789497461418
best_error: 5.26229646311496
best_error: 5.262296382895582
best_error: 4.927350189309864
best_error: 4.927350110849243
best_error: 4.832934050742997
best_error: 4.83293397240582
best_error: 4.807879519555094
best_error: 4.807879441499011
best_error: 4.797784162527871
best_error: 4.797784084493425
best_error: 4.795542955675634
best_error: 4.795542877645989
best_error: 4.7942105938789155
best_error: 4.7942105158521215
best_error: 4.79356460499249
best_error: 4.793564526967078
best_error: 4.793122173171447
best_error: 4.793122095146977
best_error: 4.792929391125059
best_error: 4.792929313043922
best_error: 4.792876586106768
best_error: 4.792876472429027
best_error: 4.792830822960829
best_error: 4.792830744879902
best_error: 4.7928214682878165
best_error: 4.792821390206914
best_error: 4.792819347257827
best_error: 4.792819269176919
best_error: 4.792819166185169
best_error: 4.792819088104274
best_error: 3.7997621099088175
best_error: 3.799762085923483
best_error: 3.7997619537542806
best_error: 3.5649480458307776
best_error: 3.5649477952509896
best_error: 3.4418219252312103
best_error: 3.441821654229725
best_error: 2.929012467160345
best_error: 2.929012394812977
best_error: 2.929012366143667
best_error: 2.9108374960371894
best_error: 2.9108371479925825
best_error: 2.8651962708154657
best_error: 2.8651961990648216
best_error: 2.8637485801806473
best_error: 2.863748224086347
best_error: 2.8446228463787406
best_error: 2.8446227763063607
best_error: 2.8446227465611846
best_error: 2.8432985423002552
best_error: 2.843298169101983
best_error: 2.8426814940521172
best_error: 2.842681120811001
best_error: 2.842602672585539
best_error: 2.84260260251445
best_error: 2.8426025727797546
best_error: 2.84259651556946
best_error: 2.842596142322442
best_error: 2.842502408900588
best_error: 2.8425020364516733
best_error: 2.842488667323324
best_error: 2.8424882948734576
best_error: 2.8424876433137563
best_error: 2.8424872708638054
best_error: 2.8424871519031747
best_error: 2.8424871163445937
best_error: 2.842487031447682
best_error: 2.8424869613767076
best_error: 2.8424869316425943
best_error: 2.842486916754898
best_error: 2.8424856230402527
best_error: 2.8424852505899976
best_error: 2.8424798465576613
best_error: 2.8424794741063373
best_error: 2.842456742157577
best_error: 2.8424563697019587
best_error: 2.842364872071757
best_error: 2.8423644987943746
best_error: 2.8419982946782847
best_error: 2.841997921332693
best_error: 2.84053743425074
best_error: 2.8405370606370033
best_error: 2.8358352788349634
best_error: 2.835835210738004
best_error: 2.83583517907942
best_error: 2.8353566490097384
best_error: 2.8353562665614747
best_error: 2.830133433494451
best_error: 2.830133365356299
best_error: 2.8301333337858585
best_error: 2.82713181406817
best_error: 2.8271314246327304
best_error: 2.8247220930543526
best_error: 2.8247220258226697
best_error: 2.8247219933897663
best_error: 2.823016725611514
best_error: 2.8230166583696987
best_error: 2.82301662595438
best_error: 2.820993607904055
best_error: 2.8209932164395592
best_error: 2.8196167924873925
best_error: 2.8196167252622235
best_error: 2.8196166928732165
best_error: 2.81849786648694
best_error: 2.8184977994355673
best_error: 2.818497766908468
best_error: 2.817643710968121
best_error: 2.817643318049119
best_error: 2.816255502732521
best_error: 2.8162554357398246
best_error: 2.816255403227722
best_error: 2.8154936705017923
best_error: 2.81549360354703
best_error: 2.8154935710401103
best_error: 2.8151859753926463
best_error: 2.8151855822475618
best_error: 2.8145719737874506
best_error: 2.8145719069045407
best_error: 2.814571874406644
best_error: 2.8142891222280566
best_error: 2.8142890553851956
best_error: 2.8142890228925754
best_error: 2.8140425222599585
best_error: 2.8140421291981452
best_error: 2.813112610768747
best_error: 2.813112543866988
best_error: 2.8131125115383755
best_error: 2.8126892703320894
best_error: 2.8126892034937914
best_error: 2.8126891711789046
best_error: 2.8126339064294017
best_error: 2.812633514508354
best_error: 2.8122436071183117
best_error: 2.812243540392508
best_error: 2.812243508107118
best_error: 2.812197702318395
best_error: 2.8121976355933342
best_error: 2.8121976033083937
best_error: 2.812014084778156
best_error: 2.812014018056048
best_error: 2.812013985772924
best_error: 2.8115036235725546
best_error: 2.81150355685789
best_error: 2.811503524786832
best_error: 2.8104053153120665
best_error: 2.810405247973283
best_error: 2.8104052168603277
best_error: 2.8078439670376865
best_error: 2.8078435988972172
best_error: 2.807781008991661
best_error: 2.807780641230435
best_error: 2.807719169069629
best_error: 2.807718805276051
best_error: 2.8076277659818727
best_error: 2.807627402023879
best_error: 2.8075782144759334
best_error: 2.807578145591456
best_error: 2.8075781178377306
best_error: 2.807541910073355
best_error: 2.807541545958627
best_error: 2.807405278471628
best_error: 2.80740491279535
best_error: 2.8073832911321546
best_error: 2.8073829254331044
best_error: 2.807370842362478
best_error: 2.807370476650533
best_error: 2.807363805454135
best_error: 2.8073634397349063
best_error: 2.807359820030526
best_error: 2.8073594543071527
best_error: 2.8073575736805383
best_error: 2.8073572079548352
best_error: 2.807356316095837
best_error: 2.8073559503688332
best_error: 2.807355618461365
best_error: 2.807355252733638
best_error: 2.8073552354464475
best_error: 2.807355235354101
best_error: 2.8073552012707133
best_error: 2.8073551405142423
best_error: 2.8073551130720054
best_error: 2.807355098453422
best_error: 2.807355098361062
best_error: 2.8073550862001917
best_error: 2.8073550861078465
best_error: 2.807355078190918
best_error: 2.807355078098573
best_error: 2.8073550780592615
best_error: 2.807355078047091
best_error: 2.807355077554073
best_error: 2.8073550775419065
best_error: 2.8073550774618914
