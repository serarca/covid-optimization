ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.824210710230782
best_error: 11.824210520794677
best_error: 9.92369096030115
best_error: 9.923690535668028
best_error: 6.903508630251213
best_error: 6.903508156609048
best_error: 6.469625038608919
best_error: 6.469624728000534
best_error: 6.341552372674791
best_error: 6.341552109497394
best_error: 6.224352985775244
best_error: 6.224352721895784
best_error: 6.1334616596732205
best_error: 6.133461397281418
best_error: 6.092199713699956
best_error: 6.092199448105877
best_error: 6.089516982564355
best_error: 6.089516716585724
best_error: 6.089025434371316
best_error: 6.089025168322354
best_error: 6.08864001702819
best_error: 6.088639750924086
best_error: 6.088628021618849
best_error: 6.088627755513029
best_error: 6.088627161670849
best_error: 6.0886269290689015
best_error: 6.0886269288631585
best_error: 6.088626846807181
best_error: 5.852024857640421
best_error: 5.852024536333534
best_error: 5.81561664303179
best_error: 5.815616239505186
best_error: 5.7909961492715585
best_error: 5.790995770654985
best_error: 5.730229567980585
best_error: 5.730229223449116
best_error: 5.681704141033096
best_error: 5.681703805196179
best_error: 5.6472384248001255
best_error: 5.647238092159883
best_error: 5.6360944745092585
best_error: 5.636094140162696
best_error: 5.63067559338697
best_error: 5.630675258986415
best_error: 5.623802450880845
best_error: 5.623802116528809
best_error: 5.621423320234998
best_error: 5.6214229854259985
best_error: 5.619769730245061
best_error: 5.619769396477668
best_error: 5.618700445305963
best_error: 5.618700111339547
best_error: 5.617844970093772
best_error: 5.617844635968227
best_error: 5.617372921538497
best_error: 5.617372587325169
best_error: 5.616998254514954
best_error: 5.6169979202319755
best_error: 5.616788172773347
best_error: 5.616787838451328
best_error: 5.616623332639682
best_error: 5.616622998287019
best_error: 5.616527920607217
best_error: 5.616527586236831
best_error: 5.616454565033417
best_error: 5.616454230649399
best_error: 5.616388642333846
best_error: 5.6163883079375765
best_error: 5.616332944612575
best_error: 5.616332610205962
best_error: 5.616307500996587
best_error: 5.6163071665852335
best_error: 5.616305373992457
best_error: 5.6163050395807215
best_error: 5.616303791278013
best_error: 5.616303456865979
best_error: 5.616301043596009
best_error: 5.616300709183461
best_error: 5.616300469295646
best_error: 5.616300293793494
best_error: 5.616300220260706
best_error: 5.616300149044466
best_error: 5.616300113135223
best_error: 5.6162968707153365
best_error: 5.6162965363024115
best_error: 5.616283442967681
best_error: 5.61628310855385
best_error: 5.616229753308701
best_error: 5.616229418891185
best_error: 5.616015335832023
best_error: 5.616015001399839
best_error: 5.615163115082309
best_error: 5.615162780592364
best_error: 5.611873097987145
best_error: 5.611872761933877
best_error: 5.601899454617536
best_error: 5.601899111148571
best_error: 5.594004847319717
best_error: 5.594004484898055
best_error: 5.5613491153925185
best_error: 5.561348747960174
best_error: 5.445344174084463
best_error: 5.445343913357866
best_error: 5.423604288439875
best_error: 5.42360391035267
best_error: 5.360297312849603
best_error: 5.360296920398419
best_error: 5.347128161807603
best_error: 5.347127772478858
best_error: 5.345580185768262
best_error: 5.345579796208083
best_error: 5.34492908022392
best_error: 5.344928690566425
best_error: 5.344498756260334
best_error: 5.344498366538542
best_error: 5.344299860947636
best_error: 5.3442994711961145
best_error: 5.3441534770047365
best_error: 5.344153087231339
best_error: 5.344132412449398
best_error: 5.34413215426772
best_error: 5.133060314487787
best_error: 5.13305979827517
best_error: 5.127244840916575
best_error: 5.12724431290753
best_error: 5.114974909821399
best_error: 5.114974376189858
best_error: 5.058056432624197
best_error: 5.058055886140526
best_error: 5.042462741868055
best_error: 5.042462200507902
best_error: 5.0342124855502375
best_error: 5.034211950220675
best_error: 5.033577519603672
best_error: 5.033577299521665
best_error: 5.032157221796121
best_error: 5.032156686793156
best_error: 5.031971537452784
best_error: 5.0319713177773
best_error: 5.015354473744477
best_error: 5.015353928432774
best_error: 4.991770858988637
best_error: 4.991770673784168
best_error: 4.990532247862815
best_error: 4.990532054252782
best_error: 4.987340109192012
best_error: 4.987339905435711
best_error: 4.971640303434218
best_error: 4.971640097771358
best_error: 4.921250845785471
best_error: 4.921250619498261
best_error: 4.908612669927956
best_error: 4.908612143219525
best_error: 4.905766352590954
best_error: 4.905766126563587
best_error: 4.9057638478276395
best_error: 4.905763320621713
best_error: 4.904994772148832
best_error: 4.904994544480789
best_error: 4.893827302796874
best_error: 4.893827077083838
best_error: 4.889637824675804
best_error: 4.889637299273161
best_error: 4.859833032577859
best_error: 4.859832500745153
best_error: 4.8276169075713
best_error: 4.827616355888737
best_error: 4.732648352518407
best_error: 4.732648156423204
best_error: 4.7269102973240855
best_error: 4.726910110999649
best_error: 4.724892645225962
best_error: 4.72489200425672
best_error: 4.722680870107222
best_error: 4.722680683701874
best_error: 4.7221043745072215
best_error: 4.722103733591075
best_error: 4.703318309355149
best_error: 4.703318097952979
best_error: 4.6805634745052025
best_error: 4.6805628986281445
best_error: 4.644516996043967
best_error: 4.644516785070515
best_error: 4.63444528044209
best_error: 4.634444707378002
