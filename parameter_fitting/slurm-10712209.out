ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 13.159046287920255
best_error: 13.15904628089178
best_error: 13.159046271368595
best_error: 11.997122787794861
best_error: 11.997122739617646
best_error: 11.997122717880599
best_error: 10.916689151082025
best_error: 10.916689070906017
best_error: 10.916689067054051
best_error: 10.777049649328923
best_error: 10.77704955445045
best_error: 10.535606081552672
best_error: 10.535605978591164
best_error: 10.535453132253217
best_error: 10.535453029986867
best_error: 9.812632794572318
best_error: 9.812632648249714
best_error: 6.510983505248265
best_error: 6.5109827946174175
best_error: 6.502784875266266
best_error: 6.502784782206268
best_error: 5.629726121140724
best_error: 5.629725377351278
best_error: 4.941252437553358
best_error: 4.941252196632879
best_error: 4.872117110224971
best_error: 4.872116837547871
best_error: 4.836035740724228
best_error: 4.836035464777498
best_error: 4.829355247711591
best_error: 4.829354971161535
best_error: 4.8252727351003175
best_error: 4.825272459049131
best_error: 4.823620615137235
best_error: 4.823620338936941
best_error: 4.823420537348559
best_error: 4.823420537228366
best_error: 4.8232727530307535
best_error: 4.823272476803128
best_error: 4.82324605324559
best_error: 4.823246053125411
best_error: 4.823243097312497
best_error: 4.8232428210616884
best_error: 4.822764424957324
best_error: 4.822764385217245
best_error: 4.822764331011426
best_error: 4.8213481763574535
best_error: 4.821348135535208
best_error: 4.821348086927886
best_error: 4.8175042165682616
best_error: 4.817504172813916
best_error: 4.817504136779137
best_error: 4.810905168425474
best_error: 4.810905119027289
best_error: 4.810905100615496
best_error: 4.793583176547107
best_error: 4.793583119588504
best_error: 4.793583112962079
best_error: 4.699330183890499
best_error: 4.699330031757282
best_error: 4.64901171447373
best_error: 4.649011565412863
best_error: 4.64154229885491
best_error: 4.641542150301474
best_error: 4.638253011850246
best_error: 4.63825286350483
best_error: 4.6382528629933475
best_error: 4.636702674918849
best_error: 4.63670252671984
best_error: 4.636702526001357
best_error: 4.636514575984975
best_error: 4.6365144278037835
best_error: 4.636514427060199
best_error: 4.636486092357728
best_error: 4.636485944179208
best_error: 4.636485943431816
best_error: 4.636474503159036
best_error: 4.6364743549816465
best_error: 4.636474354232694
best_error: 4.636469260665659
best_error: 4.636469112488721
best_error: 4.636469111739091
best_error: 4.63646665199478
best_error: 4.636466503818099
best_error: 4.636466503068153
best_error: 4.636466235319575
best_error: 4.636466087142943
best_error: 4.636466086392918
best_error: 4.636466065585196
best_error: 4.636465917408586
best_error: 4.63646591665851
best_error: 4.6364600557744735
best_error: 4.636459492204008
best_error: 4.636449349301415
best_error: 4.63644920112351
best_error: 4.6364492003764
best_error: 4.616581321743576
best_error: 4.61658069704332
best_error: 4.613102500735654
best_error: 4.613102500617661
best_error: 4.612182980100675
best_error: 4.612182627262449
best_error: 4.61190376129022
best_error: 4.611903761169644
best_error: 4.611808767524646
best_error: 4.611808425351946
best_error: 4.611728480593268
best_error: 4.611728131333008
best_error: 4.607967740685844
best_error: 4.607967740566478
best_error: 4.607967650627225
best_error: 4.607947615987461
best_error: 4.607947267596883
best_error: 4.607654725005682
best_error: 4.607654724885578
best_error: 4.607654635008756
best_error: 4.607653825326111
best_error: 4.607653479982699
best_error: 4.607644262717031
best_error: 4.607644262595497
best_error: 4.607644172778214
best_error: 4.607640731560615
best_error: 4.607640392596776
best_error: 4.607618049974561
best_error: 4.607617710906156
best_error: 4.607606357107954
best_error: 4.60760635698651
best_error: 4.607606267141039
best_error: 4.607606090365267
best_error: 4.607603918792878
best_error: 4.607603579081021
best_error: 4.607597689380707
best_error: 4.607597442415203
best_error: 4.6075962298374495
best_error: 4.607596229716011
best_error: 4.607596139866468
best_error: 4.607596119718848
best_error: 4.6075957799798815
best_error: 4.607582860608606
best_error: 4.607582722994081
best_error: 4.607538594038093
best_error: 4.607538593917534
best_error: 4.607538504058046
best_error: 4.6075121587320025
best_error: 4.607512158611897
best_error: 4.607512068743878
best_error: 4.607356297757583
best_error: 4.607355952472749
best_error: 4.60728164430116
best_error: 4.607281298988797
best_error: 4.606994924346443
best_error: 4.606994578925003
best_error: 4.60626092778067
best_error: 4.606260577839503
best_error: 4.598321826754859
best_error: 4.598321484241444
best_error: 4.594196062400377
best_error: 4.594196062277228
best_error: 4.594195972273477
best_error: 4.591463456723153
best_error: 4.591463456598394
best_error: 4.591463366576427
best_error: 4.5877882696902255
best_error: 4.587787942016718
best_error: 4.58775282003001
best_error: 4.58775250839167
best_error: 4.586729917476879
best_error: 4.586729609861996
best_error: 4.585241429370135
best_error: 4.585241123712141
best_error: 4.58456064266438
best_error: 4.584560337844797
best_error: 4.584206436597608
best_error: 4.584206131779723
best_error: 4.5839886212291585
best_error: 4.583988316412622
best_error: 4.583853216925898
best_error: 4.583852912110316
best_error: 4.58376774759633
best_error: 4.58376744278141
best_error: 4.583712763757536
best_error: 4.583712458943062
best_error: 4.583676519217084
best_error: 4.583676214402907
best_error: 4.583637628600954
best_error: 4.5836373209894035
best_error: 4.5822486475040085
best_error: 4.5822486473734605
best_error: 4.582248557175875
best_error: 4.581195244179446
best_error: 4.581194936446183
best_error: 4.581030032969231
best_error: 4.581030032838827
best_error: 4.581029942655828
