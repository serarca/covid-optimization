ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.364533787740122
best_error: 12.364533654780821
best_error: 11.349245569353826
best_error: 11.34924530916583
best_error: 7.896474835852179
best_error: 7.8964741703084105
best_error: 6.005146361201524
best_error: 6.00514608499228
best_error: 6.00410508395588
best_error: 6.004104807535359
best_error: 6.003590860620646
best_error: 6.003590584095912
best_error: 6.003316711195904
best_error: 6.00331643461564
best_error: 6.002653371839482
best_error: 6.002653096519866
best_error: 6.002227449136393
best_error: 6.002227173730234
best_error: 6.002180119925378
best_error: 6.002179844512295
best_error: 6.002147016417394
best_error: 6.002146740999497
best_error: 6.002129749136577
best_error: 6.002129473716154
best_error: 6.00211718300819
best_error: 6.002116907585916
best_error: 6.002111002652962
best_error: 6.002110727229794
best_error: 6.0021062833969445
best_error: 6.00210600797309
best_error: 6.00210413625095
best_error: 6.002103860826772
best_error: 6.002103111483691
best_error: 6.002102830854881
best_error: 5.430684248348079
best_error: 5.430683848828868
best_error: 5.355562935015462
best_error: 5.355562454422781
best_error: 5.352926235946175
best_error: 5.352925754354565
best_error: 5.342759375816197
best_error: 5.342758887533898
best_error: 5.290205134808268
best_error: 5.290204368660249
best_error: 5.061273589299459
best_error: 5.0612727639540775
best_error: 5.007626670048799
best_error: 5.007626558339254
best_error: 4.89488714513512
best_error: 4.894886579481906
best_error: 4.879388648593707
best_error: 4.879387912693262
best_error: 4.867139303718293
best_error: 4.867138673060846
best_error: 4.859108275866285
best_error: 4.859108086796193
best_error: 4.855013527008717
best_error: 4.855012892189729
best_error: 4.8547272401363735
best_error: 4.854726605269668
best_error: 4.854559877997494
best_error: 4.854559243102885
best_error: 4.85454950424921
best_error: 4.8545488693528815
best_error: 4.854545344479264
best_error: 4.854544709582249
best_error: 4.854543664943098
best_error: 4.8545430300457815
best_error: 4.85454301113886
best_error: 4.854542822317605
best_error: 4.854542800845408
best_error: 4.854542796396451
best_error: 4.848457454692143
best_error: 4.848457279190843
best_error: 4.848102446315737
best_error: 4.848101778476053
best_error: 4.847464688844426
best_error: 4.847464522791898
best_error: 4.847343055211977
best_error: 4.84734237186837
best_error: 4.84725776786038
best_error: 4.84725708445973
best_error: 4.8472361076111685
best_error: 4.847235424135898
best_error: 4.847186883405
best_error: 4.847186719604134
best_error: 4.847151370321148
best_error: 4.847151208463575
best_error: 4.846932869812877
best_error: 4.846932710073084
best_error: 4.846130016836094
best_error: 4.8461298595306594
best_error: 4.84609557693787
best_error: 4.846094882497248
best_error: 4.838761979502432
best_error: 4.838761829848805
best_error: 4.831717456192603
best_error: 4.83171676719237
best_error: 4.80855808647128
best_error: 4.808557894532367
best_error: 4.806222241084692
best_error: 4.80622159827082
best_error: 4.802070713014878
best_error: 4.802070506133997
best_error: 4.801504068497641
best_error: 4.801503454381131
best_error: 4.798068832601382
best_error: 4.798068223734232
best_error: 4.797002896798848
best_error: 4.797002686686455
best_error: 4.79669905327186
best_error: 4.796698843065078
best_error: 4.7966804369374305
best_error: 4.796679834639361
best_error: 4.796050215378988
best_error: 4.796050005647272
best_error: 4.795581782857914
best_error: 4.795581183099358
best_error: 4.795009470720183
best_error: 4.795009258493339
best_error: 4.794565826532172
best_error: 4.794565233746042
best_error: 4.793849813566759
best_error: 4.793849601101895
best_error: 4.79340251042994
best_error: 4.793402297935639
best_error: 4.793351561455977
best_error: 4.793350973079313
best_error: 4.793132572772049
best_error: 4.793132354611539
best_error: 4.792833944662444
best_error: 4.792833726221994
best_error: 4.792740078484149
best_error: 4.792739860044318
best_error: 4.792723086878782
best_error: 4.792722511233558
best_error: 4.79244003092805
best_error: 4.792439816718928
best_error: 4.790812363080893
best_error: 4.790812148709595
best_error: 4.7848815292761335
best_error: 4.784881316370797
best_error: 4.7847108622637675
best_error: 4.78471025338155
best_error: 4.737982625908923
best_error: 4.737982422589392
best_error: 4.731050323251653
best_error: 4.731050135782214
best_error: 4.729691105874469
best_error: 4.729690463506534
best_error: 4.729004905857995
best_error: 4.729004720405866
best_error: 4.728951358604908
best_error: 4.728951173149298
best_error: 4.728938777589989
best_error: 4.7289385921335985
