ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.762393568295213
best_error: 11.762393538916214
best_error: 11.762393509140619
best_error: 11.587601295045227
best_error: 11.587601257694082
best_error: 11.587601223398917
best_error: 10.43302824040532
best_error: 10.433028142364922
best_error: 10.43302809847119
best_error: 9.449347006425054
best_error: 9.44934686697998
best_error: 9.184401953246544
best_error: 9.184401806419718
best_error: 9.151349377058889
best_error: 9.151349234875743
best_error: 8.318102041842497
best_error: 8.318101844083145
best_error: 7.765828996997538
best_error: 7.765828854455709
best_error: 7.491818890956203
best_error: 7.491818777746009
best_error: 6.7234131706716305
best_error: 6.723413048185924
best_error: 6.324948442525653
best_error: 6.324948332616676
best_error: 6.324948324474029
best_error: 5.933759195384122
best_error: 5.9337589973825535
best_error: 5.872727162104585
best_error: 5.872727043367252
best_error: 5.841519755507951
best_error: 5.841519634192127
best_error: 5.834387743639667
best_error: 5.834387621735386
best_error: 5.83367748704625
best_error: 5.833677365083584
best_error: 5.833326566814974
best_error: 5.833326370044354
best_error: 5.833298558377519
best_error: 5.833298436383718
best_error: 5.8332889846290215
best_error: 5.833288787858796
best_error: 5.833282003833718
best_error: 5.833281881838545
best_error: 5.8332685476698085
best_error: 5.833268425673529
best_error: 5.833266194339641
best_error: 5.833266072343175
best_error: 5.833265929983833
best_error: 5.833265733213771
best_error: 3.995727377855473
best_error: 3.9957271129290017
best_error: 3.4431422250625103
best_error: 3.4431415540571315
best_error: 3.3489204965727515
best_error: 3.3489198154121045
best_error: 2.9618549142372164
best_error: 2.961854292633566
best_error: 2.727013668080067
best_error: 2.7270132055648055
best_error: 2.711156655788672
best_error: 2.711156202797711
best_error: 2.70128081767597
best_error: 2.7012803746846323
best_error: 2.6954150622210227
best_error: 2.6954146187481816
best_error: 2.691335404672735
best_error: 2.691334962787006
best_error: 2.6876827861391477
best_error: 2.6876823472816183
best_error: 2.6870917562676673
best_error: 2.6870917562672343
best_error: 2.6870915811687155
best_error: 2.686175227930362
best_error: 2.6861747894839887
best_error: 2.6860289151705117
best_error: 2.686028477770589
best_error: 2.6859215681499213
best_error: 2.685921130723365
best_error: 2.685867703636634
best_error: 2.685867266196701
best_error: 2.6858568458133307
best_error: 2.6858568458128764
best_error: 2.6858566707370564
best_error: 2.6858437637605808
best_error: 2.685843326314697
best_error: 2.6858421425589754
best_error: 2.6858417051126935
best_error: 2.6858410587071333
best_error: 2.6858406212605996
best_error: 2.6858403047048713
best_error: 2.685839867258137
best_error: 2.6858397438238804
best_error: 2.685839306377007
best_error: 2.6858392758181955
best_error: 2.685838838371206
best_error: 2.6858384396600847
best_error: 2.68583812923799
best_error: 2.684640832346048
best_error: 2.684640395023761
best_error: 2.680033019830689
best_error: 2.6800325839910117
best_error: 2.6633045345828172
best_error: 2.663304105159352
best_error: 2.640035380865614
best_error: 2.640035004400992
best_error: 2.580046466298091
best_error: 2.5800460731887362
best_error: 2.5367966260467396
best_error: 2.53679615810494
best_error: 2.5078703494563483
best_error: 2.5078699067418366
best_error: 2.4974490460945136
best_error: 2.497448605059178
best_error: 2.4854982599782813
best_error: 2.4854978172913604
best_error: 2.4784697722887525
best_error: 2.4784693219624403
best_error: 2.4752639946039645
best_error: 2.4752635429318435
best_error: 2.3865632017333964
best_error: 2.386562747644696
best_error: 2.357710206629087
best_error: 2.357709751085902
best_error: 2.3455644184261866
best_error: 2.3455639636234986
best_error: 2.345418572748883
best_error: 2.3454185727482306
best_error: 2.345418399752623
best_error: 2.345164789551087
best_error: 2.3451643347071442
best_error: 2.3449368533128414
best_error: 2.3449368533121717
best_error: 2.3449366803312244
best_error: 2.3246590895629082
best_error: 2.3246586520556742
best_error: 2.3193922047365767
best_error: 2.3193917805510287
best_error: 2.157195725645413
best_error: 2.1571952954645353
best_error: 1.9883484436439318
best_error: 1.988348013963656
best_error: 1.8084574379375742
best_error: 1.8084574379375098
best_error: 1.8084572667301693
best_error: 1.784879625912445
best_error: 1.7848791710095693
best_error: 1.7735013200922758
best_error: 1.773501320092207
best_error: 1.7735011463051165
best_error: 1.706186351900015
best_error: 1.706186351899968
best_error: 1.7061861799147966
best_error: 1.7049541864890907
best_error: 1.7049537345254537
best_error: 1.7015969128532429
best_error: 1.7015964557370968
best_error: 1.7013220729344138
best_error: 1.7013216157960627
best_error: 1.701257471699698
best_error: 1.7012574716996456
best_error: 1.7012572994410142
best_error: 1.7012495371267549
best_error: 1.701249079982531
best_error: 1.7012474877763117
best_error: 1.7012471761250512
best_error: 1.701247043923343
best_error: 1.701247043922843
best_error: 1.7011774620921076
best_error: 1.701177004938824
best_error: 1.7009361484034997
best_error: 1.7009356912197287
best_error: 1.7008179639571455
best_error: 1.7008175067443747
best_error: 1.70059058816077
best_error: 1.7005901308769356
best_error: 1.699609242140002
best_error: 1.699608783786053
best_error: 1.6996080941138825
best_error: 1.6996076357593102
best_error: 1.699603504250219
best_error: 1.699603045893137
best_error: 1.6995851806460314
best_error: 1.6995847222788356
best_error: 1.6995124889322455
best_error: 1.6995120305247093
best_error: 1.6992598009625193
best_error: 1.6992593423257363
