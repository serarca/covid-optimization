ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.306672701323022
best_error: 9.306672662500759
best_error: 8.351084476611502
best_error: 8.351084263149563
best_error: 5.780278183551581
best_error: 5.780278140577144
best_error: 4.258043359523205
best_error: 4.258042754917886
best_error: 3.591806002242511
best_error: 3.591805467846918
best_error: 3.5776662878642878
best_error: 3.577666284406943
best_error: 3.5421970942847074
best_error: 3.542197091190048
best_error: 3.539150398768048
best_error: 3.5391498607383403
best_error: 3.5389921334821413
best_error: 3.538992130359439
best_error: 3.5387992017116234
best_error: 3.538798663674439
best_error: 3.53736354709508
best_error: 3.53736300906517
best_error: 3.531629773888762
best_error: 3.5316292364395125
best_error: 3.5089418520330353
best_error: 3.508941319348752
best_error: 3.4199252000183096
best_error: 3.4199246704962833
best_error: 3.172851848551131
best_error: 3.1728514311872957
best_error: 3.1658365405409548
best_error: 3.165836229932722
best_error: 3.1249497912109074
best_error: 3.1249494158084925
best_error: 3.1232396879691993
best_error: 3.1232393547756745
best_error: 3.1171403124697474
best_error: 3.117139958517888
best_error: 3.114964949113734
best_error: 3.1149645961670935
best_error: 3.11030790393289
best_error: 3.110307562499845
best_error: 3.089222435740142
best_error: 3.089222097424706
best_error: 3.0229291944661085
best_error: 3.0229288449614726
best_error: 2.95891855682256
best_error: 2.958918161678322
best_error: 2.8993796797042495
best_error: 2.899379279959626
best_error: 2.756444038731218
best_error: 2.7564435446335445
best_error: 2.7499374710900124
best_error: 2.7499369865409573
best_error: 2.661605690284641
best_error: 2.6616052687305087
best_error: 2.6306189152961985
best_error: 2.6306184863677364
best_error: 2.6215833858865296
best_error: 2.6215829589738724
best_error: 2.616611221506557
best_error: 2.6166107949644632
best_error: 2.6138581071352585
best_error: 2.6138576801911655
best_error: 2.612128104866269
best_error: 2.612127677669708
best_error: 2.6113103281597168
best_error: 2.6113099008438883
best_error: 2.61072905593531
best_error: 2.610728628534708
best_error: 2.6105250909670237
best_error: 2.6105246635369723
best_error: 2.610478595754981
best_error: 2.6104781683182265
best_error: 2.610450817946123
best_error: 2.610450390505362
best_error: 2.6104373999909956
best_error: 2.6104369725482868
best_error: 2.6104281738183985
best_error: 2.6104277463743575
best_error: 2.6104241620880773
best_error: 2.610423734643471
best_error: 2.610423360139958
best_error: 2.6104233586317656
best_error: 2.610423292420484
best_error: 2.6104229807219688
best_error: 2.6104222143902334
best_error: 2.610422102271889
best_error: 2.610421959307679
best_error: 2.6104218915975332
best_error: 2.6104218699264017
best_error: 2.610421868418207
best_error: 2.610421857110769
best_error: 2.5984544410553125
best_error: 2.598454024655924
best_error: 2.5806584157340486
best_error: 2.580658035580943
best_error: 2.5798918613070496
best_error: 2.5798914848261534
best_error: 2.579626576213499
best_error: 2.579626208441441
best_error: 2.579417132338473
best_error: 2.5794167628198954
best_error: 2.5791436211267342
best_error: 2.579143245338229
best_error: 2.5786405488297928
best_error: 2.578640172848031
best_error: 2.576605223986471
best_error: 2.576604847910633
best_error: 2.568162268222215
best_error: 2.5681618929434555
best_error: 2.565577103680851
best_error: 2.5655767292701634
best_error: 2.5638807535135975
best_error: 2.56388037851252
best_error: 2.5602547766988715
best_error: 2.5602544022734537
best_error: 2.558678240007171
best_error: 2.5586778650454516
best_error: 2.5576050316244867
best_error: 2.5576046602463247
best_error: 2.5545093536383234
best_error: 2.554508988912177
best_error: 2.549501861309401
best_error: 2.5495015068309588
best_error: 2.547206729859766
best_error: 2.5472063758841723
best_error: 2.544630785074874
best_error: 2.5446304319831565
best_error: 2.541779079267635
best_error: 2.5417787254516773
best_error: 2.5415987736605503
best_error: 2.5415987734812315
best_error: 2.5415987637410664
best_error: 2.5415987072623283
best_error: 2.541338806496264
best_error: 2.541338452568236
best_error: 2.539442519404791
best_error: 2.5394421658967277
best_error: 2.539017591989947
best_error: 2.53901759181068
best_error: 2.5390175820729537
best_error: 2.539017525612614
best_error: 2.5389391539721133
best_error: 2.5389388019409944
best_error: 2.535989448635547
best_error: 2.535989101282551
best_error: 2.4592141345911562
best_error: 2.459214134475422
best_error: 2.459214124671065
best_error: 2.45921406860406
best_error: 2.403928460805564
best_error: 2.40392846069492
best_error: 2.4039284509170935
best_error: 2.403928395323814
best_error: 2.329629471664571
best_error: 2.3296291538000444
best_error: 2.3014330362293043
best_error: 2.301432716900339
best_error: 2.2536350331458483
best_error: 2.2536347130340353
best_error: 2.2520197335777903
best_error: 2.25201973336799
best_error: 2.2520197238290596
best_error: 2.2520196691664607
best_error: 2.228913756750499
best_error: 2.2289134127078416
best_error: 2.2106118295127772
best_error: 2.2106114703931756
best_error: 2.1832238539824886
best_error: 2.1832234889306124
best_error: 2.1744806735677216
best_error: 2.174480298796575
best_error: 2.1684362421989514
best_error: 2.168435867794715
best_error: 2.1680314402289707
best_error: 2.168031064498475
best_error: 2.167833546600276
best_error: 2.167833170847703
best_error: 2.167777245626864
best_error: 2.167776869869751
best_error: 2.1677629074009435
best_error: 2.1677625316426727
best_error: 2.1677537805143796
best_error: 2.1677534047553704
best_error: 2.167753140546225
best_error: 2.167753076256081
best_error: 2.167753030625233
best_error: 2.1677530298533387
best_error: 2.1677530214098275
best_error: 2.167753004557945
best_error: 2.1677529995633513
best_error: 2.1677529987760256
best_error: 2.1677529872622276
best_error: 2.1677529779172087
best_error: 2.1677529771298865
best_error: 2.16775297181396
