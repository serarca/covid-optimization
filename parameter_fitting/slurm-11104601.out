ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 78
days_switch 90
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 108.85983554047382
best_error: 108.85983539089652
best_error: 108.8598353689675
best_error: 18.74484928867379
best_error: 18.744849288669513
best_error: 18.74484928096809
best_error: 18.73948608538837
best_error: 18.73948607753786
best_error: 18.716988247410903
best_error: 18.716988238935244
best_error: 18.605873908840252
best_error: 18.60587389685263
best_error: 16.571782021996928
best_error: 16.571781874570263
best_error: 16.09213845931622
best_error: 16.09213830235663
best_error: 15.658923650338718
best_error: 15.65892351030474
best_error: 15.369024448146916
best_error: 15.36902429713182
best_error: 15.08627513314404
best_error: 15.086274990679609
best_error: 13.95899090149711
best_error: 13.958990735582443
best_error: 13.605400798169725
best_error: 13.6054007189155
best_error: 13.510943232423315
best_error: 13.510943182486097
best_error: 13.406691859985553
best_error: 13.406691835269804
best_error: 13.337602349994764
best_error: 13.337602335779113
best_error: 13.337602334212743
best_error: 13.045648416092007
best_error: 13.045648394724806
best_error: 12.61163983102352
best_error: 12.611639814712555
best_error: 12.275334517160793
best_error: 12.275334183736582
best_error: 12.04488700951067
best_error: 12.044887002569773
best_error: 12.044886998284516
best_error: 12.020809050442109
best_error: 12.020809045220076
best_error: 12.02080903980536
best_error: 12.019719382414477
best_error: 12.019719155943186
best_error: 12.019039112581519
best_error: 12.019039107892134
best_error: 12.01903910207607
best_error: 12.01717591421154
best_error: 12.01717591003035
best_error: 12.01717590383475
best_error: 12.016733652900612
best_error: 12.016733648722656
best_error: 12.016733642531884
best_error: 12.016691013888522
best_error: 12.016690793212987
best_error: 12.016659247232543
best_error: 12.016659243087318
best_error: 12.01665923687265
best_error: 12.016603996665399
best_error: 12.016603993007179
best_error: 12.016603986388724
best_error: 12.016582156660244
best_error: 12.016582153496255
best_error: 12.016582146465977
best_error: 12.002979294444913
best_error: 12.002979294444799
best_error: 12.002979278322403
best_error: 11.991004902608914
best_error: 11.991004902608777
best_error: 11.991004885587145
best_error: 11.967020098933494
best_error: 11.967020026429092
best_error: 11.931522941630911
best_error: 11.931522882203579
best_error: 11.814517539075101
best_error: 11.814517535695652
best_error: 11.81451752927468
best_error: 11.693455087654065
best_error: 11.693455076291771
best_error: 11.677633497931344
best_error: 11.6776334784634
best_error: 11.672988377587384
best_error: 11.67298835818605
best_error: 11.635209387297756
best_error: 11.635209330089522
best_error: 11.573146725073762
best_error: 11.573146669767365
best_error: 11.53512821423086
best_error: 11.53512820032908
best_error: 11.504320750756127
best_error: 11.504320732676945
best_error: 11.393076940301228
best_error: 11.393076935032266
best_error: 11.393076934871663
best_error: 11.393076934402728
best_error: 11.378333576469558
best_error: 11.378333568539954
best_error: 11.374871899473353
best_error: 11.374871853246937
best_error: 11.374871852910445
best_error: 11.348202365273847
best_error: 11.348202319441665
best_error: 11.348202319001167
best_error: 11.33230732825398
best_error: 11.332307282818581
best_error: 11.332307282378121
best_error: 11.293049783482946
best_error: 11.293049781083026
best_error: 11.293049777660574
best_error: 11.212680023650016
best_error: 11.2126800149073
best_error: 11.212510600416966
best_error: 11.212510589901692
best_error: 11.168539552914838
best_error: 11.168539544654493
best_error: 11.137503725457773
best_error: 11.137503719081032
best_error: 11.028844353227017
best_error: 11.028844306972015
best_error: 10.863276763117668
best_error: 10.863276712146732
best_error: 10.837384070183079
best_error: 10.837384002647063
best_error: 10.834931744046036
best_error: 10.834931743787973
best_error: 10.834931712296818
best_error: 10.822135586210596
best_error: 10.822135584808308
best_error: 10.822135565051758
best_error: 10.754594319101173
best_error: 10.754594271522656
best_error: 10.754594267442503
best_error: 10.712035722078586
best_error: 10.71203571574099
best_error: 10.699703589427036
best_error: 10.699703582424075
best_error: 10.699055185709057
best_error: 10.699055157360206
best_error: 10.699055151992626
best_error: 10.695536646975924
best_error: 10.695536637958838
best_error: 10.695536637443405
best_error: 10.680797428076914
best_error: 10.680797415472025
best_error: 10.68079741285539
best_error: 10.675639194199018
best_error: 10.675639191958735
best_error: 10.675639190127471
best_error: 10.674905659749284
best_error: 10.6749056469636
best_error: 10.674167885398653
best_error: 10.67416788067861
best_error: 10.67400403513135
best_error: 10.674004035131333
best_error: 10.674004035131047
best_error: 10.674004031071004
best_error: 10.673833782956581
best_error: 10.673833782956562
best_error: 10.673833782956251
best_error: 10.673833778889993
best_error: 10.67337588103523
best_error: 10.673375869945378
best_error: 10.672793759615821
best_error: 10.672793730285042
best_error: 10.671292907312038
best_error: 10.671292865578131
best_error: 10.665699096923714
best_error: 10.665699039652516
best_error: 10.665694143005608
best_error: 10.665693671823556
best_error: 10.665444594024162
best_error: 10.665444214128094
