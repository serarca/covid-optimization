ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 90
days_switch 10
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 98.75152267886813
best_error: 98.75152251403048
best_error: 98.7515224573662
best_error: 15.040710352630624
best_error: 15.040710352617301
best_error: 15.04071032950694
best_error: 15.007641649335008
best_error: 15.007641642576958
best_error: 15.007641640583898
best_error: 14.969777642156442
best_error: 14.9697776352034
best_error: 14.969777633234981
best_error: 14.809645092376071
best_error: 14.80964509236403
best_error: 14.809645092363446
best_error: 14.809645082712809
best_error: 14.41189610716714
best_error: 14.411896084784612
best_error: 14.027481578747278
best_error: 14.02748156592341
best_error: 13.982754274916497
best_error: 13.982754270433299
best_error: 13.982754269528073
best_error: 13.961555802998847
best_error: 13.961555792468298
best_error: 13.95420956795068
best_error: 13.954209562755882
best_error: 13.949593822824088
best_error: 13.949593820117077
best_error: 13.949141772209053
best_error: 13.949141769492106
best_error: 13.94904590242951
best_error: 13.949045902277918
best_error: 13.949014683520188
best_error: 13.949014680794585
best_error: 13.949014258016076
best_error: 13.949014255290427
best_error: 13.94901422816103
best_error: 13.949014228006751
best_error: 13.949014227515544
best_error: 13.947671221048033
best_error: 13.947671220888864
best_error: 13.946627900003591
best_error: 13.94662789983978
best_error: 13.942464660121459
best_error: 13.942464659936501
best_error: 13.924904906231884
best_error: 13.924904906198394
best_error: 13.924904905934444
best_error: 13.893403927823512
best_error: 13.893403927804735
best_error: 13.893403927438314
best_error: 13.893403927193773
best_error: 13.886391007993431
best_error: 13.886391007058036
best_error: 13.886391004864693
best_error: 13.870528087691975
best_error: 13.870528087334385
best_error: 13.870528086863295
best_error: 13.852179958177649
best_error: 13.852179957624754
best_error: 13.85217995609305
best_error: 13.850297133768189
best_error: 13.85029713100968
best_error: 13.850297125928606
best_error: 13.846279930022389
best_error: 13.84627992876235
best_error: 13.846279923280349
best_error: 13.845217347822958
best_error: 13.845217345274468
best_error: 13.845217340503632
best_error: 13.844579132270093
best_error: 13.844579130784126
best_error: 13.844579127694695
best_error: 13.816068497663386
best_error: 13.816068496196866
best_error: 13.816068493499891
best_error: 13.65384162021929
best_error: 13.653841617437124
best_error: 13.653841615491658
best_error: 13.653841614809211
best_error: 12.847470503536783
best_error: 12.847470497470184
best_error: 12.847470401790606
best_error: 12.61309339581289
best_error: 12.61309320201884
best_error: 12.374643758830292
best_error: 12.374643753501541
best_error: 12.37464368652801
best_error: 12.36427463744048
best_error: 12.364274637378122
best_error: 12.364274599402147
best_error: 12.364274566146094
best_error: 12.249531974932854
best_error: 12.249531971817207
best_error: 12.249531948528867
best_error: 12.249531943154956
best_error: 12.249531896951956
best_error: 11.82620388897846
best_error: 11.82620374237275
best_error: 9.946077827000614
best_error: 9.946077666991133
best_error: 9.746392375196418
best_error: 9.74639231319486
best_error: 9.472609557531399
best_error: 9.472609549040712
best_error: 9.472609528721595
best_error: 8.905435755705529
best_error: 8.90543574762677
best_error: 8.905435466405493
best_error: 8.704405756813589
best_error: 8.704405755954559
best_error: 8.704405592763013
best_error: 8.664112077025734
best_error: 8.664112010200014
best_error: 8.476410879393441
best_error: 8.476410797856978
best_error: 8.34933058225202
best_error: 8.349330579009003
best_error: 8.349330575501025
best_error: 8.267488487089302
best_error: 8.267488487074766
best_error: 8.267488483882484
best_error: 8.26748847797094
best_error: 8.14158822122807
best_error: 8.141588066492114
best_error: 8.123564758572439
best_error: 8.1235647575214
best_error: 8.123564755430184
best_error: 8.12356475217122
best_error: 8.111054006171857
best_error: 8.111054003605382
best_error: 8.111054003074717
best_error: 8.111054001360827
best_error: 8.105524270850921
best_error: 8.105524264449379
best_error: 8.069702103334626
best_error: 8.069702093162787
best_error: 8.058919265185606
best_error: 8.05891926385939
best_error: 8.058919261857445
best_error: 8.058919261843393
best_error: 8.058919260748477
best_error: 8.040306817892294
best_error: 8.040306816515281
best_error: 8.040306814143792
best_error: 8.040306813634743
best_error: 8.036148795702234
best_error: 8.036148794323866
best_error: 8.036148791842368
best_error: 8.036148791382292
best_error: 8.035913721392696
best_error: 8.03591368787347
best_error: 8.035680802087176
best_error: 8.035680800716019
best_error: 8.035680798220156
best_error: 8.035680797761465
best_error: 8.035671301148968
best_error: 8.035671299779365
best_error: 8.035671297280922
best_error: 8.035671296823521
best_error: 8.035662218792304
best_error: 8.035662217424171
best_error: 8.03566221492328
best_error: 8.03566221446709
best_error: 8.035662105757678
best_error: 8.035662104389566
best_error: 8.035662101888647
best_error: 8.035662101432491
best_error: 8.035662015395078
best_error: 8.03566201402699
best_error: 8.035662011526043
best_error: 8.035662011069885
best_error: 8.035661933274943
best_error: 8.035661931906871
best_error: 8.035661929405899
best_error: 8.035661928949741
best_error: 8.035661759630624
best_error: 8.03566175826257
best_error: 8.035661755761563
best_error: 8.035661755305435
best_error: 8.035661644756177
best_error: 8.035661643388138
best_error: 8.0356616408871
best_error: 8.035661640430996
best_error: 8.035661535653155
best_error: 8.035661534285131
best_error: 8.035661531784065
best_error: 8.03566153132796
best_error: 8.035661478598005
best_error: 8.035661477230008
best_error: 8.035661474728917
best_error: 8.035661474272834
best_error: 8.035661439724318
best_error: 8.035661438356309
best_error: 8.035661435855229
best_error: 8.035661435399142
best_error: 8.035661403013428
best_error: 8.035661401645429
best_error: 8.035661399144328
best_error: 8.035661398688248
best_error: 8.035661381879681
best_error: 8.03566138051168
best_error: 8.03566137801057
best_error: 8.035661377554494
best_error: 8.035661365743868
best_error: 8.03566136437587
best_error: 8.035661361874745
best_error: 8.035661361418684
best_error: 8.035661351515087
best_error: 8.035661350147102
best_error: 8.035661347645991
best_error: 8.035661347189903
best_error: 8.035661338973554
best_error: 8.035661337605571
best_error: 8.035661335104447
best_error: 8.035661334648374
best_error: 8.030189877541394
best_error: 8.030189876845588
best_error: 8.03018987418886
best_error: 8.030189874023693
best_error: 8.030189873781065
best_error: 8.027833023072265
best_error: 8.02783301070834
best_error: 8.027640752435673
best_error: 8.027640749710862
best_error: 8.027640748944584
best_error: 8.02579524183313
best_error: 8.025795239070314
best_error: 8.025795238292062
best_error: 8.019135821455565
best_error: 8.019135821284486
best_error: 8.019135818649815
best_error: 8.019135817705383
best_error: 8.009527190885073
best_error: 8.009527190658558
best_error: 8.009527188266688
best_error: 8.009527186638019
best_error: 8.009527186495578
best_error: 8.004318328977874
best_error: 8.00431832882651
best_error: 8.004318326471646
best_error: 8.00431832446934
best_error: 8.004318324413184
best_error: 8.001941191269438
best_error: 8.00194119111416
best_error: 8.001941188797353
best_error: 8.00194118665246
best_error: 8.001510791676083
best_error: 8.00151079153988
best_error: 8.001510789222742
best_error: 8.00151078703782
best_error: 8.001508440121308
best_error: 8.001508439985223
best_error: 8.001508437668031
best_error: 8.001508435482922
best_error: 8.001507513318286
best_error: 8.00150751318222
best_error: 8.001507510865054
best_error: 8.001507508679854
best_error: 7.994962584498521
best_error: 7.994962550634619
best_error: 7.860941984276324
best_error: 7.860941951087017
best_error: 7.6645698260005775
best_error: 7.664569771175422
best_error: 7.664569700823961
best_error: 7.625388710100561
best_error: 7.625388692193727
best_error: 7.525428475226366
best_error: 7.525428461684153
best_error: 7.506861665717644
best_error: 7.506861655279913
best_error: 7.48837038981166
best_error: 7.48837038323969
best_error: 7.488370380870655
