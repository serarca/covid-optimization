ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.99165163371722
best_error: 11.991651599090124
best_error: 11.99165157401158
best_error: 11.798256614151896
best_error: 11.798256569253786
best_error: 11.798256540913295
best_error: 10.645584638891728
best_error: 10.645584524382464
best_error: 10.645584495531484
best_error: 9.487075484573666
best_error: 9.487075311338671
best_error: 9.071038763123788
best_error: 9.071038590496906
best_error: 9.03334580803507
best_error: 9.033345635405524
best_error: 8.083853798943167
best_error: 8.083853678033947
best_error: 7.880939137665887
best_error: 7.880939024361365
best_error: 7.8809390236468495
best_error: 7.6856759321214625
best_error: 7.685675826089188
best_error: 7.685675810051505
best_error: 7.523529900345744
best_error: 7.523529808431928
best_error: 7.52352976845246
best_error: 7.125381701157297
best_error: 7.125381619042337
best_error: 7.125381562081312
best_error: 6.883923917166516
best_error: 6.8839238331198285
best_error: 6.883923774276119
best_error: 6.867109016714253
best_error: 6.867108931239532
best_error: 6.867108873650915
best_error: 6.864214785725873
best_error: 6.864214556746603
best_error: 5.33146888939307
best_error: 5.3314684964563295
best_error: 5.116175096011485
best_error: 5.116174358382397
best_error: 4.440186957257554
best_error: 4.440186266854453
best_error: 4.040111771371098
best_error: 4.040111143580178
best_error: 3.9910218965264916
best_error: 3.991021263129742
best_error: 3.9771901074508573
best_error: 3.977190010564607
best_error: 3.9742556646103084
best_error: 3.974255029848269
best_error: 3.735738697185644
best_error: 3.7357382729536375
best_error: 3.6996090011457414
best_error: 3.699608463974851
best_error: 3.673920628394641
best_error: 3.6739201577947256
best_error: 3.632276504969453
best_error: 3.632276032766741
best_error: 3.415645883948947
best_error: 3.4156454285798814
best_error: 3.236304168727386
best_error: 3.2363037708479947
best_error: 3.2136419282967146
best_error: 3.2136415161624585
best_error: 3.1824324485380844
best_error: 3.1824320462296383
best_error: 2.9567418999110755
best_error: 2.9567414476697413
best_error: 2.9445072665286647
best_error: 2.9445072665279555
best_error: 2.944507095364987
best_error: 2.9255928083630076
best_error: 2.925592351635422
best_error: 2.9118991722985315
best_error: 2.91189917229781
best_error: 2.91189900265156
best_error: 2.9104031736157316
best_error: 2.9104027158514514
best_error: 2.9099361207622794
best_error: 2.9099356629403523
best_error: 2.9098609631242187
best_error: 2.9098605052695894
best_error: 2.909834936080026
best_error: 2.9098344782221885
best_error: 2.909829583621386
best_error: 2.909829583620694
best_error: 2.9098294140598737
best_error: 2.9098280311910276
best_error: 2.9098275733330237
best_error: 2.888150900260502
best_error: 2.888150900259787
best_error: 2.888150729977286
best_error: 2.8875674391302466
best_error: 2.8875669619615785
best_error: 2.848885387414783
best_error: 2.8488853874140374
best_error: 2.8488852162265887
best_error: 2.844655449735032
best_error: 2.844654965183106
best_error: 2.769267062871375
best_error: 2.7692670628705836
best_error: 2.7692668907007754
best_error: 2.7402488307431483
best_error: 2.740248359686607
best_error: 2.684040177943759
best_error: 2.6840401779428724
best_error: 2.6840400071622383
best_error: 2.5938571693655437
best_error: 2.5938567861061843
best_error: 2.587229448501191
best_error: 2.5872290649653085
best_error: 2.585894913260626
best_error: 2.585894529579734
best_error: 2.5856986696907294
best_error: 2.585698285988513
best_error: 2.5855783310911207
best_error: 2.585577947375825
best_error: 2.585535691136635
best_error: 2.5855356911357323
best_error: 2.585532677045141
best_error: 2.585532293324758
best_error: 2.585532247690634
best_error: 2.5855322000262904
best_error: 2.585532111212551
best_error: 2.585532106111372
best_error: 2.585532063475652
best_error: 2.5855320634747754
best_error: 2.5855319155999146
best_error: 2.5855316702243982
best_error: 2.585531396393297
best_error: 2.585531396392436
best_error: 2.5841282566679045
best_error: 2.584127872323436
best_error: 2.5819882011912374
best_error: 2.5819878165132035
best_error: 2.581940930740963
best_error: 2.581940930740116
best_error: 2.5819407628293165
best_error: 2.5474236819796303
best_error: 2.547423271923744
best_error: 2.5318401173217957
best_error: 2.531839696951468
best_error: 2.3683425826648143
best_error: 2.3683425826639044
best_error: 2.368342414333964
best_error: 2.3247903685688147
best_error: 2.324790368567993
best_error: 2.321723035035772
best_error: 2.321722652470495
best_error: 2.269930474314907
best_error: 2.2699300493983614
best_error: 2.225068736157544
best_error: 2.225068307280866
best_error: 2.224851184269922
best_error: 2.224850756535348
best_error: 2.2247627574780733
best_error: 2.2247623297353827
best_error: 2.224746273359819
best_error: 2.224745845615615
best_error: 2.2247402907440197
best_error: 2.2247398629992743
best_error: 2.2247397158536275
best_error: 2.1785637457374305
best_error: 2.1785637457365854
best_error: 2.1785635788342583
best_error: 2.172509180336071
best_error: 2.1725087429371763
best_error: 2.159435082485864
best_error: 2.1594346334484538
best_error: 2.155687861993849
best_error: 2.15568786199293
best_error: 2.1556876945360273
best_error: 2.1477851523350635
best_error: 2.1477851523341953
best_error: 2.147784985034418
