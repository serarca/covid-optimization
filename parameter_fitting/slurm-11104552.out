ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 76
days_switch 0
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 100.04694284806457
best_error: 100.04694277140494
best_error: 100.04694267246227
best_error: 19.222934511423702
best_error: 19.222934511420263
best_error: 19.222934507104927
best_error: 19.212526173694208
best_error: 19.21252616921719
best_error: 19.167630153495317
best_error: 19.167630148093465
best_error: 18.84492257815166
best_error: 18.844922554044373
best_error: 18.814961031190258
best_error: 18.81496100428953
best_error: 18.779658250781395
best_error: 18.779658220439266
best_error: 17.46562882291264
best_error: 17.465628630716648
best_error: 13.757894166765869
best_error: 13.757893945971365
best_error: 13.377756547239507
best_error: 13.377756359984556
best_error: 13.158235930038105
best_error: 13.158235926734923
best_error: 13.158235925751235
best_error: 13.158235201444642
best_error: 13.089900313302625
best_error: 13.08990027911304
best_error: 12.998095007427132
best_error: 12.998094972334517
best_error: 12.736137501030374
best_error: 12.736137495455251
best_error: 12.73613748785215
best_error: 12.271104678220356
best_error: 12.271104654727957
best_error: 11.935376689199193
best_error: 11.935376672957572
best_error: 11.569738427023644
best_error: 11.569738415574822
best_error: 11.294107919822569
best_error: 11.294107908344877
best_error: 11.038537447605025
best_error: 11.038537445226938
best_error: 11.038537444210563
best_error: 11.038537443806216
best_error: 10.946286454305154
best_error: 10.946286447317991
best_error: 10.887241146169426
best_error: 10.88724111270081
best_error: 10.676683045578812
best_error: 10.676683017677448
best_error: 10.671386287847994
best_error: 10.671386205933054
best_error: 10.626247278812347
best_error: 10.626247214103504
best_error: 10.58614210767137
best_error: 10.586142056896382
best_error: 10.581243903975702
best_error: 10.581243879755103
best_error: 10.5648032015296
best_error: 10.564803145565412
best_error: 10.554124991501212
best_error: 10.554124968753516
best_error: 10.551361659435415
best_error: 10.551361636743161
best_error: 10.540600717505974
best_error: 10.540600695378952
best_error: 10.52955388917843
best_error: 10.529553822200425
best_error: 10.519211765187183
best_error: 10.519211703412505
best_error: 10.518298124037955
best_error: 10.518298065286366
best_error: 10.518148418892858
best_error: 10.51814839666351
best_error: 10.518038988826484
best_error: 10.518038930105181
best_error: 10.51598770194002
best_error: 10.515987679732817
best_error: 10.512322447022562
best_error: 10.512322424836295
best_error: 10.483319699159892
best_error: 10.48331967394797
best_error: 10.477093420922149
best_error: 10.477093395245898
best_error: 10.46662798164358
best_error: 10.466627956211877
best_error: 10.459688917700774
best_error: 10.459688892829405
best_error: 10.440380786955462
best_error: 10.440380763428387
best_error: 10.420778360167771
best_error: 10.420778341294294
best_error: 10.413227698957083
best_error: 10.413227679839935
best_error: 10.357667802270791
best_error: 10.357667784026637
best_error: 10.342800417500975
best_error: 10.342800414981562
best_error: 10.29566901173344
best_error: 10.295668991143367
best_error: 10.28993736077092
best_error: 10.289937336856621
best_error: 10.18917772560481
best_error: 10.189177723740025
best_error: 10.18917768506983
best_error: 10.16181190266154
best_error: 10.161811901828363
best_error: 10.161811880115492
best_error: 10.154990750069778
best_error: 10.154990750055553
best_error: 10.154990740602477
best_error: 10.154460500449252
best_error: 10.154460500441678
best_error: 10.154460491151736
best_error: 10.15406829763741
best_error: 10.154068297636773
best_error: 10.15406828856055
best_error: 10.15388380759411
best_error: 10.153883807592555
best_error: 10.153883798513352
best_error: 10.153739551927004
best_error: 10.153739543132723
best_error: 10.153725443594823
best_error: 10.153725441101844
best_error: 10.017258258890475
best_error: 10.017258258441695
best_error: 10.017258256095891
best_error: 9.949483093306903
best_error: 9.949483088861907
best_error: 9.895871679815018
best_error: 9.895871673608692
best_error: 9.761853724905148
best_error: 9.76185371867015
best_error: 9.761853709272149
best_error: 9.690950265641117
best_error: 9.69095026491955
best_error: 9.690950259997534
best_error: 9.67530729166902
best_error: 9.675307286369092
best_error: 9.669132122883596
best_error: 9.669132121332467
best_error: 9.669132118048955
best_error: 9.668640048918881
best_error: 9.66864004724756
best_error: 9.668640044088512
best_error: 9.668429038045538
best_error: 9.668429036322706
best_error: 9.668429033216999
best_error: 9.668415667828494
best_error: 9.668415666102403
best_error: 9.668415663000074
best_error: 9.667046151857946
best_error: 9.667046140774966
best_error: 9.667045874061497
best_error: 9.663806604631862
best_error: 9.663806599760466
best_error: 9.663799538302898
best_error: 9.663799533429897
best_error: 9.663793316079389
best_error: 9.663793316079387
best_error: 9.663793311207927
best_error: 9.663761908475395
best_error: 9.663761903596443
best_error: 9.663756508763662
best_error: 9.663756503883395
best_error: 9.663734362799833
best_error: 9.663734362799831
best_error: 9.663734357914166
best_error: 9.663699703028453
best_error: 9.66369970302845
best_error: 9.663699698134199
best_error: 9.663696530989615
best_error: 9.663696526094565
best_error: 9.663696508731324
best_error: 9.663696508731322
best_error: 9.663696503836265
best_error: 9.663696492009832
best_error: 9.663696487114766
best_error: 9.663696477926948
best_error: 9.663696473031882
best_error: 9.663696461778091
best_error: 9.663696456883034
best_error: 9.66369643356462
best_error: 9.663696428669544
best_error: 9.663696414150799
best_error: 9.663696409255726
best_error: 9.66369640037491
best_error: 9.663696395479827
best_error: 9.663696386994612
best_error: 9.66369638209952
best_error: 9.663696378219598
best_error: 9.663696373324507
best_error: 9.663696369846583
best_error: 9.66369636495149
best_error: 9.663696356408249
best_error: 9.663696356408247
best_error: 9.663696351513154
best_error: 9.663696302289162
best_error: 9.663696297394054
best_error: 9.663696230866588
best_error: 9.66369622597146
best_error: 9.663696224713034
best_error: 9.663696220117032
best_error: 9.663696219796499
best_error: 9.663696219796497
best_error: 9.66369621490137
