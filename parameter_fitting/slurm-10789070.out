ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.96118594512704
best_error: 10.96118594374851
best_error: 10.775464280676818
best_error: 10.775464274120537
best_error: 10.055357524606109
best_error: 10.055357467474494
best_error: 5.266154457824488
best_error: 5.266153974478918
best_error: 3.8878252055916507
best_error: 3.887824818283357
best_error: 3.883562934692114
best_error: 3.883562547105163
best_error: 3.6215662438611123
best_error: 3.6215661580457903
best_error: 3.5434014252916812
best_error: 3.5434010974879584
best_error: 3.542779428191003
best_error: 3.542779344115713
best_error: 3.5426752461434656
best_error: 3.5426751620665553
best_error: 3.542213717589804
best_error: 3.5422133897865082
best_error: 3.539384595084168
best_error: 3.5393842673731886
best_error: 3.528316879378303
best_error: 3.5283165552275264
best_error: 3.4878959165646846
best_error: 3.4878956020264207
best_error: 3.413623314294415
best_error: 3.4136230762477684
best_error: 3.404825944307986
best_error: 3.4048256907213292
best_error: 3.401534271812465
best_error: 3.4015340135485914
best_error: 3.3896656039235107
best_error: 3.3896653368325396
best_error: 3.323663874173669
best_error: 3.3236635561294916
best_error: 3.2980867197120873
best_error: 3.2980863917850582
best_error: 3.2857786951251535
best_error: 3.285778360944281
best_error: 3.2812568191591795
best_error: 3.281256775381524
best_error: 3.2072993036692865
best_error: 3.207298959232627
best_error: 3.1744065007847135
best_error: 3.1744061404779638
best_error: 3.172945366566176
best_error: 3.172945005710746
best_error: 3.1671539747534663
best_error: 3.16715361249617
best_error: 3.1535016608467807
best_error: 3.1535016495874553
best_error: 3.1535016208054367
best_error: 3.149434661810937
best_error: 3.149434297140913
best_error: 3.147394304477947
best_error: 3.1473939394200205
best_error: 3.1469501873695496
best_error: 3.1469498222272367
best_error: 3.14689508963107
best_error: 3.1468947244618866
best_error: 3.146849503473706
best_error: 3.1468491382823
best_error: 3.146799678777887
best_error: 3.146799313562167
best_error: 3.1467260627777507
best_error: 3.1467256975260955
best_error: 3.146650397793324
best_error: 3.146650032504702
best_error: 3.1465998040747807
best_error: 3.1465994387614495
best_error: 3.14658521318551
best_error: 3.146585202210467
best_error: 3.14658517321498
best_error: 3.146579994986724
best_error: 3.1465796296711632
best_error: 3.146578523084122
best_error: 3.146578512109265
best_error: 3.146578483113654
best_error: 3.083788037782033
best_error: 3.083787765128352
best_error: 3.061653233652365
best_error: 3.061652948979809
best_error: 3.0502975012442644
best_error: 3.0502972115688283
best_error: 3.041825123341792
best_error: 3.0418248475491523
best_error: 3.026036060593488
best_error: 3.0260358116780885
best_error: 3.021733101892922
best_error: 3.021732856177846
best_error: 3.0203120152333707
best_error: 3.0203117691943158
best_error: 3.0191710848011897
best_error: 3.0191708385018083
best_error: 3.0182039056050343
best_error: 3.018203659084828
best_error: 3.0174495138083155
best_error: 3.0174492671150945
best_error: 3.0170129292795114
best_error: 3.0170126824857535
best_error: 3.0169788804792574
best_error: 3.0169788659343486
best_error: 3.01697886439215
best_error: 3.0169788439617173
best_error: 3.0167936206608372
best_error: 3.016793373802095
best_error: 3.0006142117263854
best_error: 3.000613951985734
best_error: 2.9822256923502115
best_error: 2.9822254201483127
best_error: 2.9806398410933275
best_error: 2.9806395740015525
best_error: 2.979769019789931
best_error: 2.9797687522810605
best_error: 2.9794036322578767
best_error: 2.9794033706501297
best_error: 2.979254832178705
best_error: 2.9792545688184444
best_error: 2.979148512659836
best_error: 2.979148254828587
best_error: 2.978784376508492
best_error: 2.9787841130258066
best_error: 2.978589708508239
best_error: 2.978589446712825
best_error: 2.9781882222196048
best_error: 2.9781879598895813
best_error: 2.9537285828461384
best_error: 2.9537283294528454
best_error: 2.9533019961605644
best_error: 2.9533019924641004
best_error: 2.9533019785875103
best_error: 2.9533019625355474
best_error: 2.9530990740263907
best_error: 2.953098821018561
best_error: 2.953046129525201
best_error: 2.9530458765121166
best_error: 2.95303440387004
best_error: 2.9530341508557827
best_error: 2.9530339231013625
best_error: 2.9530336700870907
best_error: 2.9530336174386957
best_error: 2.9530336148921528
best_error: 2.9530335617587755
best_error: 2.9527973985812377
best_error: 2.952797396014405
best_error: 2.9527971500142947
best_error: 2.952779982197048
best_error: 2.9527799787675444
best_error: 2.952779734899289
best_error: 2.952768720711444
best_error: 2.952768717285413
best_error: 2.952768473411545
best_error: 2.952760778442756
best_error: 2.9527607750191827
best_error: 2.9527605311413536
best_error: 2.9527547618063283
best_error: 2.952754758384592
best_error: 2.9527545145037815
best_error: 2.9527494864953465
best_error: 2.9527494830752623
best_error: 2.9527492391918018
best_error: 2.9527436416486372
best_error: 2.952743638230346
best_error: 2.952743394343985
best_error: 2.952736498850539
best_error: 2.9527364954344466
best_error: 2.95273625154453
best_error: 2.952735364998162
best_error: 2.9527353612872886
best_error: 2.9527353472494173
best_error: 2.9527353314420264
best_error: 2.9527351799371466
best_error: 2.9527303755694123
best_error: 2.952730372155216
best_error: 2.952730128262237
best_error: 2.9527294623282803
best_error: 2.952729458914445
best_error: 2.9527292150207956
best_error: 2.9527288942447782
best_error: 2.9527288908311777
best_error: 2.9527286469370946
best_error: 2.9527285441379387
best_error: 2.9527285407245034
best_error: 2.9527284717090323
best_error: 2.952728468295631
best_error: 2.9527284677849313
