ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.745680096721422
best_error: 10.745680090485973
best_error: 10.520520652496893
best_error: 10.52051948948275
best_error: 10.044369181996114
best_error: 10.04436909792898
best_error: 6.0975367783008
best_error: 6.097536366600127
best_error: 5.591199581891994
best_error: 5.591199486315867
best_error: 5.573135843779374
best_error: 5.57313584185576
best_error: 5.573135837683709
best_error: 5.570995198564244
best_error: 5.570995198564203
best_error: 5.570995192513884
best_error: 5.5663966289619715
best_error: 5.566396628961932
best_error: 5.566396623798712
best_error: 5.187705932447202
best_error: 5.187705919369599
best_error: 5.187705631516679
best_error: 5.127826976839335
best_error: 5.127826976839293
best_error: 5.127826943978806
best_error: 5.12183895961698
best_error: 5.121838959616936
best_error: 5.121838923894737
best_error: 5.12066295077386
best_error: 5.120662945224257
best_error: 5.120662909915212
best_error: 5.12062572604106
best_error: 5.120625719667227
best_error: 5.120625684958013
best_error: 5.120611132424499
best_error: 5.120611125544823
best_error: 5.120611091198123
best_error: 5.1206015866293875
best_error: 5.120601579258098
best_error: 5.120601545269751
best_error: 5.120596469340219
best_error: 5.120596461751092
best_error: 5.120596427921513
best_error: 5.1205934653173895
best_error: 5.1205934576442385
best_error: 5.120593423878363
best_error: 5.120581744269492
best_error: 5.120581735733798
best_error: 5.12058170260588
best_error: 5.120581631941264
best_error: 5.120581623319925
best_error: 5.120581590259075
best_error: 5.120581579319979
best_error: 5.120581570698469
best_error: 5.120581537637953
best_error: 5.120581508670918
best_error: 5.1205815000491866
best_error: 5.120581466989113
best_error: 5.120581208676574
best_error: 5.120581199823027
best_error: 5.120581166930266
best_error: 5.120464060502754
best_error: 5.120464030039371
best_error: 5.120464013756724
best_error: 5.1090121039204845
best_error: 5.109012074205633
best_error: 5.109012056312746
best_error: 5.060457684504907
best_error: 5.060457659463385
best_error: 5.06045763380158
best_error: 4.83181181704992
best_error: 4.83181181704987
best_error: 4.831811768530589
best_error: 4.635437313953472
best_error: 4.63543731395342
best_error: 4.557397632836146
best_error: 4.557397409278946
best_error: 4.453672892306013
best_error: 4.453672779220214
best_error: 4.4348042773722955
best_error: 4.434804269715623
best_error: 4.4348042583379295
best_error: 4.431375693652968
best_error: 4.431375693652937
best_error: 4.431375692325876
best_error: 4.431110105974597
best_error: 4.431110105974559
best_error: 4.4311101046374
best_error: 4.430978560301145
best_error: 4.430978545238627
best_error: 4.430941096117624
best_error: 4.43094109611759
best_error: 4.430941095817988
best_error: 4.4309410947726295
best_error: 4.4308967304034415
best_error: 4.430896730403411
best_error: 4.430896730088235
best_error: 4.43089672905824
best_error: 4.430894823700444
best_error: 4.430894823700409
best_error: 4.430894823384293
best_error: 4.430894822355281
best_error: 4.430894301004456
best_error: 4.430894286764165
best_error: 4.4308941046191945
best_error: 4.430894104619158
best_error: 4.430894104302711
best_error: 4.430894103274042
best_error: 4.430894089600607
best_error: 4.430894075360199
best_error: 4.430868947610113
best_error: 4.43086894761008
best_error: 4.43086894626363
best_error: 4.430575889820912
best_error: 4.430575889820881
best_error: 4.430575888453445
best_error: 4.430101829190898
best_error: 4.430101829190866
best_error: 4.430101827767194
best_error: 4.429021625641588
best_error: 4.4290216256415595
best_error: 4.429021624056955
best_error: 4.423979884590249
best_error: 4.42397988459023
best_error: 4.423979882249267
best_error: 4.415584279737022
best_error: 4.415584279737007
best_error: 4.415584276771765
best_error: 4.4142160307913905
best_error: 4.4142160307913745
best_error: 4.414216029522492
best_error: 4.40883582582848
best_error: 4.408835825828461
best_error: 4.408835822720522
best_error: 4.388545818652064
best_error: 4.388545818652031
best_error: 4.386491248759846
best_error: 4.386491248759815
best_error: 4.386275749882571
best_error: 4.386275749882542
best_error: 4.386116220420242
best_error: 4.386116220420213
best_error: 4.355060899901132
best_error: 4.355060786523639
best_error: 4.278172423665712
best_error: 4.278172423665691
best_error: 4.278172422951502
best_error: 4.278172415732586
best_error: 4.246433547282848
best_error: 4.246433547282827
best_error: 4.213101490264484
best_error: 4.2131014604937205
best_error: 4.1767451930212
best_error: 4.176745193021185
best_error: 4.176745152154851
best_error: 4.171055069051006
best_error: 4.171055069050997
best_error: 4.17105505860195
best_error: 4.171009945772904
best_error: 4.171009945772893
best_error: 4.171009945664012
best_error: 4.171009935278479
best_error: 4.170987073771841
best_error: 4.170987073771827
best_error: 4.170987073513179
best_error: 4.17098706324483
best_error: 4.170285722691838
best_error: 4.170285722691821
best_error: 4.1702856824409755
best_error: 4.157231605784975
best_error: 4.157231605784961
best_error: 4.152076156866818
best_error: 4.152076126244747
best_error: 4.133571523872465
best_error: 4.1335715238724555
best_error: 4.132164210668361
best_error: 4.132164210668349
best_error: 4.1317921028553055
best_error: 4.131792083590289
best_error: 4.131786888256498
best_error: 4.131786888256488
best_error: 4.1317004964094295
best_error: 4.13170049640942
best_error: 4.131699125842042
best_error: 4.131699125842032
best_error: 4.131696155302477
best_error: 4.131696155302469
best_error: 4.131696148176506
best_error: 4.1316961481764976
best_error: 4.131696148165253
