ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.503947393154949
best_error: 11.50394731432305
best_error: 11.503947311343007
best_error: 10.837604230491603
best_error: 10.837604104456851
best_error: 9.699103541834011
best_error: 9.699103351172333
best_error: 9.002864601305996
best_error: 9.00286438384057
best_error: 8.880481162236737
best_error: 8.880480953638429
best_error: 7.548634591907733
best_error: 7.548634462780013
best_error: 7.230141154638576
best_error: 7.230141049705642
best_error: 7.2301410247209095
best_error: 7.032880576758683
best_error: 7.032880474042614
best_error: 7.032880442126757
best_error: 6.865091339618788
best_error: 6.865091238929605
best_error: 6.865091201300199
best_error: 6.843137569837822
best_error: 6.843137466916254
best_error: 6.843137431132925
best_error: 6.79758864513578
best_error: 6.797588540582719
best_error: 6.797588508312551
best_error: 6.787697577954136
best_error: 6.787697368154021
best_error: 6.786665783120017
best_error: 6.786665678723476
best_error: 6.786665646334776
best_error: 6.786491950636398
best_error: 6.7864918462249335
best_error: 6.786491813852628
best_error: 6.786490793420471
best_error: 6.786490583650002
best_error: 6.786450636097289
best_error: 6.786450531682275
best_error: 6.786450499313855
best_error: 6.786432822184875
best_error: 6.7864326124154735
best_error: 5.062204779216403
best_error: 5.062204485975258
best_error: 5.032783158167488
best_error: 5.0327828093397295
best_error: 5.02468000902772
best_error: 5.0246796680040635
best_error: 5.007297823353929
best_error: 5.007297518007471
best_error: 4.982916884688747
best_error: 4.982916577984929
best_error: 4.888938676516779
best_error: 4.8889383682303995
best_error: 4.775095214759901
best_error: 4.775094953800752
best_error: 4.569151004243953
best_error: 4.569150685499201
best_error: 4.170553987968893
best_error: 4.170553591063945
best_error: 3.7644675171192805
best_error: 3.76446705423596
best_error: 3.763577777861023
best_error: 3.7635773089271174
best_error: 3.7633224992222845
best_error: 3.7633220310036126
best_error: 3.762738795719706
best_error: 3.7627383194444244
best_error: 3.7602568114692576
best_error: 3.7602563381800493
best_error: 3.7571003678767396
best_error: 3.7570999200960076
best_error: 3.5779311049869165
best_error: 3.5779310174504713
best_error: 3.5779309690320966
best_error: 3.5037969432863094
best_error: 3.5037968549324034
best_error: 3.5037968089997733
best_error: 3.3961987884219575
best_error: 3.3961983983053203
best_error: 3.3958742653757925
best_error: 3.3958738795517
best_error: 3.301717897821905
best_error: 3.301717505453105
best_error: 3.293443846817271
best_error: 3.2934434528507825
best_error: 3.2908489990304504
best_error: 3.29084860474921
best_error: 3.2905167936037696
best_error: 3.2905163992737547
best_error: 3.290405872078579
best_error: 3.290405824771173
best_error: 3.290364428036689
best_error: 3.290364033684314
best_error: 3.2903609130075044
best_error: 3.2903605186546074
best_error: 3.2903602395142317
best_error: 3.2903601922098473
best_error: 3.290360107085535
best_error: 3.290359712732527
best_error: 3.290359487724665
best_error: 3.290359446345885
best_error: 3.2903593812103145
best_error: 3.2505767038988833
best_error: 3.250576263863756
best_error: 3.2471679985464794
best_error: 3.24716756589434
best_error: 3.233616272871151
best_error: 3.233615857897992
best_error: 3.2238034017996355
best_error: 3.2238029812954463
best_error: 3.1608874445580613
best_error: 3.160886995520076
best_error: 3.157391164444295
best_error: 3.157390715028269
best_error: 3.156741485903664
best_error: 3.156741036418051
best_error: 3.1564724504575916
best_error: 3.1564720009432197
best_error: 3.1564437729258437
best_error: 3.156443757187599
best_error: 3.1564436390339177
best_error: 3.153482741978402
best_error: 3.153482320685268
best_error: 3.1488099992993663
best_error: 3.148809571082594
best_error: 3.1409724960122367
best_error: 3.140972057439228
best_error: 3.136225283792482
best_error: 3.1362252616230797
best_error: 3.136225150536476
best_error: 3.1232857844080257
best_error: 3.1232853797005546
best_error: 3.112263436457177
best_error: 3.112263027952544
best_error: 3.1116755561375573
best_error: 3.1116755340873774
best_error: 3.111675423782664
best_error: 3.1116111565975535
best_error: 3.111610748128404
best_error: 3.1115975171806762
best_error: 3.111597495119283
best_error: 3.1115973848266094
best_error: 3.1115941816040023
best_error: 3.1115937731331256
best_error: 3.1115932955068386
best_error: 3.1115932734452727
best_error: 3.11159316315287
best_error: 3.0706960407823285
best_error: 3.070696031522244
best_error: 3.070695908025172
best_error: 3.0706660854089867
best_error: 3.070666076149172
best_error: 3.0706659526522624
best_error: 3.07054626659911
best_error: 3.0705462573401343
best_error: 3.0705461338440916
best_error: 3.0700670342873577
best_error: 3.070067025031962
best_error: 3.07006690153916
best_error: 3.068150791508206
best_error: 3.0681507822670344
best_error: 3.068150658787286
best_error: 3.0615758868363314
best_error: 3.061575477775479
best_error: 3.0188269677738653
best_error: 3.0188269677661097
best_error: 3.0188268345216356
best_error: 2.9797538267327486
best_error: 2.9797538267257284
best_error: 2.9615020551827604
best_error: 2.961502055175883
best_error: 2.9380209017150163
best_error: 2.938020496875035
best_error: 2.9358206012087895
best_error: 2.9358201974177813
best_error: 2.934600637517984
best_error: 2.934600233626611
best_error: 2.9339197306835496
best_error: 2.9339193267361745
best_error: 2.9335401874347893
best_error: 2.933539783456226
best_error: 2.9333291873626752
best_error: 2.9333287840989066
best_error: 2.933211931827362
best_error: 2.9332115285539606
best_error: 2.933146645928262
best_error: 2.933146242649488
best_error: 2.933112007247183
best_error: 2.9331116039652194
best_error: 2.933092815666275
best_error: 2.9330924123825515
best_error: 2.9330821901085606
best_error: 2.9330817868238444
best_error: 2.933076311904167
best_error: 2.933075908618931
best_error: 2.9330730629317348
best_error: 2.933072659646181
best_error: 2.933071268986729
best_error: 2.9330708657010147
best_error: 2.933069711392051
best_error: 2.933069308106173
best_error: 2.9330692536328495
best_error: 2.933069208406682
best_error: 2.9330691455079694
best_error: 2.933069047343054
best_error: 2.933069047336287
best_error: 2.933069016114491
best_error: 2.9330689708883226
best_error: 2.9330689575978575
best_error: 2.933068957591123
best_error: 2.9293602009133153
best_error: 2.929360200906526
