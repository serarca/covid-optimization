ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 64
days_switch 25
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 100.49211124831258
best_error: 100.4921110593085
best_error: 100.49211104453585
best_error: 20.679876843954577
best_error: 20.67987684395402
best_error: 20.679876842802138
best_error: 20.679773367533546
best_error: 20.679773366378377
best_error: 20.679357019526634
best_error: 20.679357018360477
best_error: 20.67765167745484
best_error: 20.677651676243293
best_error: 20.670130192231987
best_error: 20.670130190813733
best_error: 20.622832217310656
best_error: 20.622832214328383
best_error: 20.62191352128729
best_error: 20.621913518269228
best_error: 20.62088467181846
best_error: 20.620884668760027
best_error: 19.13512042216822
best_error: 19.13512022541512
best_error: 18.707004572849478
best_error: 18.70700431427234
best_error: 18.05870492197482
best_error: 18.058704571264034
best_error: 15.958467424223048
best_error: 15.95846679573945
best_error: 15.176243823635778
best_error: 15.176243788201695
best_error: 14.982591367506515
best_error: 14.982591341235615
best_error: 14.97105945731181
best_error: 14.971059367615606
best_error: 14.96559580590016
best_error: 14.965595727099641
best_error: 14.961510613773061
best_error: 14.961510541665843
best_error: 14.961127986142479
best_error: 14.961127961482914
best_error: 14.958812187562017
best_error: 14.958812116088009
best_error: 14.957211274106454
best_error: 14.957211274033934
best_error: 14.957211208484017
best_error: 14.956990849184589
best_error: 14.956990849112893
best_error: 14.956990783539943
best_error: 14.956964224360952
best_error: 14.956964224289386
best_error: 14.956964158713419
best_error: 14.956961239782432
best_error: 14.956961239710882
best_error: 14.956961174134575
best_error: 14.956960719194683
best_error: 14.956960719123137
best_error: 14.956960653546766
best_error: 14.956960629569176
best_error: 14.956960604965296
best_error: 14.954971059121146
best_error: 14.954971059115849
best_error: 14.954970992494903
best_error: 14.947477780624737
best_error: 14.947477704643251
best_error: 14.9254779091242
best_error: 14.925477782842833
best_error: 14.924758137575672
best_error: 14.924757999739516
best_error: 14.924051326938185
best_error: 14.924051188619366
best_error: 14.92367749314737
best_error: 14.92367735475442
best_error: 14.923477804393585
best_error: 14.923477665961038
best_error: 14.92337089490028
best_error: 14.923370756446527
best_error: 14.92331386365634
best_error: 14.923313725191276
best_error: 14.923283647981815
best_error: 14.923283509510753
best_error: 14.92327941211914
best_error: 14.923278968569546
best_error: 14.920029013013783
best_error: 14.920028874424737
best_error: 14.906102329209128
best_error: 14.90610219987376
best_error: 14.874447110620743
best_error: 14.874447089429182
best_error: 14.873463402815716
best_error: 14.873463275458867
best_error: 14.87004737081155
best_error: 14.87004735011324
best_error: 14.867422533133242
best_error: 14.867422512473661
best_error: 14.866855142449168
best_error: 14.866855121824884
best_error: 14.866601709305185
best_error: 14.86660168868464
best_error: 14.866485909716035
best_error: 14.866485889097186
best_error: 14.866479257998641
best_error: 14.866479237379899
best_error: 14.86647652386711
best_error: 14.866476503248403
best_error: 14.866475293695068
best_error: 14.866475273076393
best_error: 14.866475187999079
best_error: 14.866475065602799
best_error: 14.865666211120988
best_error: 14.865666190516261
best_error: 14.862446326699635
best_error: 14.862446306202461
best_error: 14.858345081998593
best_error: 14.858345063461893
best_error: 14.857950840987185
best_error: 14.857950689630666
best_error: 14.857856126797184
best_error: 14.857855975428944
best_error: 14.857855260651395
best_error: 14.85785524212389
best_error: 14.857847864203016
best_error: 14.857847712833834
best_error: 14.857719590680077
best_error: 14.857719439296531
best_error: 14.8577012162263
best_error: 14.857700759107189
best_error: 14.857643926747292
best_error: 14.857643469623152
best_error: 14.857414770213797
best_error: 14.857414313069537
best_error: 14.857075506925932
best_error: 14.857075049766028
best_error: 14.855486226885905
best_error: 14.855485769668043
best_error: 14.849159394661562
best_error: 14.849158948639502
best_error: 14.82414091008932
best_error: 14.824140789204158
best_error: 14.816214669933608
best_error: 14.816214548689999
best_error: 14.815977370563743
best_error: 14.815977249290997
best_error: 14.81502783037875
best_error: 14.815027708989444
best_error: 14.812718845208195
best_error: 14.812718824969398
best_error: 14.812119727010701
best_error: 14.812119706784115
best_error: 14.809743233204443
best_error: 14.809743212631995
best_error: 14.804205066221424
best_error: 14.804205044480597
best_error: 14.782990048750214
best_error: 14.782990027145658
best_error: 14.73569073080154
best_error: 14.735690729763366
best_error: 14.735690664319819
best_error: 14.734260056590976
best_error: 14.73426005556314
best_error: 14.734259989946743
best_error: 14.728599375581048
best_error: 14.7285993754234
best_error: 14.728599296524886
best_error: 14.706923498654225
best_error: 14.706923404734113
best_error: 14.63187603035998
best_error: 14.631875879027017
best_error: 14.618372055630804
best_error: 14.61837202420445
best_error: 14.325783329440089
best_error: 14.3257833041882
best_error: 14.315491630824557
best_error: 14.315491605618746
best_error: 14.255294653522704
best_error: 14.25529463223166
best_error: 14.253780032899794
best_error: 14.253779808310814
best_error: 14.227866638612145
best_error: 14.227866618018108
best_error: 14.117563813993268
best_error: 14.117563520602218
best_error: 14.03256630818031
best_error: 14.032566282574448
best_error: 13.841185095404533
best_error: 13.8411850919938
best_error: 13.841185029645107
best_error: 13.840784051269608
best_error: 13.840784025708018
best_error: 13.839819213807743
best_error: 13.839819210364915
best_error: 13.839819148522874
best_error: 13.838994596619628
best_error: 13.838994593175416
best_error: 13.8389945312631
best_error: 13.83897715491556
best_error: 13.838977151471216
best_error: 13.838977089558025
best_error: 13.838963876788785
best_error: 13.83896387334435
best_error: 13.838963811430492
best_error: 13.838957863255551
best_error: 13.838957859811071
best_error: 13.838957797896915
best_error: 13.838955992036638
best_error: 13.83895596653812
best_error: 13.825164314465512
best_error: 13.825164310657971
best_error: 13.825164254116345
best_error: 13.8251462503399
best_error: 13.825146246532245
best_error: 13.825146189989555
best_error: 13.825137498638528
best_error: 13.825137494830818
best_error: 13.825137438287618
best_error: 13.825132145955152
best_error: 13.825132142147401
best_error: 13.825132085603887
best_error: 13.825129203685925
best_error: 13.825129199878159
best_error: 13.825129143334468
best_error: 13.825127513308363
best_error: 13.825127509500588
best_error: 13.825127452956803
best_error: 13.825126492951902
best_error: 13.825126489144116
best_error: 13.825126432600273
best_error: 13.825125892551569
best_error: 13.82512588874378
best_error: 13.8251258321999
best_error: 13.82512545104019
best_error: 13.825125447232397
best_error: 13.825125390688491
best_error: 13.825125256780332
best_error: 13.82512525297254
best_error: 13.82512519642863
best_error: 13.825125192689242
best_error: 13.825125167035157
best_error: 13.656312529395311
best_error: 13.656312505807307
best_error: 13.593810100113759
best_error: 13.593810063684533
best_error: 13.589922409135463
best_error: 13.589922372722558
best_error: 13.574885867365749
best_error: 13.574885831573594
best_error: 13.55274409388468
best_error: 13.552744071006481
best_error: 13.551045521053023
best_error: 13.55104549820599
best_error: 13.53852836020815
best_error: 13.5385283545011
best_error: 13.535512444795474
best_error: 13.535512439074015
best_error: 13.524992872300468
best_error: 13.524992866436278
best_error: 13.52150032804651
best_error: 13.521500322134244
best_error: 13.516902199156
best_error: 13.516902193093028
best_error: 13.516848610316272
best_error: 13.516848604246078
best_error: 13.516818930593633
best_error: 13.51681892452564
best_error: 13.516810660267268
best_error: 13.516810654200349
best_error: 13.516808396442356
best_error: 13.51680839037518
best_error: 13.516808206738027
best_error: 13.51680820067077
best_error: 13.516807932155176
best_error: 13.516807926087965
best_error: 13.516807822017723
best_error: 13.516807822017721
best_error: 13.516807815950502
