ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 74
days_switch 80
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 108.65086755695101
best_error: 108.65086742411017
best_error: 108.65086737277633
best_error: 19.67407992482419
best_error: 19.67407992482167
best_error: 19.674079920309957
best_error: 19.672556705053456
best_error: 19.67255670049756
best_error: 19.666320753818678
best_error: 19.666320749089746
best_error: 19.63882244266557
best_error: 19.638822437126166
best_error: 19.459060170509773
best_error: 19.45906015785081
best_error: 19.439045990486484
best_error: 19.439045976857905
best_error: 19.413551822537634
best_error: 19.41355180762856
best_error: 15.529720946944204
best_error: 15.5297206338989
best_error: 14.58927943947408
best_error: 14.589279057221013
best_error: 13.538867626223219
best_error: 13.538867301937142
best_error: 13.120735174532776
best_error: 13.12073506148378
best_error: 13.100144541473554
best_error: 13.100144533060433
best_error: 13.100144523795063
best_error: 13.099557185029681
best_error: 13.09955716647039
best_error: 13.099557163626542
best_error: 12.975992996225706
best_error: 12.975992978684975
best_error: 12.756457272369513
best_error: 12.756457267303862
best_error: 12.75645726326327
best_error: 12.756457263067297
best_error: 12.707153742374219
best_error: 12.707153738973709
best_error: 12.707153728841837
best_error: 12.607406952846812
best_error: 12.607406948150345
best_error: 12.607406946275832
best_error: 12.60740694491722
best_error: 12.586525483073492
best_error: 12.586525482946115
best_error: 12.586525477043487
best_error: 12.586525474035572
best_error: 12.576703507934035
best_error: 12.576703168851667
best_error: 12.48696484572298
best_error: 12.486964841957057
best_error: 12.486964838631486
best_error: 12.437133519371816
best_error: 12.437133484082793
best_error: 12.409782645861302
best_error: 12.409782599254612
best_error: 12.409782596154091
best_error: 12.301757548988558
best_error: 12.301757537917988
best_error: 12.28931578432839
best_error: 12.289315772898565
best_error: 12.28931577287786
best_error: 12.273836100862674
best_error: 12.27383605797191
best_error: 12.273836055724939
best_error: 12.255039723129114
best_error: 12.255039678640498
best_error: 12.255039675045364
best_error: 12.210370248512884
best_error: 12.210370235829735
best_error: 12.210370235433981
best_error: 12.19580479063023
best_error: 12.195804747716647
best_error: 12.195804744690918
best_error: 12.1746694589133
best_error: 12.17466944903627
best_error: 12.162179696930552
best_error: 12.162179689104114
best_error: 12.162179688826338
best_error: 12.127349014067466
best_error: 12.127349010200449
best_error: 12.12734898026491
best_error: 12.073457714920295
best_error: 12.073457541428686
best_error: 12.070255882524437
best_error: 12.070255847376838
best_error: 12.067225978864471
best_error: 12.06722582882253
best_error: 12.063953719851709
best_error: 12.063953606625736
best_error: 12.063512554550716
best_error: 12.063512441263057
best_error: 12.063256215321651
best_error: 12.063256107996724
best_error: 12.063031323302791
best_error: 12.063031216303916
best_error: 12.062858862304832
best_error: 12.062858755635832
best_error: 12.062717289817773
best_error: 12.062717189070101
best_error: 12.06193894779712
best_error: 12.061938914443832
best_error: 11.964690181505938
best_error: 11.96469015227865
best_error: 11.952421011546917
best_error: 11.95242098381592
best_error: 11.867841691875574
best_error: 11.867841540176979
best_error: 11.7609348984879
best_error: 11.760934862347694
best_error: 11.739120753482394
best_error: 11.73912071461919
best_error: 11.709460947902734
best_error: 11.709460906628545
best_error: 11.705942635628256
best_error: 11.705942575004553
best_error: 11.703264158349992
best_error: 11.703264117213669
best_error: 11.70308764977677
best_error: 11.703087608647516
best_error: 11.7029885432253
best_error: 11.702988502100009
best_error: 11.674335036436668
best_error: 11.674334976304557
best_error: 11.628604110837728
best_error: 11.628604083806122
best_error: 11.617089282367687
best_error: 11.617089255696566
best_error: 11.606764044278137
best_error: 11.606764037470494
best_error: 11.604578200771275
best_error: 11.604578194035007
best_error: 11.597882117026339
best_error: 11.597882113063637
best_error: 11.597882111806989
best_error: 11.59504211948926
best_error: 11.595042037905042
best_error: 11.594158726305242
best_error: 11.594158726057591
best_error: 11.594158691254767
best_error: 11.593997854212038
best_error: 11.593997854028256
best_error: 11.593997818466507
best_error: 11.593582660391506
best_error: 11.593582611949827
best_error: 11.593091949762654
best_error: 11.59309186858485
best_error: 11.591293658560982
best_error: 11.59129359503283
best_error: 11.581215210960764
best_error: 11.581215210187237
best_error: 11.58121518004948
best_error: 11.581096034004915
best_error: 11.581096033198223
best_error: 11.581096003400518
best_error: 11.581009182228069
best_error: 11.581009181399605
best_error: 11.581009151860814
best_error: 11.580617181313322
best_error: 11.580617179372709
best_error: 11.580617162393601
best_error: 11.576802002517875
best_error: 11.576802000615704
best_error: 11.576801983044538
best_error: 11.575873308911284
best_error: 11.575873287721024
best_error: 11.575802538275855
best_error: 11.575802536383762
best_error: 11.575802518657548
best_error: 11.575770468348535
best_error: 11.575770447191635
best_error: 11.575765291359504
best_error: 11.575765289467784
best_error: 11.575765271735797
best_error: 11.575764570824536
best_error: 11.57576456893283
best_error: 11.57576456778888
best_error: 11.57576456534968
best_error: 11.564313105120261
best_error: 11.564313104088287
best_error: 11.564313077901494
best_error: 11.559181418678254
best_error: 11.55918136645125
