ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.343000208441888
best_error: 11.343000205295086
best_error: 10.604221585160964
best_error: 10.604221495193807
best_error: 9.399592194562777
best_error: 9.39959195612293
best_error: 7.026477910002205
best_error: 7.026477738929321
best_error: 6.988283949766867
best_error: 6.988283884591866
best_error: 6.969527466731752
best_error: 6.96952746673175
best_error: 6.9695274592894565
best_error: 6.966713949902155
best_error: 6.966713949902152
best_error: 6.966713942265426
best_error: 6.962857810452019
best_error: 6.962857748199018
best_error: 6.933940475167374
best_error: 6.933940412466886
best_error: 6.77894345638781
best_error: 6.7789434563878075
best_error: 6.778943438304291
best_error: 6.726179494505058
best_error: 6.726179494505056
best_error: 6.579567570300594
best_error: 6.579567282682929
best_error: 5.4144949217710465
best_error: 5.414494753189416
best_error: 5.162934363552973
best_error: 5.162934323366483
best_error: 5.1566486782352765
best_error: 5.156579074699382
best_error: 5.156579042496032
best_error: 5.156432689254799
best_error: 5.156432657171679
best_error: 5.1564188055168625
best_error: 5.156418773431495
best_error: 5.156412391697537
best_error: 5.156412359708102
best_error: 5.156411863669933
best_error: 5.156411831680414
best_error: 5.156411761248852
best_error: 5.15641176124885
best_error: 5.1563148468476685
best_error: 5.156314814605843
best_error: 5.15379799588806
best_error: 5.1537979603825494
best_error: 5.144873004592879
best_error: 5.144873004592876
best_error: 5.123712005345837
best_error: 5.123712005345832
best_error: 5.123712005345807
best_error: 5.1236504808594905
best_error: 5.123650480859489
best_error: 5.123650480859474
best_error: 5.123643651104502
best_error: 5.1236436511045
best_error: 5.123643651104485
best_error: 5.123641620607419
best_error: 5.123641620607418
best_error: 5.123641620607397
best_error: 5.12364111603035
best_error: 5.123641116030347
best_error: 5.123641116030326
best_error: 5.1236409787841
best_error: 5.123640978784097
best_error: 5.12364097878408
best_error: 5.12364078793231
best_error: 5.123640787932308
best_error: 5.123640787932297
best_error: 5.1236400245486795
best_error: 5.123640024548658
best_error: 5.12363712123816
best_error: 5.1236371212381595
best_error: 5.12363712123814
best_error: 5.12362595188185
best_error: 5.123625951881847
best_error: 5.1236259518818255
best_error: 5.123582556985154
best_error: 5.123582556985153
best_error: 5.123582556985134
best_error: 5.123399641216699
best_error: 5.123399641216697
best_error: 5.123399641216677
best_error: 5.123155244085376
best_error: 5.123155244085375
best_error: 5.123155244085348
best_error: 5.122123905193105
best_error: 5.122123905193099
best_error: 5.122123905193073
best_error: 5.1219738599401055
best_error: 5.121973859940103
best_error: 5.121973859940077
best_error: 5.121291288008436
best_error: 5.121291288008434
best_error: 5.121291288008407
best_error: 5.121228970819689
best_error: 5.121228970819686
best_error: 5.12122897081966
best_error: 5.121172897557377
best_error: 5.121172897557374
best_error: 5.1211728975573445
best_error: 5.121148982579971
best_error: 5.121148982579968
best_error: 5.12114898257994
best_error: 5.121126223916339
best_error: 5.121126223916336
best_error: 5.1211262239163124
best_error: 5.121111631981359
best_error: 5.121111631981355
best_error: 5.121111631981326
best_error: 5.121098226377517
best_error: 5.121098226377514
best_error: 5.121098226377486
best_error: 5.121072694767762
best_error: 5.1210726947677605
best_error: 5.121072694767729
best_error: 5.121048099441523
best_error: 5.121048099441521
best_error: 5.12104809944149
best_error: 5.121035379812009
best_error: 5.1210353798120085
best_error: 5.12103537981198
best_error: 5.121023144203969
best_error: 5.121023144203968
best_error: 5.121023144203935
best_error: 5.121016352197557
best_error: 5.121016352197556
best_error: 5.121016352197527
best_error: 5.121009889744147
best_error: 5.121009889744144
best_error: 5.121009889744116
best_error: 5.1210058916576155
best_error: 5.121005891657614
best_error: 5.121005891657581
best_error: 5.121002128814131
best_error: 5.121002128814128
best_error: 5.1210021288141
best_error: 5.120998201724446
best_error: 5.120998201724445
best_error: 5.120998201724414
best_error: 5.120994853902908
best_error: 5.120994853902905
best_error: 5.120994853902882
best_error: 5.120979558359227
best_error: 5.120979558359222
best_error: 5.120979558359199
best_error: 5.120968018521563
best_error: 5.120968018521561
best_error: 5.12096801852153
best_error: 5.120965966486793
best_error: 5.120965966486791
best_error: 5.1209659664867555
best_error: 5.120963985776849
best_error: 5.120963985776846
best_error: 5.120963985776813
best_error: 5.120962985560093
best_error: 5.120962985560061
best_error: 5.120962022260892
best_error: 5.1209620222608905
best_error: 5.120962022260863
best_error: 5.120961534718653
best_error: 5.120961534718651
best_error: 5.1209615347186235
best_error: 5.120961064417192
best_error: 5.12096106441719
best_error: 5.120961064417164
best_error: 5.120960824088038
best_error: 5.120960824088035
best_error: 5.120960824088009
best_error: 5.120960592410017
best_error: 5.120960592410015
best_error: 5.120960592409988
best_error: 5.120960472283352
best_error: 5.120960472283349
best_error: 5.1209604722833175
best_error: 5.120960356631587
best_error: 5.120960356631585
best_error: 5.120960356631558
best_error: 5.120960294828231
best_error: 5.12096029482823
best_error: 5.120960294828198
best_error: 5.120960235493601
best_error: 5.120960235493598
best_error: 5.12096023549357
