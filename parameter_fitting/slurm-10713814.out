ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.937496680709687
best_error: 9.937496602210114
best_error: 9.462198752775766
best_error: 9.462198658388868
best_error: 9.257836761353163
best_error: 9.257836610820332
best_error: 8.868589400383021
best_error: 8.868589263245697
best_error: 8.390482517658445
best_error: 8.390482369437638
best_error: 8.286842258731285
best_error: 8.286842132145708
best_error: 7.046079167134644
best_error: 7.046079108587238
best_error: 7.046079047722442
best_error: 6.369927197554239
best_error: 6.3699271410844585
best_error: 6.369927078229735
best_error: 6.352212897700609
best_error: 6.352212833551372
best_error: 6.252537581197281
best_error: 6.25253752269066
best_error: 6.252537461426268
best_error: 6.159508594277632
best_error: 6.159508532682075
best_error: 6.159508473773895
best_error: 6.137623607493003
best_error: 6.137623544267076
best_error: 6.137623486789291
best_error: 6.123367570555324
best_error: 6.12336750626919
best_error: 6.123367449721303
best_error: 6.121706887513495
best_error: 6.121706823033891
best_error: 5.492669414244426
best_error: 5.492669172849814
best_error: 4.995841136295753
best_error: 4.995840722823539
best_error: 3.60935217423549
best_error: 3.6093518536354945
best_error: 3.5878024693403425
best_error: 3.587802148816076
best_error: 3.5822647639030505
best_error: 3.582264442721077
best_error: 3.5806362213315337
best_error: 3.5806358999562926
best_error: 3.579612650776856
best_error: 3.5796123292801756
best_error: 3.579164608749384
best_error: 3.579164287199559
best_error: 3.5788774444343847
best_error: 3.5788773368418783
best_error: 3.5336677779680503
best_error: 3.5336674139864925
best_error: 3.51116947712775
best_error: 3.511169087881247
best_error: 3.4761683170147375
best_error: 3.4761679056199766
best_error: 3.448950345069945
best_error: 3.448950261088947
best_error: 3.4434904991800566
best_error: 3.443490085335373
best_error: 3.4233250988495096
best_error: 3.423324693470308
best_error: 3.206209745586128
best_error: 3.2062093820442517
best_error: 3.178739345335602
best_error: 3.178739015877525
best_error: 3.0809022519747558
best_error: 3.080901914828538
best_error: 3.018203580003699
best_error: 3.018203249524251
best_error: 2.7991235678729547
best_error: 2.799123218473327
best_error: 2.6853557604629956
best_error: 2.685355388675612
best_error: 2.368322496768879
best_error: 2.3683220927214306
best_error: 2.312615890535059
best_error: 2.3126154800319365
best_error: 2.2856870739131674
best_error: 2.2856866619158986
best_error: 2.272142885490892
best_error: 2.272142475035525
best_error: 2.2652631519653226
best_error: 2.2652627436540125
best_error: 2.2634929677101985
best_error: 2.263492967656399
best_error: 2.2634928491069273
best_error: 2.263443801624627
best_error: 2.263443393194402
best_error: 2.2228289529317893
best_error: 2.2228285462439894
best_error: 2.1342871327766026
best_error: 2.1342871327190913
best_error: 2.1342870144666026
best_error: 2.130269076394624
best_error: 2.1302690763371492
best_error: 2.130268958150795
best_error: 2.1142131898171836
best_error: 2.11421318975978
best_error: 2.1142130718377796
best_error: 2.1040787416316733
best_error: 2.1040787415737308
best_error: 2.1040786239419544
best_error: 2.095518037975566
best_error: 2.095517677141088
best_error: 2.0953953283383893
best_error: 2.0953953282806226
best_error: 2.0953952107651457
best_error: 2.09536082036298
best_error: 2.0953604595110784
best_error: 2.0951386795341516
best_error: 2.0951383186576376
best_error: 2.0951155086797697
best_error: 2.095115147800668
best_error: 2.0951001464042607
best_error: 2.0950997855234537
best_error: 2.0950935013972662
best_error: 2.0950931405157425
best_error: 2.0950927925486904
best_error: 2.095092792490952
best_error: 2.0950926749802026
best_error: 2.095092051989716
best_error: 2.0950916911080335
best_error: 2.095089355702816
best_error: 2.0950893556450914
best_error: 2.095089238134364
best_error: 2.0950866138138284
best_error: 2.0950862529324152
best_error: 2.0950842289036298
best_error: 2.0950842288458738
best_error: 2.0950841113352583
best_error: 2.069701139029832
best_error: 2.06970079619414
best_error: 2.0559660139577502
best_error: 2.0559656706155653
best_error: 2.0482803373635616
best_error: 2.048279993547097
best_error: 2.046884792569515
best_error: 2.046884448906816
best_error: 2.046306774316209
best_error: 2.0463064306179373
best_error: 2.0460458081348136
best_error: 2.0460454644205033
best_error: 2.046041497231598
best_error: 2.046041497173378
best_error: 2.046041380900151
best_error: 2.0347968239043523
best_error: 2.034796497060161
best_error: 2.0146855048968835
best_error: 2.0146851676149575
best_error: 2.0094524851612343
best_error: 2.0094521513362595
best_error: 2.003206227813771
best_error: 2.0032062277545704
best_error: 2.003206112803082
best_error: 2.002682984841177
best_error: 2.002682651294874
best_error: 2.0025971187554994
best_error: 2.002597118696312
best_error: 2.0025970037560703
best_error: 2.00183073583465
best_error: 2.001830404705246
best_error: 1.999472380470777
best_error: 1.9994720494717075
best_error: 1.9992000386154087
best_error: 1.9991997076002122
best_error: 1.9991644944121316
best_error: 1.9991643981620666
best_error: 1.9991643634261145
best_error: 1.9991642127386013
best_error: 1.9991642126802922
best_error: 1.9991642064808972
best_error: 1.999019044991064
best_error: 1.9990187139539
best_error: 1.998019257030128
best_error: 1.9980189259082506
best_error: 1.994088496073683
best_error: 1.9940881639972476
best_error: 1.979099038906556
best_error: 1.9790987036012466
best_error: 1.8802590640085652
best_error: 1.8802587078457997
best_error: 1.834936641715057
best_error: 1.8349362627931765
best_error: 1.8114029113129118
best_error: 1.8114025253664188
best_error: 1.7944168134814649
best_error: 1.7944168133924618
best_error: 1.7944166955257788
best_error: 1.7764771828263661
best_error: 1.7764771827389922
best_error: 1.7632338599021729
best_error: 1.7632338598145147
