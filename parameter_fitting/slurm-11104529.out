ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 74
days_switch 5
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.08173035857266
best_error: 101.08173019578732
best_error: 101.08173017703143
best_error: 19.69326605381201
best_error: 19.693266053809726
best_error: 19.69326605000453
best_error: 19.691654321430743
best_error: 19.691654317598072
best_error: 19.685113603331484
best_error: 19.68511359939539
best_error: 19.657545266364693
best_error: 19.657545262034127
best_error: 19.51337415960795
best_error: 19.513374152313197
best_error: 19.391477399309544
best_error: 19.39147738823905
best_error: 19.26183073847635
best_error: 19.261830721450636
best_error: 16.1619505026034
best_error: 16.161950110558827
best_error: 15.324286746259837
best_error: 15.324286244952521
best_error: 14.237914041552063
best_error: 14.237913422286429
best_error: 12.87979224386228
best_error: 12.879792241228575
best_error: 12.879792189250287
best_error: 12.874883552345185
best_error: 12.874883549592578
best_error: 12.874883498549394
best_error: 12.833172817984295
best_error: 12.833172815081916
best_error: 12.833172764619245
best_error: 12.803978879109286
best_error: 12.803978875629785
best_error: 12.803978832765628
best_error: 12.789033594294327
best_error: 12.789033588523084
best_error: 12.789033573396448
best_error: 12.763973481558159
best_error: 12.76397346562846
best_error: 12.543732539199606
best_error: 12.543732494454039
best_error: 11.877212938769691
best_error: 11.87721293486712
best_error: 11.877212863159787
best_error: 11.846182740935255
best_error: 11.846182733482065
best_error: 11.846182714262872
best_error: 11.820840738545161
best_error: 11.820840728820913
best_error: 11.8208407210771
best_error: 11.80008451225642
best_error: 11.800084500921555
best_error: 11.800084494563006
best_error: 11.770241413733007
best_error: 11.770241402446517
best_error: 11.770241395783607
best_error: 11.663608685356156
best_error: 11.663608655637388
best_error: 11.618620301667296
best_error: 11.618620297514727
best_error: 11.618620282467838
best_error: 11.614227799437082
best_error: 11.61422779526863
best_error: 11.614227780210308
best_error: 11.59680079080861
best_error: 11.596800786576392
best_error: 11.596800771471912
best_error: 11.534745651180524
best_error: 11.534745646345899
best_error: 11.53474563141521
best_error: 11.521665598362576
best_error: 11.521665593209605
best_error: 11.521665578221466
best_error: 11.510921419450296
best_error: 11.510921413766535
best_error: 11.510921398972705
best_error: 11.510592046542998
best_error: 11.51059204082041
best_error: 11.510592026012802
best_error: 11.510396343806114
best_error: 11.510396338034777
best_error: 11.510396323277245
best_error: 11.510090875871873
best_error: 11.510090870066055
best_error: 11.51009085529912
best_error: 11.50992507435392
best_error: 11.509925068534304
best_error: 11.50992505375552
best_error: 11.509715584369518
best_error: 11.509715578525206
best_error: 11.50971556374104
best_error: 11.509713419838468
best_error: 11.509713413993886
best_error: 11.509713399209472
best_error: 11.50971136689228
best_error: 11.509711361047424
best_error: 11.50971134626279
best_error: 11.509700764766082
best_error: 11.509700758919852
best_error: 11.509700744134028
best_error: 11.509693695282303
best_error: 11.509693689435165
best_error: 11.509693674648549
best_error: 11.509671498959442
best_error: 11.509671493109437
best_error: 11.509671478320334
best_error: 11.509671057901558
best_error: 11.509671052051456
best_error: 11.50967103726229
best_error: 11.509670622684109
best_error: 11.509670616834995
best_error: 11.509670602062439
best_error: 11.50967042565499
best_error: 11.509670419805836
best_error: 11.509670405033248
best_error: 11.509670231010839
best_error: 11.509670225161646
best_error: 11.509670210389011
best_error: 11.509670129096296
best_error: 11.509670129096294
best_error: 11.509670123247076
best_error: 11.50967010847443
best_error: 11.509670028486594
best_error: 11.509670022637364
best_error: 11.50967000786469
best_error: 11.509669973310407
best_error: 11.509669967461154
best_error: 11.509669952688473
best_error: 11.50966991892273
best_error: 11.50966991307347
best_error: 11.509669898300782
best_error: 11.509669885359516
best_error: 11.509669879510245
best_error: 11.509669864737548
best_error: 11.50966985241732
best_error: 11.509669846568032
best_error: 11.50966983179534
best_error: 11.509669822046591
best_error: 11.509669816197306
best_error: 11.509669801424604
best_error: 11.50966979292113
best_error: 11.50966978707184
best_error: 11.509669772299135
best_error: 11.489485062715268
best_error: 11.489485057183348
best_error: 11.489485042440112
best_error: 11.460960690413858
best_error: 11.460960689838355
best_error: 11.460960685663498
best_error: 11.46096067085887
best_error: 11.446910952889267
best_error: 11.446910892404972
best_error: 11.423025502197898
best_error: 11.423025439851422
best_error: 11.328186976411864
best_error: 11.328186898701965
best_error: 11.16241182253083
best_error: 11.162411816030847
best_error: 11.16241166737665
best_error: 11.155082921796044
best_error: 11.155082911707389
best_error: 11.14133419337541
best_error: 11.141334181723833
best_error: 11.135343333509239
best_error: 11.135343321798821
best_error: 11.135314670426256
best_error: 11.135314665423358
best_error: 11.13531454554092
best_error: 11.133445265749852
best_error: 11.133445261507598
best_error: 11.133445157120926
best_error: 11.133353471783886
best_error: 11.133353460044951
best_error: 11.133076912621505
best_error: 11.1330769082081
best_error: 11.133076800216847
best_error: 11.132878633185133
best_error: 11.132878621449688
best_error: 11.132537953504956
best_error: 11.132537942651389
best_error: 11.123881256616677
best_error: 11.123881253590664
best_error: 11.123306915715137
best_error: 11.12330691449473
best_error: 11.123306859770068
best_error: 11.123220840800823
best_error: 11.123220839553117
best_error: 11.123220784337848
best_error: 11.123199198128408
best_error: 11.123199196880261
best_error: 11.123199141660741
best_error: 11.123193568559994
best_error: 11.123193567311732
best_error: 11.123193512091108
best_error: 11.123193380560439
best_error: 11.123193378249262
best_error: 11.123193377594937
best_error: 11.122969017111785
best_error: 11.122969015924355
best_error: 11.122968963731488
best_error: 11.122915520359776
best_error: 11.122915519468668
best_error: 11.122915517371768
best_error: 11.122215662836155
best_error: 11.12221566157118
best_error: 11.122215609059808
best_error: 11.100130346389914
best_error: 11.100130342513154
best_error: 11.100130241716831
best_error: 11.042571048988616
best_error: 11.042571033486208
best_error: 10.926988252260033
best_error: 10.926988229054702
best_error: 10.925370842831239
best_error: 10.925370821984423
best_error: 10.925370362973995
best_error: 10.91014401174088
best_error: 10.910144010450711
best_error: 10.910143988495053
best_error: 10.894408869907341
best_error: 10.894408847455509
best_error: 10.89440884523025
best_error: 10.892939824476695
best_error: 10.892939803580491
best_error: 10.892939344857666
best_error: 10.892779538145884
best_error: 10.892779515594626
best_error: 10.892779513488293
best_error: 10.88953867309937
best_error: 10.889538645662977
best_error: 10.889091571901197
best_error: 10.88909154443777
best_error: 10.888947565289806
best_error: 10.888947537817662
best_error: 10.888860455778286
best_error: 10.888860428300884
best_error: 10.88885889872203
best_error: 10.888858871244139
best_error: 10.888854936255731
best_error: 10.888854908776596
best_error: 10.8888525758709
best_error: 10.888852548391025
best_error: 10.888848706177633
best_error: 10.888848678696547
best_error: 10.888844756918926
best_error: 10.888844755453295
best_error: 10.888844554619041
best_error: 10.8291374287263
best_error: 10.829137315290478
best_error: 10.800572812656533
best_error: 10.800572786067573
best_error: 10.767304748437665
best_error: 10.767304707224252
best_error: 10.72933797709943
best_error: 10.729337968509599
best_error: 10.729337967962982
best_error: 10.725245061182125
best_error: 10.725245051723729
best_error: 10.72511185514676
best_error: 10.725111845616032
best_error: 10.71896531949669
best_error: 10.718965309427666
best_error: 10.718097363500931
best_error: 10.718097353412691
best_error: 10.71809342999848
best_error: 10.71809341990737
