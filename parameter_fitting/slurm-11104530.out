ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 74
days_switch 10
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.15236933416156
best_error: 101.15236917128564
best_error: 101.15236915255149
best_error: 19.72901163118541
best_error: 19.72901163118324
best_error: 19.72901162699591
best_error: 19.727442584424452
best_error: 19.727442580205725
best_error: 19.72106083343801
best_error: 19.72106082909931
best_error: 19.69376184436879
best_error: 19.693761839539317
best_error: 19.548804089363216
best_error: 19.548804081351705
best_error: 19.513535623995075
best_error: 19.513535614947415
best_error: 19.471584793609303
best_error: 19.47158478309014
best_error: 16.965947143816102
best_error: 16.96594685067691
best_error: 16.23171775495515
best_error: 16.231717367131328
best_error: 15.188810145778962
best_error: 15.188809627748524
best_error: 12.972194703478182
best_error: 12.972194307795498
best_error: 12.802510467928002
best_error: 12.802510422113397
best_error: 12.700414014760971
best_error: 12.700414012150256
best_error: 12.700413958637087
best_error: 12.693712917640891
best_error: 12.693712913325484
best_error: 12.693712880776214
best_error: 12.673645933373946
best_error: 12.673645917921917
best_error: 12.648526689603516
best_error: 12.648526674295171
best_error: 12.594116851104301
best_error: 12.594116809283285
best_error: 12.210843653444881
best_error: 12.210843644249794
best_error: 12.210843637277096
best_error: 12.149611810236937
best_error: 12.149611800633965
best_error: 12.149611793546924
best_error: 12.092975465631131
best_error: 12.092975455021163
best_error: 12.092975448434293
best_error: 12.08925926375586
best_error: 12.089259253170752
best_error: 12.089259246545687
best_error: 12.074371755272331
best_error: 12.074371744786035
best_error: 12.07437173800858
best_error: 12.014627886796868
best_error: 12.014627876488905
best_error: 12.01462786931479
best_error: 11.775538393958437
best_error: 11.775538384295238
best_error: 11.77553837553408
best_error: 11.603732148817723
best_error: 11.603732144495902
best_error: 11.603732129624287
best_error: 11.56610475681924
best_error: 11.566104756715621
best_error: 11.566104737640803
best_error: 11.303684701161176
best_error: 11.303684688724708
best_error: 11.303684480578932
best_error: 11.158887651936656
best_error: 11.15888764852344
best_error: 11.15888759956808
best_error: 11.150341566471564
best_error: 11.150341480319007
best_error: 11.14301629175772
best_error: 11.143016217577124
best_error: 11.109944373034562
best_error: 11.109944356783071
best_error: 11.10882560766392
best_error: 11.108825607314905
best_error: 11.108825597605048
best_error: 11.105488288318895
best_error: 11.105488288219853
best_error: 11.105488274071892
best_error: 11.100554631156092
best_error: 11.100554631091214
best_error: 11.100554614891896
best_error: 11.098321230633495
best_error: 11.098321213883358
best_error: 11.097023197279702
best_error: 11.09702318055583
best_error: 11.095965845781496
best_error: 11.09596582573214
best_error: 11.095265056041772
best_error: 11.095265055839882
best_error: 11.095265040818756
best_error: 11.094607655090382
best_error: 11.094607654906065
best_error: 11.094607639766387
best_error: 11.094172947124248
best_error: 11.094172946951453
best_error: 11.09417293173419
best_error: 11.093455053623035
best_error: 11.09345505344551
best_error: 11.093455038440963
best_error: 11.093180145527914
best_error: 11.093180145270733
best_error: 11.093180133667072
best_error: 11.093029943129839
best_error: 11.093029942884542
best_error: 11.093029931059537
best_error: 11.092884100719477
best_error: 11.092884100477995
best_error: 11.092884088625222
best_error: 11.092804998938927
best_error: 11.092804998699519
best_error: 11.092804986831709
best_error: 11.092681807275115
best_error: 11.092681807038923
best_error: 11.092681795147737
best_error: 11.092641174996654
best_error: 11.092641174761521
best_error: 11.092641162862632
best_error: 11.092625194420247
best_error: 11.092625194185533
best_error: 11.092625182283616
best_error: 11.092598122852351
best_error: 11.092598122618343
best_error: 11.092598110711359
best_error: 11.0925895294879
best_error: 11.092589529254113
best_error: 11.092589517345525
best_error: 11.09258716996907
best_error: 11.092587169735346
best_error: 11.092587157826319
best_error: 11.092585623617712
best_error: 11.092585623384027
best_error: 11.092585611474709
best_error: 11.09258349384698
best_error: 11.092583493613349
best_error: 11.092583481703635
best_error: 11.092582623296886
best_error: 11.09258262306328
best_error: 11.0925826111534
best_error: 11.092582132918645
best_error: 11.09258213268505
best_error: 11.09258212077508
best_error: 11.092581363829893
best_error: 11.09258136359632
best_error: 11.092581351686206
best_error: 11.092581101190332
best_error: 11.092581100956762
best_error: 11.0925810890466
best_error: 11.092580981310984
best_error: 11.092580981077424
best_error: 11.092580969167237
best_error: 11.092580794576788
best_error: 11.092580794343228
best_error: 11.092580782433007
best_error: 11.092580780055222
best_error: 11.09258075833539
best_error: 11.092580754783134
best_error: 11.092580667673289
best_error: 11.092580667439734
best_error: 11.09258066735043
best_error: 11.092580664233648
best_error: 11.092580641705437
best_error: 11.09258064147188
best_error: 11.092580641382577
best_error: 11.09258063826579
best_error: 11.092580631529152
best_error: 11.092580631439846
