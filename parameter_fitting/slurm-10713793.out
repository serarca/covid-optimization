ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.520997681446838
best_error: 12.520997656311613
best_error: 12.520997633863889
best_error: 12.424159652437641
best_error: 12.424159622194498
best_error: 12.424159597277624
best_error: 11.10514013088463
best_error: 11.105140013452498
best_error: 11.10513996739428
best_error: 9.341261487141745
best_error: 9.34126126988168
best_error: 8.894976886289637
best_error: 8.89497667368563
best_error: 8.876140183194043
best_error: 8.876139970664097
best_error: 8.311915682727752
best_error: 8.311915524668704
best_error: 7.792360217996247
best_error: 7.792360072217899
best_error: 7.4125742615461645
best_error: 7.412574125750993
best_error: 7.1585593823916165
best_error: 7.158559261504136
best_error: 6.993553561994188
best_error: 6.9935534527343
best_error: 6.993553437109247
best_error: 6.679269989065602
best_error: 6.679269865078316
best_error: 6.6119050751076305
best_error: 6.611904947471267
best_error: 6.607107485458332
best_error: 6.607107200559191
best_error: 6.357155891586203
best_error: 6.357155693524107
best_error: 5.144168525779222
best_error: 5.144168289007975
best_error: 4.749549954945524
best_error: 4.749549600211844
best_error: 4.74638646835669
best_error: 4.74638609877503
best_error: 4.563973513629529
best_error: 4.563973145111893
best_error: 4.523111089475007
best_error: 4.523110726843452
best_error: 4.502415833563556
best_error: 4.502415471505755
best_error: 4.4891940343025585
best_error: 4.489193673195317
best_error: 4.4836616595245795
best_error: 4.4836612977615165
best_error: 4.483451714421853
best_error: 4.483451348921843
best_error: 4.478503528986187
best_error: 4.478503163578646
best_error: 4.475256438545297
best_error: 4.475256072749678
best_error: 4.474631893849862
best_error: 4.47463163897131
best_error: 4.47408277845907
best_error: 4.4740824090674245
best_error: 4.397680337609755
best_error: 4.397679930748432
best_error: 4.340548417948156
best_error: 4.340547993523991
best_error: 4.323546494855293
best_error: 4.323546276837951
best_error: 4.323285684165278
best_error: 4.323285256194019
best_error: 4.318521830150989
best_error: 4.31852160414823
best_error: 4.315211889139814
best_error: 4.315211667310528
best_error: 4.315154409038844
best_error: 4.315154187214382
best_error: 4.315126795987167
best_error: 4.31512657416504
best_error: 4.315122050702477
best_error: 4.315121601613998
best_error: 4.31014254871574
best_error: 4.310142312191097
best_error: 4.2892345183723615
best_error: 4.289234280017206
best_error: 4.242696621702523
best_error: 4.242696374130215
best_error: 4.197181527106373
best_error: 4.197181286261856
best_error: 4.11448389739986
best_error: 4.114483665610628
best_error: 4.057166457330698
best_error: 4.057166229905146
best_error: 4.042609909898891
best_error: 4.042609594847238
best_error: 4.037336669487943
best_error: 4.037336443335508
best_error: 4.035647447881363
best_error: 4.035647131269424
best_error: 4.011008331469153
best_error: 4.011008018402179
best_error: 3.967759084722653
best_error: 3.967759025117818
best_error: 3.9677589130327116
best_error: 3.9653598912760204
best_error: 3.9653595737277083
best_error: 3.8831499470308493
best_error: 3.883149616953002
best_error: 3.6313015568473554
best_error: 3.631301180339662
best_error: 3.5472798951117186
best_error: 3.5472795127219463
best_error: 3.327952627070367
best_error: 3.3279523182739936
best_error: 3.3279522786290165
best_error: 3.107013621932584
best_error: 3.1070136219309683
best_error: 3.105852466950464
best_error: 3.1058521284558585
best_error: 3.087658033771355
best_error: 3.087657689764685
best_error: 2.987158115418542
best_error: 2.9871577689337103
best_error: 2.9828351470831445
best_error: 2.982834800044673
best_error: 2.9805880833651157
best_error: 2.9805877360387543
best_error: 2.980105508349821
best_error: 2.9801051609640736
best_error: 2.9799265385484004
best_error: 2.979926191140635
best_error: 2.979810225503535
best_error: 2.979809878081463
best_error: 2.9798064424910433
best_error: 2.979806095068491
best_error: 2.979804997838583
best_error: 2.9798046504158635
best_error: 2.9798042990892775
best_error: 2.979804044380815
best_error: 2.979803998663262
best_error: 2.9798039986540172
best_error: 2.9798038934770785
best_error: 2.9374916026607467
best_error: 2.937491247658091
best_error: 2.827920517780618
best_error: 2.827920059708502
best_error: 2.7995264639906208
best_error: 2.799526034656725
best_error: 2.787301656634309
best_error: 2.787301227601895
best_error: 2.781448479171982
best_error: 2.7814480474164918
best_error: 2.77860921343579
best_error: 2.778608771887849
best_error: 2.7776722389967436
best_error: 2.7776717973273612
best_error: 2.7774886281993387
best_error: 2.777488195010477
best_error: 2.7772016437553297
best_error: 2.7772012053251274
best_error: 2.776694256137853
best_error: 2.7766938179088934
best_error: 2.666480272431069
best_error: 2.6664798502301705
best_error: 2.631426100328366
best_error: 2.6314256806729466
best_error: 2.6165416700562076
best_error: 2.6165412555974683
best_error: 2.609758050780478
best_error: 2.609757635550033
best_error: 2.6084899249892075
best_error: 2.60848950961216
best_error: 2.6081273179522784
best_error: 2.608126902533318
best_error: 2.6079668198820016
best_error: 2.6079668198819883
best_error: 2.6079666419776784
