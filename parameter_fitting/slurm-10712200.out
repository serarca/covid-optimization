ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.959922459434264
best_error: 12.959922443858336
best_error: 12.959922418510727
best_error: 10.577270458791254
best_error: 10.57727035584405
best_error: 9.61591511235087
best_error: 9.61591498893426
best_error: 9.478334070123847
best_error: 9.478333969556338
best_error: 9.47825400815246
best_error: 9.478253907304893
best_error: 9.478241805166288
best_error: 9.478241707813812
best_error: 9.195615490306219
best_error: 9.19561538174976
best_error: 8.179115426805373
best_error: 8.179115270776746
best_error: 5.512986296407512
best_error: 5.512985672709567
best_error: 5.376013456947295
best_error: 5.376013022649816
best_error: 5.0710234238525285
best_error: 5.071023081236862
best_error: 4.9633606083465365
best_error: 4.9633602817731495
best_error: 4.954742368983494
best_error: 4.954742358069769
best_error: 4.953298602391822
best_error: 4.95329827659978
best_error: 4.953201707839641
best_error: 4.95320169692588
best_error: 4.931915172047189
best_error: 4.9319148723932145
best_error: 4.926613277764137
best_error: 4.926612987705612
best_error: 4.920658413850412
best_error: 4.920658134254316
best_error: 4.880107326323191
best_error: 4.8801073158163195
best_error: 4.860611384805908
best_error: 4.860611110566932
best_error: 4.851976259719323
best_error: 4.851975969868224
best_error: 4.8427524324030085
best_error: 4.842752129910227
best_error: 4.821017155575788
best_error: 4.821016838820561
best_error: 4.729559646533422
best_error: 4.72955925203839
best_error: 4.7227234316306825
best_error: 4.722723036512963
best_error: 4.722245192159397
best_error: 4.7222447969982
best_error: 4.7220065950488435
best_error: 4.722006199865947
best_error: 4.721886197015708
best_error: 4.7218858018218555
best_error: 4.721863276300221
best_error: 4.721863265829259
best_error: 4.721863232125559
best_error: 4.721398991510697
best_error: 4.72139860068813
best_error: 4.719416199610838
best_error: 4.719415820624664
best_error: 4.713098897070656
best_error: 4.713098517075256
best_error: 4.711668783049018
best_error: 4.711668402825589
best_error: 4.710809251270097
best_error: 4.710808870257088
best_error: 4.710406775795272
best_error: 4.710406394718089
best_error: 4.710125620939138
best_error: 4.710125239817147
best_error: 4.710007534788015
best_error: 4.71000715364721
best_error: 4.70999691692726
best_error: 4.709996535784789
best_error: 4.709989600724043
best_error: 4.709989219580413
best_error: 4.709986508346287
best_error: 4.709986127202174
best_error: 4.709986079524815
best_error: 4.709985698380637
best_error: 4.70998554726966
best_error: 4.706696246671017
best_error: 4.70669586153954
best_error: 4.704455731883049
best_error: 4.704455345867676
best_error: 4.701801390811177
best_error: 4.701801380737757
best_error: 4.701801346888687
best_error: 4.701680568733099
best_error: 4.701680184221466
best_error: 4.698303275895629
best_error: 4.698303266285133
best_error: 4.698303232012954
best_error: 4.697800163136163
best_error: 4.69779978282541
best_error: 4.694316496710283
best_error: 4.694316488250742
best_error: 4.69431645287961
best_error: 4.689803047421842
best_error: 4.689802674800038
best_error: 4.684470784976384
best_error: 4.684470777407182
best_error: 4.684470741276153
best_error: 4.683789519329174
best_error: 4.683789150930549
best_error: 4.668972151744271
best_error: 4.668971815791971
best_error: 4.665614396853501
best_error: 4.665614063832113
best_error: 4.663422858026003
best_error: 4.663422540422352
best_error: 4.660474308540273
best_error: 4.6604739794446175
best_error: 4.659624228943886
best_error: 4.659623904519274
best_error: 4.6588761742687
best_error: 4.658876164261061
best_error: 4.658876131251162
best_error: 4.658572731526155
best_error: 4.658572406977429
best_error: 4.658484863177398
best_error: 4.658484538618287
best_error: 4.658482797225107
best_error: 4.658482472665739
best_error: 4.658481740769229
best_error: 4.658481416209746
best_error: 4.6584812903421176
best_error: 4.658481014700854
best_error: 4.658481007510548
best_error: 4.658481000094695
best_error: 4.658480993726592
best_error: 4.658480993690504
best_error: 4.658480982105768
best_error: 4.6584809806843595
best_error: 4.658480980473865
