ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 92
days_switch 50
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.38301982097272
best_error: 101.38301964474404
best_error: 101.38301960738697
best_error: 15.407537136146658
best_error: 15.407537126678465
best_error: 15.40224163043773
best_error: 15.402241621399169
best_error: 15.395631806174503
best_error: 15.395631804080022
best_error: 15.392502032516422
best_error: 15.392502031402666
best_error: 15.382744309109537
best_error: 15.382744309109404
best_error: 15.382744309066732
best_error: 15.382744308946512
best_error: 15.368053850775238
best_error: 15.368053849486778
best_error: 15.329502739680517
best_error: 15.329502739669527
best_error: 15.329502739548847
best_error: 15.272377960299824
best_error: 15.272377960286265
best_error: 15.272377960150575
best_error: 14.803716255904899
best_error: 14.80371625587129
best_error: 14.803716255622513
best_error: 14.027582555579123
best_error: 14.027582555263061
best_error: 14.027582555158338
best_error: 14.027448782014627
best_error: 14.027448781621661
best_error: 14.027448781591355
best_error: 14.026905204721247
best_error: 14.026905204317124
best_error: 14.02690520428907
best_error: 14.026590968080447
best_error: 14.026590968011007
best_error: 14.026590967677452
best_error: 14.026285402317551
best_error: 14.026285402317322
best_error: 14.0262854022512
best_error: 14.02628540188936
best_error: 14.025373896790644
best_error: 14.025373896790535
best_error: 14.025373896719818
best_error: 14.025373896355056
best_error: 14.02363769985665
best_error: 14.023637699856202
best_error: 14.02363769977298
best_error: 14.023637699449566
best_error: 14.015158811820902
best_error: 14.01515881170887
best_error: 14.015158811414228
best_error: 13.978768810633682
best_error: 13.978768810350916
best_error: 13.97876881028343
best_error: 13.928027686361965
best_error: 13.92802768566418
best_error: 13.924049727572463
best_error: 13.924049726842947
best_error: 13.923567841250549
best_error: 13.923567841109865
best_error: 13.923567840508825
best_error: 13.923233127416776
best_error: 13.923233124445272
best_error: 13.922204689035343
best_error: 13.922204685979684
best_error: 13.917884126788511
best_error: 13.917884121682071
best_error: 13.897067091493138
best_error: 13.897067080843746
best_error: 13.832368602633768
best_error: 13.832368578471112
best_error: 13.815322110566978
best_error: 13.815322088940631
best_error: 13.790866995951092
best_error: 13.790866989710306
best_error: 13.781436944887332
best_error: 13.781436938104385
best_error: 13.75435802523978
best_error: 13.754358007738539
best_error: 13.622672594853988
best_error: 13.622672594440955
best_error: 13.62267253321834
best_error: 13.390650554760352
best_error: 13.390650554734114
best_error: 13.390650552371968
best_error: 13.369493256194326
best_error: 13.369493255473685
best_error: 13.369493255428264
best_error: 13.369315961809198
best_error: 13.369315961809193
best_error: 13.369315961807471
best_error: 13.369315961673623
best_error: 13.36714393953963
best_error: 13.367143939539629
best_error: 13.3671439395379
best_error: 13.367143939391442
best_error: 13.35957966822477
best_error: 13.359579666166454
best_error: 13.359579665041377
best_error: 13.32066262429996
best_error: 13.32066262361651
best_error: 13.32066260957687
best_error: 13.279660663687629
best_error: 13.279660651386159
best_error: 13.279660519683642
best_error: 13.259731385462336
best_error: 13.259731378609478
best_error: 13.259731301693272
best_error: 12.883271845059467
best_error: 12.883271829675119
best_error: 12.883271708153579
best_error: 12.80912606296781
best_error: 12.809126049859989
best_error: 12.809125953651835
best_error: 12.696227674262778
best_error: 12.696227673875605
best_error: 12.696227661393777
best_error: 12.69622766026642
best_error: 12.68916335408282
best_error: 12.689163353623327
best_error: 12.689163349866549
best_error: 12.689163343992874
best_error: 12.687412192767447
best_error: 12.687412192527455
best_error: 12.68741219016463
best_error: 12.68741218241543
best_error: 12.68200805769014
best_error: 12.682008057372853
best_error: 12.682008055185236
best_error: 12.682008045718224
best_error: 12.636567612759166
best_error: 12.636567612329102
best_error: 12.636567584805007
best_error: 12.631032518296033
best_error: 12.631032517314503
best_error: 12.631032501734484
best_error: 12.569325978763178
best_error: 12.569325978058238
best_error: 12.569325936091715
best_error: 12.521517243023276
best_error: 12.521517226401148
best_error: 12.521517104204566
best_error: 12.474651544273218
best_error: 12.474651540322167
best_error: 12.474651508375697
best_error: 12.433257306013829
best_error: 12.43325730587193
best_error: 12.433257283500527
best_error: 12.42836291226671
best_error: 12.428362912173345
best_error: 12.428362911080681
best_error: 12.405983872051367
best_error: 12.405983863317934
best_error: 12.310156974001746
best_error: 12.310156968035066
best_error: 12.31015689433923
best_error: 12.158129217801186
best_error: 12.158129216168263
best_error: 12.158129087761328
best_error: 12.079513528341929
best_error: 12.07951346475187
best_error: 12.07951344862489
best_error: 12.075859602675067
best_error: 12.075859531326715
best_error: 12.075859525569744
best_error: 12.058753107194445
best_error: 12.058753080459827
best_error: 12.058753067330409
best_error: 12.05763207702638
best_error: 12.057632064538666
best_error: 12.057632049121029
best_error: 12.057026849627311
best_error: 12.057026845193837
best_error: 12.057026828853902
best_error: 12.054057810703336
best_error: 12.054057802549444
best_error: 12.036027944780853
best_error: 12.036027944779635
best_error: 12.036027943150774
best_error: 12.036027941951842
best_error: 11.992316763892822
best_error: 11.992316763891415
best_error: 11.992316762192326
best_error: 11.992316760095152
best_error: 11.777437655779364
best_error: 11.777437655777184
best_error: 11.777437653623046
best_error: 11.777437646896493
best_error: 11.502240151405378
best_error: 11.502240149258533
best_error: 11.502240148454078
best_error: 11.502240144398067
best_error: 11.348035822295577
best_error: 11.348035820763897
best_error: 11.34803562880068
best_error: 11.289089308060063
best_error: 11.289089241547307
best_error: 11.267585096137744
best_error: 11.26758507513476
best_error: 11.22153389545392
best_error: 11.22153388112849
best_error: 11.204867739276882
best_error: 11.20486772681337
best_error: 11.191813513001643
best_error: 11.191813489944293
best_error: 11.173792159285977
best_error: 11.173792145735215
best_error: 11.160331853272245
best_error: 11.16033179771167
best_error: 11.150209139872238
best_error: 11.150209138523497
best_error: 11.15020912718635
