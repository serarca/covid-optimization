ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.910227243460458
best_error: 11.910227104100313
best_error: 10.677306753769697
best_error: 10.677306479064107
best_error: 8.331002107017804
best_error: 8.33100164958465
best_error: 7.260103469893678
best_error: 7.260103190513702
best_error: 7.0874939383068725
best_error: 7.087493718526628
best_error: 6.797915033378246
best_error: 6.797914830900899
best_error: 6.6362475350335455
best_error: 6.6362473363187515
best_error: 6.546759055720537
best_error: 6.5467588580086105
best_error: 6.509119298516913
best_error: 6.509119099730263
best_error: 6.484191988582978
best_error: 6.484191786541246
best_error: 6.47029790496657
best_error: 6.470297701127032
best_error: 6.460759142281573
best_error: 6.460758939764991
best_error: 6.43501918355263
best_error: 6.4350189215858
best_error: 5.329188057505744
best_error: 5.32918763419088
best_error: 5.312837999874494
best_error: 5.312837548646357
best_error: 5.2905663688457505
best_error: 5.2905659083989605
best_error: 5.166592769660678
best_error: 5.166592191563975
best_error: 4.970222496562977
best_error: 4.970221882975986
best_error: 4.925466707150411
best_error: 4.925466557415355
best_error: 4.898643501998771
best_error: 4.898642872884736
best_error: 4.897488772733687
best_error: 4.897488143410328
best_error: 4.8971359936460255
best_error: 4.897135364258746
best_error: 4.897105455701071
best_error: 4.897105305170811
best_error: 4.885215321649973
best_error: 4.885214772435481
best_error: 4.885078598145766
best_error: 4.88507801612557
best_error: 4.882401360478367
best_error: 4.882400785488929
best_error: 4.879837973478551
best_error: 4.87983778295487
best_error: 4.876711345713876
best_error: 4.8767111610569325
best_error: 4.834125790659389
best_error: 4.834125617940449
best_error: 4.823257241977803
best_error: 4.823257058068357
best_error: 4.810991816661502
best_error: 4.810991626197311
best_error: 4.769049880389441
best_error: 4.769049678626049
best_error: 4.768545222937471
best_error: 4.768544699033394
best_error: 4.764392411289088
best_error: 4.764392208179838
best_error: 4.763368815151671
best_error: 4.763368289906552
best_error: 4.7625892446183755
best_error: 4.762589041508283
best_error: 4.762544775459563
best_error: 4.762544249796469
best_error: 4.761039264066534
best_error: 4.761038729209655
best_error: 4.757195530556464
best_error: 4.757195329067139
best_error: 4.723013794049415
best_error: 4.723013252632976
best_error: 4.6690712887085795
best_error: 4.669071097314275
best_error: 4.668150190924294
best_error: 4.668149617614596
best_error: 4.638609316176046
best_error: 4.638608695750534
best_error: 4.623759992707113
best_error: 4.623759824951765
best_error: 4.617885583236287
best_error: 4.617884950710098
best_error: 4.584039789203418
best_error: 4.584039615257869
best_error: 4.582215508606037
best_error: 4.582214889027125
best_error: 4.558617977026534
best_error: 4.558617776143602
best_error: 4.4911852947116495
best_error: 4.491184758700179
best_error: 4.480298886107267
best_error: 4.480298689050377
best_error: 4.4601800107490455
best_error: 4.4601794807801305
best_error: 4.390116380259645
best_error: 4.390116191468211
best_error: 4.358347633519237
best_error: 4.35834744820057
best_error: 4.355833715724904
best_error: 4.355833530526643
best_error: 4.35304642734128
best_error: 4.353046240321839
best_error: 4.348241483433887
best_error: 4.348241300108509
best_error: 4.345001496771022
best_error: 4.345001320723565
best_error: 4.333959768246392
best_error: 4.333959186996523
best_error: 4.31466463107499
best_error: 4.314664464553085
best_error: 4.29692970668614
best_error: 4.296929257976957
best_error: 4.294398644125085
best_error: 4.294398481685775
best_error: 4.265932027679503
best_error: 4.265931858310129
best_error: 4.265906928295253
best_error: 4.265906464519315
best_error: 4.254143498151516
best_error: 4.254143031324972
best_error: 4.2304974582017385
best_error: 4.230496950723227
best_error: 4.185453035825766
best_error: 4.185452528263353
best_error: 4.184795454829788
best_error: 4.1847952988297425
best_error: 4.155976846566841
best_error: 4.1559766861463485
best_error: 4.147979069787393
best_error: 4.147978543926477
best_error: 4.147380630853862
best_error: 4.147380104903821
best_error: 4.147100726418273
best_error: 4.147100200426534
best_error: 4.146992007573248
best_error: 4.146991481565333
best_error: 4.146964808764084
best_error: 4.146964282752103
best_error: 4.146963777639975
best_error: 4.146963616763407
best_error: 4.146859168872855
best_error: 4.146858642828296
best_error: 4.146852076190002
best_error: 4.146851915272457
best_error: 4.146850505600138
best_error: 4.146849979554264
best_error: 4.146842000433644
best_error: 4.146841474386463
best_error: 4.146840959510381
best_error: 4.146840653638289
