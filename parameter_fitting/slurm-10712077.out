ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.067985457890472
best_error: 10.067985346672266
best_error: 9.62459043019351
best_error: 9.624590293867717
best_error: 9.106193755425045
best_error: 9.10619359330091
best_error: 8.90243371595161
best_error: 8.902433541599933
best_error: 8.591073070383322
best_error: 8.591072893586075
best_error: 8.484403205562522
best_error: 8.484403073282586
best_error: 7.88661888797612
best_error: 7.886618782377736
best_error: 7.886618773315525
best_error: 7.525404677182209
best_error: 7.525404575337917
best_error: 7.525404552125035
best_error: 7.3124613586445335
best_error: 7.312461268618626
best_error: 7.312461227711445
best_error: 7.115677621137693
best_error: 7.1156775461962845
best_error: 7.115677485345009
best_error: 6.957201498301289
best_error: 6.95720135333419
best_error: 6.791117550583146
best_error: 6.791117469360312
best_error: 6.791117416129493
best_error: 6.5745230961434284
best_error: 6.574523005146513
best_error: 6.574522962484518
best_error: 6.525096183494172
best_error: 6.525096090454092
best_error: 6.525096050157229
best_error: 6.514140886883863
best_error: 6.514140744872757
best_error: 6.512114574180826
best_error: 6.51211448111168
best_error: 6.512114440845673
best_error: 6.5119626645202695
best_error: 6.511962522500239
best_error: 5.411471734155715
best_error: 5.411471059628999
best_error: 4.712232973940899
best_error: 4.712232682226326
best_error: 4.596334071768575
best_error: 4.596333747945857
best_error: 4.36765679361023
best_error: 4.36765642257585
best_error: 3.930111475721994
best_error: 3.9301111637681663
best_error: 3.864456150633867
best_error: 3.8644558614157374
best_error: 3.686424846099383
best_error: 3.6864245370863324
best_error: 3.2488427874890533
best_error: 3.2488424165870082
best_error: 3.179259407200205
best_error: 3.179258961976365
best_error: 3.1413373113556116
best_error: 3.1413368947674103
best_error: 3.134951946185922
best_error: 3.13495154033581
best_error: 3.12476421634918
best_error: 3.1247638066323375
best_error: 3.089866163372011
best_error: 3.089865747987342
best_error: 2.9586368706386565
best_error: 2.9586364658105344
best_error: 2.927258857741667
best_error: 2.927258453790498
best_error: 2.915502576717615
best_error: 2.915502174060474
best_error: 2.910157954494749
best_error: 2.9101575511893136
best_error: 2.9073574597396714
best_error: 2.9073570580817947
best_error: 2.9069670263009755
best_error: 2.9069670262343568
best_error: 2.9069669134818668
best_error: 2.906425200721574
best_error: 2.9064248001991952
best_error: 2.905363484069423
best_error: 2.905363083412512
best_error: 2.9052117542960687
best_error: 2.905211353619947
best_error: 2.9051111010132384
best_error: 2.905110700324366
best_error: 2.9050697810688324
best_error: 2.90506938037473
best_error: 2.905064809752335
best_error: 2.9050648096857223
best_error: 2.9050646969640432
best_error: 2.905064205227661
best_error: 2.905063804532893
best_error: 2.9050637956828393
best_error: 2.9050637846172456
best_error: 2.9050637834795556
best_error: 2.905063773104252
best_error: 2.905063762038653
best_error: 2.9050637601739937
best_error: 2.9050637491084172
best_error: 2.9050637386135554
best_error: 2.905063696941581
best_error: 2.9050636945113237
best_error: 2.905063694393778
best_error: 2.905048567733959
best_error: 2.9050485676673263
best_error: 2.905048454941988
best_error: 2.904842268865041
best_error: 2.9048422687984057
best_error: 2.904306004632816
best_error: 2.904306004565936
best_error: 2.9037559326641738
best_error: 2.903755530646813
best_error: 2.9017295305494124
best_error: 2.9017291176764726
best_error: 2.9009159553976374
best_error: 2.9009155469677763
best_error: 2.9000049066269544
best_error: 2.9000045092546483
best_error: 2.894608338481963
best_error: 2.894607927791003
best_error: 2.894592156222606
best_error: 2.894591745414155
best_error: 2.8945627792037834
best_error: 2.8945623674496
best_error: 2.8936495096016683
best_error: 2.8936490984755747
best_error: 2.891437401474695
best_error: 2.8914374014097244
best_error: 2.8914372885138557
best_error: 2.8908953469643905
best_error: 2.8908949404636815
best_error: 2.8907183192703263
best_error: 2.8907179127498734
best_error: 2.890664808135552
best_error: 2.890664401609134
best_error: 2.8906530559080226
best_error: 2.890652649380292
best_error: 2.8906457837643984
best_error: 2.8906453772358596
best_error: 2.8906428326773175
best_error: 2.8906424261484522
best_error: 2.8906423757988273
best_error: 2.8906423719183802
best_error: 2.8906423520093494
best_error: 2.8906422559054965
best_error: 2.890642197689357
best_error: 2.8906421938101143
best_error: 2.890642173899429
best_error: 2.8906420931683
best_error: 2.8906420892893343
best_error: 2.8906420696057733
best_error: 2.8906420653982066
best_error: 2.8906420653330964
best_error: 2.890614363868597
best_error: 2.890613955889388
best_error: 2.890609696191893
best_error: 2.890609288169145
best_error: 2.890608919276308
best_error: 2.8906004903191116
best_error: 2.8906004902499967
best_error: 2.8906003774311086
best_error: 2.8905916648942327
best_error: 2.890591664826518
best_error: 2.8905915520036065
best_error: 2.89059026506452
best_error: 2.890590264996761
best_error: 2.890590126319399
best_error: 2.890590126251645
best_error: 2.890590121894172
best_error: 2.8905901182562275
