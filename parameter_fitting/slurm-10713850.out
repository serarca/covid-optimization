ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.700096442792097
best_error: 11.700096430484212
best_error: 11.700096408251998
best_error: 11.558856613867743
best_error: 11.558856598012992
best_error: 11.558856571471951
best_error: 9.401394384271494
best_error: 9.40139429932163
best_error: 9.078717233672247
best_error: 9.078717140385734
best_error: 9.052735266043339
best_error: 9.052735171269003
best_error: 8.147537539635563
best_error: 8.147537412191145
best_error: 7.99292312978033
best_error: 7.992923083511445
best_error: 7.992923059386866
best_error: 7.355557181264938
best_error: 7.355557142694563
best_error: 7.355557096435471
best_error: 7.223542082628155
best_error: 7.223542082625439
best_error: 7.167609914910539
best_error: 7.167609882201468
best_error: 7.167609826844478
best_error: 6.752985647513372
best_error: 6.752985646114201
best_error: 6.752985554053277
best_error: 3.43663046486031
best_error: 3.436630289773788
best_error: 3.21509983149986
best_error: 3.215099659887284
best_error: 3.1217223020563303
best_error: 3.1217221265501163
best_error: 3.1151831780152426
best_error: 3.115183178012485
best_error: 3.100041423223156
best_error: 3.1000412460503806
best_error: 3.0814185584022997
best_error: 3.0814183815007743
best_error: 3.073678761967152
best_error: 3.073678584497263
best_error: 3.0731277232691636
best_error: 3.0731277232664063
best_error: 3.038956113128882
best_error: 3.0389559246041378
best_error: 2.954064271685691
best_error: 2.9540640565139555
best_error: 2.7413790742062023
best_error: 2.7413790742034805
best_error: 2.702582973096429
best_error: 2.7025827488677994
best_error: 2.576067375971744
best_error: 2.5760671411888776
best_error: 2.5625739312275435
best_error: 2.5625739312248905
best_error: 2.5188515666052185
best_error: 2.518851299623184
best_error: 2.431408168109238
best_error: 2.431407818234865
best_error: 2.375566107937826
best_error: 2.375565759890093
best_error: 2.369868422844048
best_error: 2.369868074347946
best_error: 2.369212962199212
best_error: 2.369212962196816
best_error: 2.3686576863081417
best_error: 2.368657342109505
best_error: 2.3595925523973054
best_error: 2.3595922290942637
best_error: 2.35572781196039
best_error: 2.355727487540036
best_error: 2.353188055885136
best_error: 2.3531880558827334
best_error: 2.34957210151257
best_error: 2.3495721015101054
best_error: 2.3428974662118383
best_error: 2.3428974662093958
best_error: 2.3281808055058693
best_error: 2.328180805503437
best_error: 2.3230534960671037
best_error: 2.3230531454425147
best_error: 2.3182946998196945
best_error: 2.318294699817379
best_error: 2.3156496489014144
best_error: 2.3156492838177227
best_error: 2.3137165867458824
best_error: 2.3137165867434284
best_error: 2.310443661898807
best_error: 2.3104436618963797
best_error: 2.3086928726576996
best_error: 2.3086925457550094
best_error: 2.290027231781545
best_error: 2.2900272317790673
best_error: 2.270650262017386
best_error: 2.2706502620149323
best_error: 2.2563072203439525
best_error: 2.256306862446129
best_error: 2.1680298938503215
best_error: 2.1680295155982376
best_error: 2.1304107664773166
best_error: 2.1304107664749057
best_error: 2.1304106219621817
best_error: 2.1252303936741006
best_error: 2.1252299992892087
best_error: 2.1093426876011163
best_error: 2.1093422914591438
best_error: 2.109005392877221
best_error: 2.1090053928748724
best_error: 2.1090052490733817
best_error: 2.108412387112565
best_error: 2.108411990815359
best_error: 2.1070336558854335
best_error: 2.1070336558830256
best_error: 2.1070335120156294
best_error: 2.1068962053000027
best_error: 2.1068958087580807
best_error: 2.104698869522755
best_error: 2.1046984683876984
best_error: 2.103453602098651
best_error: 2.103453200588027
best_error: 2.102767857518466
best_error: 2.1027674552593716
best_error: 2.1023078518766054
best_error: 2.102307449597741
best_error: 2.1020946133991387
best_error: 2.1020942111642675
best_error: 2.1020802802891865
best_error: 2.102079878057701
best_error: 2.1020786622807175
best_error: 2.102078574386514
best_error: 2.102078504310001
best_error: 2.1020565951014456
best_error: 2.102056595099085
best_error: 2.1020564508056703
best_error: 2.102016567343611
best_error: 2.10201616696582
best_error: 2.1017424386729138
best_error: 2.1017424386705006
best_error: 2.101742294357998
best_error: 2.1015817717534695
best_error: 2.1015817717510905
best_error: 2.1015816274137205
best_error: 2.1015813843128948
best_error: 2.101556130581495
best_error: 2.101555731123698
best_error: 2.1015120201213002
best_error: 2.1015120201188866
best_error: 2.1015118757550564
best_error: 2.1014267130435633
best_error: 2.101426713041219
best_error: 2.101426568686598
best_error: 2.101394332137721
best_error: 2.101394332135328
best_error: 2.1013941877670583
best_error: 2.1013625632561004
best_error: 2.10136256325369
best_error: 2.1013624188836904
best_error: 2.101239858854103
best_error: 2.1012394628339095
best_error: 2.101196906817057
best_error: 2.1011969068146583
best_error: 2.101196762377575
best_error: 2.101165956185995
best_error: 2.1011655601867254
best_error: 2.101154863537698
best_error: 2.1011544675684917
best_error: 2.1010768677040508
best_error: 2.1010768677016562
best_error: 2.1010767231535543
best_error: 2.1010637912240573
best_error: 2.1010633909664485
best_error: 2.1010433011485325
best_error: 2.1010429041935663
