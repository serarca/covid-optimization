ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.08112723003736
best_error: 11.081127151935608
best_error: 11.08112714265356
best_error: 10.361637034600651
best_error: 10.361636912665277
best_error: 9.551040901871705
best_error: 9.551040740290993
best_error: 9.100875863370756
best_error: 9.100875696694382
best_error: 8.713809815700847
best_error: 8.713809671798355
best_error: 8.202090060344965
best_error: 8.202089976574811
best_error: 8.202089932483034
best_error: 7.752945826921839
best_error: 7.752945733362884
best_error: 7.75294569532543
best_error: 7.404708081943548
best_error: 7.404708001409384
best_error: 7.404707944829625
best_error: 7.154323758575176
best_error: 7.154323685815507
best_error: 7.1543236176894265
best_error: 7.013068296991327
best_error: 7.013068224467451
best_error: 7.013068153703006
best_error: 6.951481076105369
best_error: 6.951481003121298
best_error: 6.951480933538738
best_error: 6.9048936383333555
best_error: 6.904893562133437
best_error: 6.90489349508309
best_error: 6.884034136960738
best_error: 6.8840340609451465
best_error: 6.884033993285035
best_error: 6.8625591191118716
best_error: 6.862559042191676
best_error: 6.86255897508102
best_error: 6.854373040378937
best_error: 6.854372963784561
best_error: 6.854372896178692
best_error: 6.8519269583321005
best_error: 6.851926881519692
best_error: 6.851926814098402
best_error: 6.851323029287202
best_error: 6.851322952420988
best_error: 6.8513228850452235
best_error: 6.850726600668678
best_error: 6.85072652374933
best_error: 6.850726456418551
best_error: 6.850612213641025
best_error: 6.8506121367115025
best_error: 6.850612069389337
best_error: 6.850550889922409
best_error: 6.850550812987414
best_error: 6.850550745669888
best_error: 6.850512288029312
best_error: 6.850512211090874
best_error: 6.850512143776256
best_error: 6.85049060000213
best_error: 6.8504905230617545
best_error: 6.8504904557487745
best_error: 6.850476862200042
best_error: 6.850476785258446
best_error: 6.850476717946488
best_error: 6.8504694090657186
best_error: 6.850469332123458
best_error: 6.850469264812049
best_error: 6.85046475268692
best_error: 6.850464675744251
best_error: 6.850464608433238
best_error: 6.850462107535428
best_error: 6.850462030592515
best_error: 6.850461963281699
best_error: 6.850460506640676
best_error: 6.850460429697624
best_error: 6.8504603623868885
best_error: 6.850459555765852
best_error: 6.85045947882271
best_error: 6.850459411512053
best_error: 6.850459000163576
best_error: 6.850458923220392
best_error: 6.85045885590977
best_error: 6.85045857755032
best_error: 6.850458500607098
best_error: 6.850458433296513
best_error: 6.850458248087616
best_error: 6.850458103833795
best_error: 5.55559569737059
best_error: 5.55559551732477
best_error: 5.012764258884163
best_error: 5.012763925710287
best_error: 4.977876170813779
best_error: 4.977875848284048
best_error: 4.858993803489095
best_error: 4.85899351854362
best_error: 4.742829179184016
best_error: 4.74282890530914
best_error: 4.648454304164304
best_error: 4.6484540402356735
best_error: 4.583517507164382
best_error: 4.583517258185828
best_error: 4.578827148434633
best_error: 4.578826899911184
best_error: 4.577074819508265
best_error: 4.577074570713038
best_error: 4.576523589948106
best_error: 4.576523341067517
best_error: 4.576159405381075
best_error: 4.576159156444136
best_error: 4.575546385785719
best_error: 4.575546136753994
best_error: 4.575309645177921
best_error: 4.575309396109617
best_error: 4.575195445167723
best_error: 4.57519519608177
best_error: 4.574876096114456
best_error: 4.574875846978097
best_error: 4.574865043440572
best_error: 4.574864794302458
best_error: 4.574855042011672
best_error: 4.57485479287198
best_error: 4.574850228849919
best_error: 4.574849979709448
best_error: 4.57484758653489
best_error: 4.57484741403068
best_error: 4.105379716509745
best_error: 4.105379373504431
best_error: 3.6990532335729864
best_error: 3.6990525748041208
best_error: 3.6777162728329467
best_error: 3.6777161783331063
best_error: 3.677716127859176
best_error: 3.6629136589901146
best_error: 3.6629135443040406
best_error: 3.3903012740480216
best_error: 3.390300799681988
best_error: 3.249758029543434
best_error: 3.2497576043534857
best_error: 3.0851468758957545
best_error: 3.085146857582851
best_error: 3.0035321483184885
best_error: 3.0035317860609942
best_error: 2.859583594804076
best_error: 2.8595832414501356
best_error: 2.857826317362258
best_error: 2.857825969498688
best_error: 2.784853719468029
best_error: 2.7848533518870346
best_error: 2.7194115555489757
best_error: 2.7194115555348386
best_error: 2.719411423310047
best_error: 2.6810960476143704
best_error: 2.6810956776856054
best_error: 2.625788002471671
best_error: 2.6257876540521696
best_error: 2.612807733269465
best_error: 2.6128077332551123
best_error: 2.612807600426927
best_error: 2.561518997339337
best_error: 2.5615186359539246
best_error: 2.551025320063065
best_error: 2.5510249581191804
best_error: 2.548362361073065
best_error: 2.5483623610587043
best_error: 2.5483622294027297
best_error: 2.5473283093454335
best_error: 2.547327948116692
best_error: 2.5472386656862365
best_error: 2.5472383044466334
best_error: 2.5472193259480678
best_error: 2.547218964706116
best_error: 2.547212430722678
best_error: 2.5472120694798996
best_error: 2.5472079494897386
best_error: 2.547207588246416
best_error: 2.5472060313035696
best_error: 2.5472056700600127
best_error: 2.5472054345084603
best_error: 2.547205073264843
best_error: 2.5472050418845393
best_error: 2.5472050366164742
