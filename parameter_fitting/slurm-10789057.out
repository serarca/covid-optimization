ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.44547956037109
best_error: 10.445479557180606
best_error: 6.623695792366118
best_error: 6.623695456774763
best_error: 3.621455801921151
best_error: 3.621455723525686
best_error: 2.786088843769993
best_error: 2.786088619475116
best_error: 2.758138162755138
best_error: 2.7581379403129653
best_error: 2.742173371405886
best_error: 2.742173148481286
best_error: 2.7328700055935906
best_error: 2.732869783738975
best_error: 2.7278458647292014
best_error: 2.7278456431944718
best_error: 2.7249096809097155
best_error: 2.724909459107803
best_error: 2.723063475247514
best_error: 2.7230632542444306
best_error: 2.7221161942299457
best_error: 2.722115973140756
best_error: 2.7211149258237635
best_error: 2.7211147045977984
best_error: 2.7209681535191255
best_error: 2.720967932273097
best_error: 2.7208889843277877
best_error: 2.72088876307095
best_error: 2.720845059161209
best_error: 2.7208448378983734
best_error: 2.7208182052711067
best_error: 2.7208179840046065
best_error: 2.7208006805903975
best_error: 2.7208004593215067
best_error: 2.7207944988815775
best_error: 2.7207942776118363
best_error: 2.7207905506885206
best_error: 2.720790329418236
best_error: 2.720788598511684
best_error: 2.720788377241132
best_error: 2.7207872249082605
best_error: 2.7207870036375223
best_error: 2.720786606371128
best_error: 2.7207863851003076
best_error: 2.720786130787826
best_error: 2.720786129910323
best_error: 2.720786128966056
best_error: 2.720786128088549
best_error: 2.7207861276265017
best_error: 2.7207861267489966
best_error: 2.7207861240972546
best_error: 2.7207861230244283
best_error: 2.7121122582813255
best_error: 2.7121120305576993
best_error: 2.685699344711006
best_error: 2.6856990815278743
best_error: 2.6688210993952888
best_error: 2.6688210314456953
best_error: 2.6459656702769596
best_error: 2.6459656068866417
best_error: 2.6452012230570414
best_error: 2.6452009287437717
best_error: 2.63755968606848
best_error: 2.637559626082244
best_error: 2.603510210776073
best_error: 2.6035101592088488
best_error: 2.1957007106113817
best_error: 2.1957004751096436
best_error: 2.1754317014505373
best_error: 2.175431455695694
best_error: 2.1745354772748073
best_error: 2.1745354760933155
best_error: 2.1745354696961803
best_error: 2.1723071320531337
best_error: 2.1723068815411386
best_error: 2.1671100921486484
best_error: 2.1671098190963476
best_error: 2.158592923877583
best_error: 2.158592917096219
best_error: 2.147632811920904
best_error: 2.1476328049275724
best_error: 2.1057126744141033
best_error: 2.1057124197243695
best_error: 2.105443458566863
best_error: 2.105443203852156
best_error: 2.1052409094710236
best_error: 2.1052406547375133
best_error: 2.105132551021076
best_error: 2.1051322962774934
best_error: 2.105077686193435
best_error: 2.105077431444774
best_error: 2.1050424779200307
best_error: 2.1050422231680885
best_error: 2.1050264156306335
best_error: 2.1050261608772054
best_error: 2.1050147147261757
best_error: 2.105014459971672
best_error: 2.1050127377538925
best_error: 2.1050124829992
best_error: 2.1050122810075687
best_error: 2.105012273179063
best_error: 2.1050120640591956
best_error: 2.1050116589075163
best_error: 2.1050116589017307
best_error: 2.1050116563804964
best_error: 2.1050116315488485
best_error: 2.1050113936540757
best_error: 2.105011385825601
best_error: 2.098464948581835
best_error: 2.0984647041357274
best_error: 2.0980704532416152
best_error: 2.0980702140652063
best_error: 2.0976837879624126
best_error: 2.0976835462437924
best_error: 2.095451373243698
best_error: 2.0954511299771594
best_error: 2.089182313662641
best_error: 2.0891820601766447
best_error: 2.080305124275392
best_error: 2.0803048642232698
best_error: 2.0747866717798793
best_error: 2.0747866523524316
best_error: 2.058650264063124
best_error: 2.0461685924361293
best_error: 2.046168574364609
best_error: 2.0461683598950025
best_error: 2.042466142197135
best_error: 2.0424661265608846
best_error: 2.0424659073398517
best_error: 2.041960369496687
best_error: 2.041960353874999
best_error: 2.0419601345536016
best_error: 2.0418868450180545
best_error: 2.041886829398476
best_error: 2.0418866100624973
best_error: 2.0418756906198396
best_error: 2.041868442064317
best_error: 2.041868426448798
best_error: 2.0418682071017646
best_error: 2.041866051828718
best_error: 2.0418658570385304
best_error: 2.041865841423082
best_error: 2.0418656220755427
best_error: 2.0418643122242157
best_error: 2.0418642966087974
best_error: 2.041864284542185
best_error: 2.041864232040119
best_error: 2.0418442860511608
best_error: 2.041844270531781
best_error: 2.041844050979922
best_error: 2.041840071786895
best_error: 2.0418389150714535
best_error: 2.041838899552262
best_error: 2.041838893325787
