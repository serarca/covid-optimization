ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 90
days_switch 85
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 97.88724206777049
best_error: 97.88724193963641
best_error: 13.459965196180956
best_error: 13.45996519617113
best_error: 13.459965167864066
best_error: 13.330608417849934
best_error: 13.330608417838613
best_error: 13.330608385438707
best_error: 12.568374713848357
best_error: 12.568374713779203
best_error: 12.568374653008576
best_error: 12.299991026453139
best_error: 12.29999102632257
best_error: 12.299990949417444
best_error: 11.926054318190058
best_error: 11.926054317932799
best_error: 11.926054218689005
best_error: 11.608604506911975
best_error: 11.608604506321281
best_error: 11.608604480719453
best_error: 11.596658909814751
best_error: 11.596658901638039
best_error: 11.573973790064466
best_error: 11.573973789304954
best_error: 11.5739737884292
best_error: 11.569804681888362
best_error: 11.569804681138335
best_error: 11.569804680304527
best_error: 11.557970220414905
best_error: 11.557970206279995
best_error: 11.557970205337622
best_error: 11.54017574070644
best_error: 11.540175737565447
best_error: 11.540175733728558
best_error: 11.506752324710842
best_error: 11.50675232289252
best_error: 11.506752322104127
best_error: 11.490079474992204
best_error: 11.490079472445254
best_error: 11.457508403865587
best_error: 11.457508400884105
best_error: 11.413233212349008
best_error: 11.413233207894063
best_error: 11.412228586120127
best_error: 11.412228581655706
best_error: 11.411430631783773
best_error: 11.411430627215175
best_error: 11.410581251768859
best_error: 11.410581247091331
best_error: 11.392481638875525
best_error: 11.392481633846748
best_error: 11.391212903189299
best_error: 11.391212898964259
best_error: 11.317855414879691
best_error: 11.317855411682997
best_error: 11.317855411355941
best_error: 11.076985955640694
best_error: 11.07698595561158
best_error: 11.076985949975
best_error: 10.919119765664078
best_error: 10.919119756735592
best_error: 10.919119742664394
best_error: 10.701177623383941
best_error: 10.701177608955307
best_error: 10.660769168539115
best_error: 10.660769152839267
best_error: 10.643707539533466
best_error: 10.643707531284724
best_error: 10.643707525564036
best_error: 10.579434703210257
best_error: 10.579434674566455
best_error: 10.421099146002444
best_error: 10.421099086625631
best_error: 10.179174502795107
best_error: 10.179174481207271
best_error: 10.1633484711884
best_error: 10.163348467754671
best_error: 10.163348451272181
best_error: 10.103069032256123
best_error: 10.103069023442014
best_error: 10.103069013069224
best_error: 10.103069012848257
best_error: 10.0243672635833
best_error: 10.024367255653775
best_error: 10.02436724297139
best_error: 10.016595767788706
best_error: 10.016595760014496
best_error: 10.0165957468512
best_error: 10.016100370978117
best_error: 10.016100305397524
best_error: 10.015970418035234
best_error: 10.015970410273185
best_error: 10.015970397070737
best_error: 10.015743372629505
best_error: 10.015743307066579
best_error: 10.015698570740986
best_error: 10.015698505180257
best_error: 9.882273405818818
best_error: 9.882273340350068
best_error: 9.619067110920493
best_error: 9.619067048708338
best_error: 9.01778149662209
best_error: 9.01778146252478
best_error: 8.739465172512228
best_error: 8.739464677006692
best_error: 8.624105944301174
best_error: 8.624105857219682
best_error: 8.418951638422664
best_error: 8.418951199881098
best_error: 8.255759283943055
best_error: 8.255759242087796
best_error: 8.249645409991626
best_error: 8.249645374472149
best_error: 8.24561262218848
best_error: 8.245612585723821
best_error: 8.242022401542343
best_error: 8.242022372864026
best_error: 8.238257270226988
best_error: 8.238257252552053
best_error: 8.238257251300483
best_error: 8.236418414040223
best_error: 8.236418400317874
best_error: 8.236416039461453
best_error: 8.236416025738276
best_error: 8.236413713153125
best_error: 8.23641369942916
best_error: 8.236412466470775
best_error: 8.236412452746377
best_error: 8.236411247599392
best_error: 8.236411233874579
best_error: 8.23641053563119
best_error: 8.236410521906118
best_error: 8.236409842927822
best_error: 8.236409829202525
best_error: 8.236409332219505
best_error: 8.236409318494038
best_error: 8.23640884399184
best_error: 8.236408830266196
best_error: 8.236407626243277
best_error: 8.23640761251722
best_error: 8.236406520732913
best_error: 8.236406507006478
best_error: 8.23639938667044
best_error: 8.236399372941571
best_error: 8.23639931840265
best_error: 8.236399304673721
best_error: 8.236399251848862
best_error: 8.236399238119928
best_error: 8.224971323026423
best_error: 8.224971283198245
best_error: 8.187847384677369
best_error: 8.18784733065798
best_error: 8.166915786467786
best_error: 8.166915707543975
best_error: 8.15503130399686
best_error: 8.155030831800543
best_error: 7.967636430079509
best_error: 7.967636367991633
best_error: 7.948641468114554
best_error: 7.948641411331738
best_error: 7.928089899516664
best_error: 7.928089897309078
best_error: 7.928089897025661
best_error: 7.928089895237344
best_error: 7.928089890256363
best_error: 7.927807007089909
best_error: 7.927807006054086
best_error: 7.927807004971067
best_error: 7.927807004714407
best_error: 7.9278070019650455
best_error: 7.927806997527514
best_error: 7.926819613818612
best_error: 7.926819612047018
best_error: 7.9268196097567065
best_error: 7.926819607957448
best_error: 7.9268196039692285
best_error: 7.921371047264767
best_error: 7.921371045720843
best_error: 7.921371042177823
best_error: 7.921371040880513
best_error: 7.921371036830134
best_error: 7.8998526341388615
best_error: 7.899852633424739
best_error: 7.8998526255991095
best_error: 7.899852625488968
best_error: 7.899852623177527
best_error: 7.859876814020666
best_error: 7.859876809485298
best_error: 7.859876806652755
best_error: 7.85987680353764
best_error: 7.795960051425244
best_error: 7.79595955484755
best_error: 7.794921087694152
best_error: 7.794920596945502
best_error: 7.766878139332243
best_error: 7.766878110677829
best_error: 7.729739340609509
best_error: 7.729739296900711
best_error: 7.667656701579903
best_error: 7.66765667136654
best_error: 7.653210409407681
best_error: 7.653210407917465
best_error: 7.653210391395223
best_error: 7.648058080253124
best_error: 7.648058077758284
best_error: 7.648058069977786
best_error: 7.64585085477621
best_error: 7.645850851370161
best_error: 7.645850851334361
best_error: 7.645850846731106
best_error: 7.6457961322449
best_error: 7.645796128756522
best_error: 7.645796124207454
best_error: 7.645631612210793
best_error: 7.645631607521177
best_error: 7.645631604979788
best_error: 7.645611915549679
best_error: 7.64561191086327
best_error: 7.645611908316951
best_error: 7.645600975080036
best_error: 7.6456009703953836
best_error: 7.645600967846349
best_error: 7.645599580571364
best_error: 7.645599575886945
best_error: 7.645599573337556
