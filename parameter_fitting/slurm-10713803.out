ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.181394405277754
best_error: 12.181394378820121
best_error: 12.181394352051155
best_error: 12.057832870989763
best_error: 12.057832838548682
best_error: 12.057832808309088
best_error: 10.842671931826173
best_error: 10.842671827425864
best_error: 10.8426717720594
best_error: 9.504180532341202
best_error: 9.50418036204117
best_error: 9.135846101091003
best_error: 9.13584592969611
best_error: 9.11405712061369
best_error: 9.114056952566239
best_error: 8.239713924660693
best_error: 8.239713723244757
best_error: 7.852272144021202
best_error: 7.85227199642366
best_error: 6.944550119559952
best_error: 6.944549955651052
best_error: 6.302933210425731
best_error: 6.302933053545459
best_error: 5.216369378600405
best_error: 5.216369121210257
best_error: 4.309738165705616
best_error: 4.30973772560618
best_error: 3.8749945707835662
best_error: 3.874994276495422
best_error: 3.7634118636333165
best_error: 3.7634115814278624
best_error: 3.706668500754358
best_error: 3.7066682169710896
best_error: 3.6714139410799267
best_error: 3.671413657910948
best_error: 3.6557701509564993
best_error: 3.6557698682109887
best_error: 3.6475567707329857
best_error: 3.6475564878291706
best_error: 3.6468272027501922
best_error: 3.646826919765707
best_error: 3.6462232115760527
best_error: 3.6462229285247902
best_error: 3.645938219238179
best_error: 3.6459379372850487
best_error: 3.6457709250392307
best_error: 3.6457706430675922
best_error: 3.6456521966346864
best_error: 3.6456519146460744
best_error: 3.6456206654682517
best_error: 3.6456203834751175
best_error: 3.645600632769999
best_error: 3.645600350774
best_error: 3.6455973887289654
best_error: 3.6455971067324997
best_error: 3.645596364730355
best_error: 3.645596208483809
best_error: 3.6141841583715593
best_error: 3.6141840600176462
best_error: 3.4237959240781732
best_error: 3.4237953949709894
best_error: 3.32737830721139
best_error: 3.3273782197446535
best_error: 3.3253139322587675
best_error: 3.3253134374544913
best_error: 3.314338178475603
best_error: 3.314337707614591
best_error: 3.3108229853399416
best_error: 3.3108228983972494
best_error: 3.2793990107045565
best_error: 3.279398929260217
best_error: 3.1708816446204344
best_error: 3.1708815946318074
best_error: 3.1576406778935198
best_error: 3.1576400526985213
best_error: 2.853750429331573
best_error: 2.8537498460653437
best_error: 2.773161627658923
best_error: 2.7731610619513543
best_error: 2.7646541542394862
best_error: 2.7646535971032518
best_error: 2.4969692630053637
best_error: 2.49696876590066
best_error: 2.302505140966014
best_error: 2.302505140965712
best_error: 2.3025049566544635
best_error: 2.2942044448360877
best_error: 2.294203977536748
best_error: 2.270388211160518
best_error: 2.270387743700116
best_error: 2.267135378902175
best_error: 2.267135378901856
best_error: 2.2671351952532453
best_error: 2.2661220556068464
best_error: 2.266121591341811
best_error: 2.265860468908029
best_error: 2.2658600046169735
best_error: 2.26579561751022
best_error: 2.265795617509908
best_error: 2.2657954338972757
best_error: 2.265788717571429
best_error: 2.265788253273231
best_error: 2.265786565143973
best_error: 2.2657861008455686
best_error: 2.265786009606483
best_error: 2.26578596911664
best_error: 2.2656617559912364
best_error: 2.2656612880575038
best_error: 2.2651990127721167
best_error: 2.265198544642497
best_error: 2.261824551661121
best_error: 2.2618240763106017
best_error: 2.260393180084292
best_error: 2.2603927013968086
best_error: 2.2589062043648473
best_error: 2.258905712532238
best_error: 2.2581834518934953
best_error: 2.2581829591799325
best_error: 2.2493053168075043
best_error: 2.2493048094153165
best_error: 2.132802808938566
best_error: 2.132802311566253
best_error: 2.103847031493923
best_error: 2.1038465526743435
best_error: 2.1038346181184124
best_error: 2.1038341400480878
best_error: 2.103751250213312
best_error: 2.103750772104802
best_error: 2.037341601625597
best_error: 2.0373411267326573
best_error: 2.029589380475561
best_error: 2.029588905876789
best_error: 2.026361536157511
best_error: 2.0263610611965346
best_error: 2.026009849988637
best_error: 2.0260098499883457
best_error: 2.026009667555086
best_error: 2.0250539529102416
best_error: 2.0250534778093927
best_error: 2.0241082881290047
best_error: 2.024108288128744
best_error: 2.024108105822252
best_error: 2.0218925519598545
best_error: 2.0218920789623303
best_error: 2.0216670662691043
best_error: 2.021666593527051
best_error: 2.0209152264914607
best_error: 2.0209147594330177
best_error: 2.019312069170023
best_error: 2.019312069169777
best_error: 2.019311887260428
best_error: 2.0185025081018373
best_error: 2.018502508101597
best_error: 2.0185023261712827
best_error: 2.0177851956053283
best_error: 2.01778472880204
best_error: 2.0149745426116707
best_error: 2.0149745426114865
best_error: 2.0149743606916304
best_error: 2.0145459907644074
best_error: 2.014545990764214
