ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 90
days_switch 50
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 99.28904315224969
best_error: 99.28904304676207
best_error: 99.28904299065968
best_error: 16.98834557279011
best_error: 16.988345275216457
best_error: 16.98834320299469
best_error: 13.65044742537054
best_error: 13.650447425001401
best_error: 13.650447390586775
best_error: 13.586316116205388
best_error: 13.586316115809177
best_error: 13.586316078655685
best_error: 13.283654122048636
best_error: 13.283654121586517
best_error: 13.283654070707877
best_error: 9.967974037729924
best_error: 9.967973771784473
best_error: 9.543692395408941
best_error: 9.543692243819123
best_error: 9.459434577276271
best_error: 9.45943446870193
best_error: 9.402808371916274
best_error: 9.402808315316157
best_error: 9.394701602664744
best_error: 9.394701561687818
best_error: 9.38416754186994
best_error: 9.384167539758561
best_error: 9.38416753747594
best_error: 9.38416752854277
best_error: 9.38309272256805
best_error: 9.383092696994
best_error: 9.37159376314176
best_error: 9.371593761117024
best_error: 9.371593758753406
best_error: 9.371593749923042
best_error: 9.329718560069375
best_error: 9.329718558478481
best_error: 9.329718555510583
best_error: 9.329718547096293
best_error: 9.159210461034833
best_error: 9.159210456653007
best_error: 9.15921045572148
best_error: 9.159210449239222
best_error: 8.375049403988326
best_error: 8.37504932348389
best_error: 7.9452560150601395
best_error: 7.945255852097611
best_error: 7.917546621380952
best_error: 7.917546473964842
best_error: 7.814493573070746
best_error: 7.814493450490789
best_error: 7.611453414297907
best_error: 7.611453414295761
best_error: 7.611453396776924
best_error: 7.57183915906189
best_error: 7.571839157717197
best_error: 7.571839142762528
best_error: 7.53212708866594
best_error: 7.532127088664397
best_error: 7.532127071107151
best_error: 7.339228243365581
best_error: 7.339228243192631
best_error: 7.339228223887544
best_error: 7.313027967732508
best_error: 7.313027945004433
best_error: 7.2627633916194565
best_error: 7.26276327431367
best_error: 7.219687266625
best_error: 7.219687169948489
best_error: 7.1977236710606975
best_error: 7.197723650256839
best_error: 7.099911802335322
best_error: 7.099911783633955
best_error: 7.0999117835317405
best_error: 6.922671180288658
best_error: 6.922671166776064
best_error: 6.922671166174743
best_error: 6.737069075449374
best_error: 6.73706907281135
best_error: 6.737068997633118
best_error: 6.737068990395627
best_error: 6.562004766407148
best_error: 6.562004761508673
best_error: 6.562004756613928
best_error: 6.553778553863769
best_error: 6.553778552743467
best_error: 6.553778548345475
best_error: 6.5521740373666955
best_error: 6.552174034817416
best_error: 6.552174032000354
best_error: 6.549615543050142
best_error: 6.549615540650647
best_error: 6.5496155377021905
best_error: 6.5466559882493
best_error: 6.5466559859861215
best_error: 6.546655982910338
best_error: 6.5445814363770145
best_error: 6.544581434099433
best_error: 6.544581430830314
best_error: 6.542217225089266
best_error: 6.542217223410401
best_error: 6.542217220212108
best_error: 6.541057871157608
best_error: 6.541057869494777
best_error: 6.541057866301944
best_error: 6.540926198531669
best_error: 6.54092587009986
best_error: 6.540919816204963
best_error: 6.540919814544055
best_error: 6.540919811351869
best_error: 6.540600855605294
best_error: 6.540600853948827
best_error: 6.54060085075813
best_error: 6.54037751612981
best_error: 6.540377188011939
best_error: 6.533331542204105
best_error: 6.5333315397289775
best_error: 6.533331531930246
best_error: 6.520240309699474
best_error: 6.5202403066708055
best_error: 6.520240300516926
best_error: 6.483359690379332
best_error: 6.4833596829543225
best_error: 6.483359622173591
best_error: 6.478955192838775
best_error: 6.4789551859255035
best_error: 6.478955184614159
best_error: 6.4760285317928545
best_error: 6.476028525348523
best_error: 6.476028523458262
best_error: 6.474379528104709
best_error: 6.474379520990503
best_error: 6.474379519367682
best_error: 6.473835061615995
best_error: 6.473835054507798
best_error: 6.473835048109219
best_error: 6.473835044292524
best_error: 6.471740586246087
best_error: 6.471740578633493
best_error: 6.471740574762516
best_error: 6.470443570340575
best_error: 6.470443562562365
best_error: 6.4704435593184275
best_error: 6.469710984703525
best_error: 6.469710977298626
best_error: 6.469710975029956
best_error: 6.468383416854709
best_error: 6.468383409107069
best_error: 6.468383407130539
best_error: 6.4600433654056095
best_error: 6.460043356808606
best_error: 6.460043355023897
best_error: 6.458612616497928
best_error: 6.458612607919918
best_error: 6.458612606143947
best_error: 6.458136272257673
best_error: 6.458136055160995
best_error: 6.4580794360422065
best_error: 6.458079427467241
best_error: 6.458079425699678
best_error: 6.458045914643856
best_error: 6.458045697527201
best_error: 6.458043991879422
best_error: 6.4580439833047505
best_error: 6.458043981537586
best_error: 6.458043817452973
best_error: 6.458043790137538
best_error: 6.458043781562881
best_error: 6.458043779795701
best_error: 6.458043767980393
best_error: 6.458043750947356
best_error: 6.458043743792486
best_error: 6.4580437408660165
