ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 17.00282162045226
best_error: 17.00282137790108
best_error: 13.166942828735733
best_error: 13.166942825407046
best_error: 13.166942814680258
best_error: 13.116948564746505
best_error: 13.116948561072311
best_error: 13.116948557352377
best_error: 12.853095430342156
best_error: 12.853095424764028
best_error: 12.85309541949607
best_error: 12.174976184001732
best_error: 12.174976124750911
best_error: 11.731351774270607
best_error: 11.731351765224142
best_error: 11.558893859762009
best_error: 11.55889384843709
best_error: 11.558893831296434
best_error: 11.164109665984341
best_error: 11.16410963007785
best_error: 10.653219327023532
best_error: 10.653219232830352
best_error: 10.419537261782382
best_error: 10.419537137748303
best_error: 10.12657474140773
best_error: 10.126574586904264
best_error: 9.309440841968401
best_error: 9.309440775134227
best_error: 8.017492340784294
best_error: 8.017492181919632
best_error: 8.017492170549417
best_error: 7.7621621132050365
best_error: 7.762161999939692
best_error: 7.762161924101305
best_error: 7.620155982400394
best_error: 7.6201558846549995
best_error: 7.620155788222069
best_error: 7.5797647404492485
best_error: 7.5797646424762375
best_error: 7.579764544606927
best_error: 7.54612717991023
best_error: 7.54612708785211
best_error: 7.546126982855421
best_error: 7.526966672794904
best_error: 7.526966578334957
best_error: 7.526966474667352
best_error: 7.511012599425506
best_error: 7.511012504293166
best_error: 7.511012400474083
best_error: 7.5009113860288235
best_error: 7.500911289661657
best_error: 7.500911186513141
best_error: 7.492985405368403
best_error: 7.4929853106088045
best_error: 7.492985205886518
best_error: 7.487189877713251
best_error: 7.487189782252731
best_error: 7.487189677905278
best_error: 7.483109615723226
best_error: 7.483109519771335
best_error: 7.483109415685894
best_error: 7.474132994071364
best_error: 7.474132899671535
best_error: 7.474132793914542
best_error: 7.469630307701682
best_error: 7.469630212823083
best_error: 7.469630107416627
best_error: 7.468026675914165
best_error: 7.468026580865224
best_error: 7.468026475583461
best_error: 7.467023300754992
best_error: 7.467023205599529
best_error: 7.467023100395745
best_error: 7.466436023558624
best_error: 7.466435928340838
best_error: 7.4664358231826355
best_error: 7.466059692423682
best_error: 7.466059597165951
best_error: 7.466059492036998
best_error: 7.465760368307944
best_error: 7.465760273019432
best_error: 7.465760167914811
best_error: 7.465545870432008
best_error: 7.46554577512142
best_error: 7.46554567003424
best_error: 7.465454117807564
best_error: 7.465454022487542
best_error: 7.465453917407832
best_error: 7.465442508069955
best_error: 7.465442412748736
best_error: 7.465442307669974
best_error: 7.465428923909224
best_error: 7.465428835558477
best_error: 7.46542818625792
best_error: 7.465428130289742
best_error: 7.465427985857611
best_error: 6.672778913939389
best_error: 6.6727787962737874
best_error: 5.23005467129068
best_error: 5.230054534155037
best_error: 4.895595386475082
best_error: 4.895594927715125
best_error: 4.866318974204319
best_error: 4.866318540000879
best_error: 4.8662693900909755
best_error: 4.86626895611645
best_error: 4.865956625128833
best_error: 4.865956192368785
best_error: 4.863516350225296
best_error: 4.863515916904703
best_error: 4.859197516853698
best_error: 4.859197085553161
best_error: 4.8557150298852
best_error: 4.855714906158132
best_error: 4.85555040519882
best_error: 4.855549976525447
best_error: 4.8543603040138406
best_error: 4.854359875030758
best_error: 4.853240617947852
best_error: 4.853240188673551
best_error: 4.852459123583808
best_error: 4.852458694106345
best_error: 4.852278353428952
best_error: 4.852278229884014
best_error: 4.852005612969126
best_error: 4.8520051833738105
best_error: 4.8519837550706555
best_error: 4.851983325470521
best_error: 4.851969585191755
best_error: 4.851969155588495
best_error: 4.851960360208393
best_error: 4.851959930603102
best_error: 4.851954321400875
best_error: 4.851953891794243
best_error: 4.8519503291252315
best_error: 4.8519498995177095
best_error: 4.851947649567256
best_error: 4.851947219959156
best_error: 4.851945806265303
best_error: 4.851945376656788
best_error: 4.851944483691037
best_error: 4.851944054082232
best_error: 4.851943457169074
best_error: 4.851943027560059
best_error: 4.85186271843008
best_error: 4.851862288812599
best_error: 4.8518361770064224
best_error: 4.8518357473848255
best_error: 4.8518211045638555
best_error: 4.851820674939908
best_error: 4.851813221627532
best_error: 4.851812792002389
best_error: 4.851808126332876
best_error: 4.851807696706924
best_error: 4.851805771286816
best_error: 4.851805341660516
best_error: 4.851804118551236
best_error: 4.85180368892466
best_error: 4.851803387520029
best_error: 4.851802957893344
best_error: 4.851802937053577
