ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 86
days_switch 85
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 100.873153922957
best_error: 100.87315380343698
best_error: 100.87315378207569
best_error: 15.538349117250698
best_error: 15.538349117239669
best_error: 15.538349097634656
best_error: 15.48321406057564
best_error: 15.483214039583599
best_error: 15.21904568017684
best_error: 15.21904565192536
best_error: 12.772795900914993
best_error: 12.772795871458229
best_error: 12.749990878155556
best_error: 12.749990850166618
best_error: 12.691814871771525
best_error: 12.691814855059686
best_error: 12.683016133197254
best_error: 12.683016115313807
best_error: 12.671305757156368
best_error: 12.67130574115681
best_error: 12.559895761330493
best_error: 12.559895749028756
best_error: 12.501628986363855
best_error: 12.501628972534938
best_error: 12.457344925300648
best_error: 12.45734492005465
best_error: 12.45734491014258
best_error: 12.18802324366244
best_error: 12.188023224740574
best_error: 12.187817269960194
best_error: 12.187817251037849
best_error: 10.393757434497283
best_error: 10.393757312190893
best_error: 10.393722606238672
best_error: 10.393722483925579
best_error: 10.19692201360458
best_error: 10.196921901318929
best_error: 10.147368189254006
best_error: 10.147368189247407
best_error: 10.147368178980926
best_error: 10.147368172681334
best_error: 10.147362850688767
best_error: 10.147362850682164
best_error: 10.147362840415495
best_error: 10.147362834116063
best_error: 10.131814596025038
best_error: 10.131814596018504
best_error: 10.131814585844735
best_error: 10.131814578497842
best_error: 10.131812318156811
best_error: 10.131812318150274
best_error: 10.131812307976386
best_error: 10.131812300629575
best_error: 10.124110689081043
best_error: 10.124110689073783
best_error: 10.124110678476619
best_error: 10.124110671403129
best_error: 10.120651739668101
best_error: 10.120651739660818
best_error: 10.120651729091668
best_error: 10.120651721729221
best_error: 10.120650419166353
best_error: 10.120650419159066
best_error: 10.120650408589821
best_error: 10.12065040122744
best_error: 10.116393158111878
best_error: 10.116393158104067
best_error: 10.116393147226466
best_error: 10.116393140031228
best_error: 10.115545481285654
best_error: 10.115545481277747
best_error: 10.115545470336336
best_error: 10.115545463169573
best_error: 10.115544456526308
best_error: 10.115544456518395
best_error: 10.1155444455769
best_error: 10.115544438410197
best_error: 10.112149070959422
best_error: 10.112149070950968
best_error: 10.11214905971993
best_error: 10.112149052734049
best_error: 10.111789407261794
best_error: 10.111789407253275
best_error: 10.111789395988849
best_error: 10.1117893890254
best_error: 10.05720115202175
best_error: 10.057201123935785
best_error: 9.98629452634194
best_error: 9.986294526324365
best_error: 9.986294512214748
best_error: 9.986294510058617
best_error: 9.918913221818189
best_error: 9.918913171198028
best_error: 9.800257287887375
best_error: 9.800257247608366
best_error: 9.391899915049494
best_error: 9.391899881372174
best_error: 8.955935027415414
best_error: 8.955935027408735
best_error: 8.955935015988095
best_error: 8.931542149978174
best_error: 8.93154213319739
best_error: 8.88234754158788
best_error: 8.882347530384923
best_error: 8.876694094089903
best_error: 8.876694081682107
best_error: 8.873812451015871
best_error: 8.87381243809056
best_error: 8.872647271014323
best_error: 8.872647257841582
best_error: 8.872339880081784
best_error: 8.872339866841163
best_error: 8.872313643335152
best_error: 8.87231363008874
best_error: 8.872307476020808
best_error: 8.87230744340593
best_error: 8.802999937352471
best_error: 8.80299990238709
best_error: 8.802028786514938
best_error: 8.802028756714243
best_error: 8.760402318670906
best_error: 8.760402287913813
best_error: 8.709680663630468
best_error: 8.709680636877886
best_error: 8.688114256989603
best_error: 8.688114237984411
best_error: 8.560470718119884
best_error: 8.560470701237547
best_error: 8.503619838891307
best_error: 8.503619823107531
best_error: 8.451190840111824
best_error: 8.45119080088066
best_error: 8.418893237918617
best_error: 8.41889321582725
best_error: 8.400434065252387
best_error: 8.400434043857624
best_error: 8.386016429596161
best_error: 8.386016245987742
best_error: 8.360269434868231
best_error: 8.36026928879279
best_error: 8.326252601454769
best_error: 8.326252574721108
best_error: 8.300966041322988
best_error: 8.300965997810415
best_error: 8.289347159347358
best_error: 8.289347118026381
best_error: 8.283942965424437
best_error: 8.283942925098337
best_error: 8.276629404384792
best_error: 8.276629321232953
best_error: 8.23931075638031
best_error: 8.239310520603851
best_error: 8.177812435660043
best_error: 8.177812212226998
best_error: 8.065591432098408
best_error: 8.065591406568023
best_error: 7.962161926388159
best_error: 7.962161847804355
best_error: 7.855872983294452
best_error: 7.855872918016203
best_error: 7.81791435446591
best_error: 7.817914199542424
best_error: 7.801357216832342
best_error: 7.801356571323204
best_error: 7.157937174653194
best_error: 7.15793715199989
best_error: 7.15776584126125
best_error: 7.157765499854049
best_error: 7.126027617323417
best_error: 7.126027595475059
best_error: 7.069308869763842
best_error: 7.069308538373633
best_error: 7.039886976386835
best_error: 7.039886676052441
best_error: 6.979585089841094
best_error: 6.979585046884317
best_error: 6.894556777778083
best_error: 6.894556704473124
best_error: 6.8651388671567375
best_error: 6.865138865585218
best_error: 6.8651388582235455
best_error: 6.862871546833223
best_error: 6.862871510980307
best_error: 6.860052713438295
best_error: 6.860052711865086
best_error: 6.8600527043885275
best_error: 6.858968460088972
best_error: 6.858968428531639
best_error: 6.858749167609809
best_error: 6.858749166039278
best_error: 6.858749158513352
best_error: 6.858117080223691
best_error: 6.858117048737896
best_error: 6.854405356409323
best_error: 6.85440535523661
best_error: 6.854405349751563
best_error: 6.8506168425017995
best_error: 6.850616839862209
best_error: 6.850616835952715
