ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 76
days_switch 30
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 100.98022288780354
best_error: 100.98022273105585
best_error: 100.980222711652
best_error: 19.34340917873293
best_error: 19.34340917873005
best_error: 19.343409172977058
best_error: 19.340964793826203
best_error: 19.340964788003667
best_error: 19.330900526153926
best_error: 19.330900520054183
best_error: 19.285509335494474
best_error: 19.28550932809265
best_error: 18.976230526519554
best_error: 18.97623050983144
best_error: 18.955535110888945
best_error: 18.95553509345879
best_error: 17.03333152890862
best_error: 17.033331431475936
best_error: 15.238723973217487
best_error: 15.238723567136306
best_error: 11.671578072354517
best_error: 11.671578056480806
best_error: 11.671578055172596
best_error: 11.621388256520515
best_error: 11.621388098053394
best_error: 11.616401434073573
best_error: 11.616401420792187
best_error: 11.616401417582257
best_error: 11.6136646846651
best_error: 11.613664671851698
best_error: 11.613664668211754
best_error: 11.61267266759565
best_error: 11.612672655135427
best_error: 11.61267265115644
best_error: 11.61226275022924
best_error: 11.612262737775334
best_error: 11.61226273379572
best_error: 11.6122403102261
best_error: 11.612240151661823
best_error: 11.61199365805916
best_error: 11.61199364560449
best_error: 11.611993641619456
best_error: 11.61079700934523
best_error: 11.610796996580351
best_error: 11.610796992897978
best_error: 11.606086678260723
best_error: 11.606086665499852
best_error: 11.606086661781596
best_error: 11.58710568306828
best_error: 11.58710567038279
best_error: 11.587105666460799
best_error: 11.508805384535007
best_error: 11.508805372140717
best_error: 11.508805367400596
best_error: 11.505266178575804
best_error: 11.505266166189267
best_error: 11.50526616141762
best_error: 11.505179863215263
best_error: 11.5051798508298
best_error: 11.505179846058011
best_error: 11.504834680881723
best_error: 11.504834668500603
best_error: 11.504834663728195
best_error: 11.503457391969096
best_error: 11.503457379615389
best_error: 11.503457374830429
best_error: 11.498031133968098
best_error: 11.498031122052023
best_error: 11.498031116888217
best_error: 11.494114719908659
best_error: 11.494114708533829
best_error: 11.49411470287437
best_error: 11.49381564146276
best_error: 11.493815630091795
best_error: 11.493815624431978
best_error: 11.493772650248701
best_error: 11.493772638878298
best_error: 11.493772633218422
best_error: 11.49376992728659
best_error: 11.493769760222715
best_error: 11.492523498468127
best_error: 11.492523487101046
best_error: 11.492523481424499
best_error: 11.489221262355372
best_error: 11.489221250979096
best_error: 11.48922124528962
best_error: 11.476002641240818
best_error: 11.476002629824293
best_error: 11.47600262408619
best_error: 11.42202824528379
best_error: 11.422028233983509
best_error: 11.42202822776822
best_error: 11.341464435338658
best_error: 11.341464423821606
best_error: 11.341464417287643
best_error: 11.340270073989766
best_error: 11.340270062477863
best_error: 11.340270055932969
best_error: 11.335508683316938
best_error: 11.335508671788205
best_error: 11.335508665237043
best_error: 11.316470831455437
best_error: 11.316470819640926
best_error: 11.316470813283267
best_error: 11.291654600636909
best_error: 11.291654588557547
best_error: 11.291654582343096
best_error: 11.281184373758732
best_error: 11.281184361723868
best_error: 11.281184355431549
best_error: 11.239042324702973
best_error: 11.239042312794187
best_error: 11.23904230624154
best_error: 11.068096008436129
best_error: 11.068095996375154
best_error: 11.068095989424851
best_error: 10.901425206071782
best_error: 10.90142520187572
best_error: 10.901425186507135
best_error: 10.898651169393005
best_error: 10.89865116519725
best_error: 10.898651149829826
best_error: 10.887559150195141
best_error: 10.88755915019514
best_error: 10.887559146000626
best_error: 10.887559130637825
best_error: 10.843257070274802
best_error: 10.843257066085238
best_error: 10.843257050740956
best_error: 10.667625179232534
best_error: 10.667625175087977
best_error: 10.66762515993997
best_error: 10.522209336502762
best_error: 10.522209332895267
best_error: 10.519473448295468
best_error: 10.519473444690925
best_error: 10.509481352636422
best_error: 10.50948135263642
best_error: 10.509481349081254
best_error: 10.475487931467203
best_error: 10.47548792924121
best_error: 10.475487928659483
best_error: 10.456265739170853
best_error: 10.456265738498908
best_error: 10.456265713478718
best_error: 10.455938295062785
best_error: 10.455938294412894
best_error: 10.455938269681702
best_error: 10.455785471722315
best_error: 10.455785469753327
best_error: 10.452447321299015
best_error: 10.452447318068398
best_error: 10.452447314990286
best_error: 10.451320998607727
best_error: 10.451320995091388
best_error: 10.45132099462943
best_error: 10.449614258224928
best_error: 10.4496142507409
best_error: 10.424580366975128
best_error: 10.424580365320319
best_error: 10.424580321793037
best_error: 10.42457504142088
best_error: 10.424575039766026
best_error: 10.42457499623904
best_error: 10.42457029849132
best_error: 10.424570296836436
best_error: 10.42457025330971
best_error: 10.42456801642613
best_error: 10.42456801477123
best_error: 10.424567971244631
best_error: 10.42456596485335
best_error: 10.424565963198436
best_error: 10.424565919671947
best_error: 10.42456579854063
best_error: 10.424565796885718
best_error: 10.42456575335924
best_error: 10.424565743806014
best_error: 10.424565740424839
best_error: 10.424565731378262
best_error: 10.424565729723346
best_error: 10.42238390061271
best_error: 10.422383897640017
best_error: 10.420852269634612
best_error: 10.420852269341058
best_error: 10.420852252158749
best_error: 10.420455666643067
best_error: 10.420455663717522
best_error: 10.42039959494482
best_error: 10.420399592019397
best_error: 10.420251120877435
best_error: 10.42025112010084
best_error: 10.420251095294631
best_error: 10.419950464812048
best_error: 10.419950464030553
best_error: 10.419950439129897
best_error: 10.419079146893788
best_error: 10.41907914566913
best_error: 10.419079112075256
best_error: 10.418519527720395
best_error: 10.418519510492136
best_error: 10.418519510230626
best_error: 10.417484170468363
best_error: 10.417484120454644
best_error: 10.41720705072418
best_error: 10.41720700175009
best_error: 10.417054582760219
best_error: 10.417054566766339
best_error: 10.41705456652263
best_error: 10.416937405499256
best_error: 10.416937389511617
best_error: 10.416937389267275
best_error: 10.416858968255244
best_error: 10.416858952283073
best_error: 10.416858952038591
best_error: 10.416761683654581
best_error: 10.4167616680291
best_error: 10.416761667788355
best_error: 10.408761541547166
best_error: 10.408761476218322
best_error: 10.357704770121734
best_error: 10.357704753331621
best_error: 10.357704752441204
best_error: 10.34071445828719
best_error: 10.34071444087542
best_error: 10.340714439898363
best_error: 10.142418227221171
best_error: 10.142418215961976
best_error: 10.142418214088229
best_error: 10.139939403107917
best_error: 10.139939391308499
best_error: 10.139939389351774
best_error: 10.135786742058556
best_error: 10.13578672962406
best_error: 10.135786727731183
best_error: 10.130613231769004
best_error: 10.130613219351654
best_error: 10.130613217594243
best_error: 10.112260202681139
best_error: 10.1122601899496
best_error: 10.112260188680956
best_error: 10.082534698892768
best_error: 10.082534686199125
best_error: 10.079535086591342
best_error: 10.079535084933742
best_error: 10.079535081421007
best_error: 10.070908323539625
best_error: 10.07090831995774
best_error: 10.070908318340885
best_error: 10.049154189382598
best_error: 10.049154118968733
best_error: 10.047268755275574
best_error: 10.04726875198941
best_error: 10.047268750108058
best_error: 10.031532530480366
best_error: 10.031532527073757
best_error: 10.031532525460422
