ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.656947069939376
best_error: 9.656946974427392
best_error: 9.153334587218648
best_error: 9.153334453558427
best_error: 8.170091760109823
best_error: 8.170091609329413
best_error: 8.080694301276335
best_error: 8.080694203466257
best_error: 8.080694181321558
best_error: 7.502279482658253
best_error: 7.5022793788059445
best_error: 7.50227935660674
best_error: 6.413461959998269
best_error: 6.413461872912372
best_error: 6.413461822493504
best_error: 6.091707898427627
best_error: 6.091707815435052
best_error: 6.09170775797356
best_error: 5.979449725616787
best_error: 5.979449642186106
best_error: 5.979449583229862
best_error: 5.811204126109562
best_error: 5.811204032206135
best_error: 5.811203987451444
best_error: 5.580110168231194
best_error: 5.580110014893376
best_error: 5.497103482497165
best_error: 5.497103269342623
best_error: 5.205730064303486
best_error: 5.205729902771895
best_error: 5.063710540056309
best_error: 5.063710374912022
best_error: 5.005026521888761
best_error: 5.005026350166336
best_error: 4.9758445617386755
best_error: 4.975844388912751
best_error: 4.9625562311602565
best_error: 4.96255605686085
best_error: 4.953759166775962
best_error: 4.953758992627989
best_error: 4.951858745440996
best_error: 4.951858647260895
best_error: 4.297044896490614
best_error: 4.2970446294762095
best_error: 4.119107323606433
best_error: 4.1191069236731925
best_error: 3.8360557335810603
best_error: 3.8360553683796654
best_error: 3.697190691629453
best_error: 3.697190342731459
best_error: 3.638937040931863
best_error: 3.6389366983598848
best_error: 3.6184276523535246
best_error: 3.6184275580504965
best_error: 3.6118003997723758
best_error: 3.611800057797836
best_error: 3.61119081547587
best_error: 3.611190473446891
best_error: 3.6111004566443308
best_error: 3.611100114607282
best_error: 3.611052932398468
best_error: 3.6110525903571853
best_error: 3.611030371132019
best_error: 3.6110300290887176
best_error: 3.611015491396387
best_error: 3.611015149351755
best_error: 3.611010833183389
best_error: 3.611010491138331
best_error: 3.611007563483555
best_error: 3.6110072214382143
best_error: 3.611007177645263
best_error: 3.611006835599884
best_error: 3.611006722102974
best_error: 3.611006706525427
best_error: 3.611006671514052
best_error: 3.5087400458443496
best_error: 3.5087399762350895
best_error: 3.463498337731613
best_error: 3.463498275814241
best_error: 3.3143739356784945
best_error: 3.314373638789676
best_error: 2.840557244930534
best_error: 2.840556905321667
best_error: 2.8173707507236534
best_error: 2.8173704072557983
best_error: 2.810646468863339
best_error: 2.810646468702704
best_error: 2.8106463650282905
best_error: 2.81051094573358
best_error: 2.810510597964818
best_error: 2.81010517859988
best_error: 2.8101048307315106
best_error: 2.810067784967372
best_error: 2.8100677848066944
best_error: 2.810067681148829
best_error: 2.810035953480256
best_error: 2.81003560559489
best_error: 2.8099936445261116
best_error: 2.8099932966303607
best_error: 2.8099895828536647
best_error: 2.809989582693061
best_error: 2.8099894790373012
best_error: 2.8099870669849327
best_error: 2.809986719087589
best_error: 2.8099828232828665
best_error: 2.8099824753844915
best_error: 2.8099820971860394
best_error: 2.8099820529469914
best_error: 2.8099817928308504
best_error: 2.8099817485918295
best_error: 2.80998172741186
best_error: 2.8098503739985525
best_error: 2.8098500251320404
best_error: 2.806806179657518
best_error: 2.8068058272795913
best_error: 2.7583692123599537
best_error: 2.7583688490546443
best_error: 2.7366217478912986
best_error: 2.736621380955728
best_error: 2.7079445312217825
best_error: 2.7079441353962874
best_error: 2.7049264102854784
best_error: 2.7049260165125864
best_error: 2.702069783381326
best_error: 2.702069392941298
best_error: 2.7010897481039473
best_error: 2.7010893571540184
best_error: 2.700760941866085
best_error: 2.7007605471482665
best_error: 2.700487217396899
best_error: 2.7004868226476995
best_error: 2.6994773072596745
best_error: 2.699476913509029
best_error: 2.693235720124635
best_error: 2.6932353289896684
best_error: 2.690558331681216
best_error: 2.690557940299229
best_error: 2.6895496518847115
best_error: 2.689549260409726
best_error: 2.689305793424017
best_error: 2.6893054019215183
best_error: 2.689203180107141
best_error: 2.689202788593052
best_error: 2.689135574542921
best_error: 2.6891351830212282
best_error: 2.6891258108064564
best_error: 2.689125810686165
best_error: 2.6891258077078586
best_error: 2.6891257055935665
best_error: 2.674984834188028
best_error: 2.6749848340350946
best_error: 2.674984831052044
best_error: 2.674984728442727
best_error: 2.6420811275212124
best_error: 2.642080733712514
best_error: 2.6366625330549196
best_error: 2.636662532912954
best_error: 2.6366625299429733
best_error: 2.6366624270691545
best_error: 2.6205684493297783
best_error: 2.620568449188162
best_error: 2.620568446230907
best_error: 2.61717749596749
best_error: 2.6171771025991895
best_error: 2.540421099222379
best_error: 2.5404210990644733
best_error: 2.540421096133016
best_error: 2.5362234511413684
best_error: 2.5362230520517484
best_error: 2.5349062557685724
best_error: 2.5349058566030633
best_error: 2.5343157932895135
best_error: 2.5343153940900116
best_error: 2.534095366094501
best_error: 2.534095365936448
best_error: 2.5340953630112484
best_error: 2.4753686560781034
best_error: 2.4753682572387565
best_error: 2.4751454998037046
best_error: 2.4751451009507535
best_error: 2.475055790678401
best_error: 2.4750557904947557
best_error: 2.475053622662842
best_error: 2.475053223804293
best_error: 2.4750490099330005
best_error: 2.475048611074001
best_error: 2.4750459795862865
best_error: 2.475045580726995
best_error: 2.4750447512334204
best_error: 2.475044751046477
best_error: 2.4750447245603597
best_error: 2.475044665921164
best_error: 2.4669702761716623
best_error: 2.466969895243968
best_error: 2.464387406301365
best_error: 2.4643870180083383
best_error: 2.464379123196885
best_error: 2.4643787349032875
best_error: 2.463932807780097
best_error: 2.46393241945682
best_error: 2.462962266495997
best_error: 2.4629618787936964
best_error: 2.4627666622483533
best_error: 2.4627662771118213
