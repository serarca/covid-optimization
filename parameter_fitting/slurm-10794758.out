ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.678809217796811
best_error: 10.67880921050814
best_error: 10.671399933812575
best_error: 10.671399926099411
best_error: 7.6842596756341
best_error: 7.684259329126382
best_error: 6.7483389589546565
best_error: 6.7483385044678785
best_error: 5.493319452916488
best_error: 5.493318883756009
best_error: 4.523457258317707
best_error: 4.523457086222238
best_error: 4.491811357904007
best_error: 4.49181130713893
best_error: 4.477995054315455
best_error: 4.4779950542374625
best_error: 4.477995037836329
best_error: 4.476250312872166
best_error: 4.47625031279409
best_error: 4.476250296267098
best_error: 4.473877629839002
best_error: 4.473877580270202
best_error: 4.471754492333677
best_error: 4.471754492255103
best_error: 4.47175447549122
best_error: 4.459160770585721
best_error: 4.4591607705055365
best_error: 4.459160753603542
best_error: 4.407957054214228
best_error: 4.407957054127577
best_error: 4.407957037244771
best_error: 4.203543705172442
best_error: 4.203543670320779
best_error: 3.9266866441446653
best_error: 3.9266866110581438
best_error: 3.9035245278735764
best_error: 3.903524328578307
best_error: 3.888714854239202
best_error: 3.888714674596069
best_error: 3.885907390668579
best_error: 3.885907316908103
best_error: 3.8839707033902675
best_error: 3.8839706175258186
best_error: 3.8805072333512975
best_error: 3.880507147758081
best_error: 3.8679537292880752
best_error: 3.867953729179179
best_error: 3.8679537221343656
best_error: 3.689298077044127
best_error: 3.689298049851878
best_error: 3.6641662637784806
best_error: 3.6641661823353027
best_error: 3.6445318437209657
best_error: 3.6445317652572298
best_error: 3.5900285613452354
best_error: 3.590028497955989
best_error: 3.5155676335396975
best_error: 3.5155675331340794
best_error: 3.260492577852392
best_error: 3.2604925380539918
best_error: 3.247277471242204
best_error: 3.2472774669480438
best_error: 3.2373391646275897
best_error: 3.237339163277394
best_error: 3.20868186608815
best_error: 3.208681849748161
best_error: 3.189090938985661
best_error: 3.1890909267297607
best_error: 3.179915318947229
best_error: 3.179915208534586
best_error: 3.1788202607511153
best_error: 3.1788202603539824
best_error: 3.178718157614904
best_error: 3.178718156455706
best_error: 3.1786993286912737
best_error: 3.1786993278608344
best_error: 3.1786816104068683
best_error: 3.1786816101242956
best_error: 3.178681610015965
best_error: 3.178655464670963
best_error: 3.1786554645244047
best_error: 3.178655464277689
best_error: 3.178651542868165
best_error: 3.178651542758278
best_error: 3.1786515424742823
best_error: 3.178647042498037
best_error: 3.1786470423899416
best_error: 3.178647042103706
best_error: 3.178638033782167
best_error: 3.1786380337127054
best_error: 3.178638033386722
best_error: 3.178637030599371
best_error: 3.1786369179879372
best_error: 3.1786367170458014
best_error: 3.178636716976872
best_error: 3.1786367166502254
best_error: 3.178625721859819
best_error: 3.178625721461148
best_error: 3.178625014222606
best_error: 3.178625013823871
best_error: 3.1786244126429524
best_error: 3.1786244122441407
best_error: 3.178623077527348
best_error: 3.1786230771287385
best_error: 3.178621441278744
best_error: 3.178621440879966
best_error: 3.1786205989062717
best_error: 3.1786205985074036
best_error: 3.1786205008250397
best_error: 3.17862050042616
best_error: 3.1786204428241556
best_error: 3.178620442425268
best_error: 3.1786204148879276
best_error: 3.1786203022811224
best_error: 3.1786043357633775
best_error: 3.178604335550676
best_error: 3.1786043353651814
best_error: 3.1785877488564647
best_error: 3.178587748406348
best_error: 3.1785486831127665
best_error: 3.1785486821630293
best_error: 3.17848418933069
best_error: 3.178484187913381
best_error: 3.1783770983319513
best_error: 3.1783770949021184
best_error: 3.1775630215270088
best_error: 3.1775630179755474
best_error: 3.176005307692488
best_error: 3.176005204463626
best_error: 3.1756133538601383
best_error: 3.175613350275399
best_error: 3.175445358749414
best_error: 3.1754453557214184
best_error: 3.175214330668214
best_error: 3.17519175508055
best_error: 3.175191754458073
best_error: 3.1751871225300397
best_error: 3.1751871218785888
best_error: 3.175171112489703
best_error: 3.175171111807615
best_error: 3.175140838315161
best_error: 3.1751408373044567
best_error: 3.175117424463191
best_error: 3.1751174235848567
best_error: 3.1751082502255668
best_error: 3.1751082493826575
best_error: 3.175100656165536
best_error: 3.1751006553558607
best_error: 3.1750914434634563
best_error: 3.1750914426572154
best_error: 3.1750837252411968
best_error: 3.1750837244704124
best_error: 3.175074501548188
best_error: 3.1750745007774794
best_error: 3.1750691787548613
best_error: 3.175069178046045
best_error: 3.175042055844655
best_error: 3.1750420551418848
best_error: 3.175039652637733
best_error: 3.1750396519357187
best_error: 3.1750373710673307
best_error: 3.175037370336464
best_error: 3.1750351295174264
best_error: 3.17503512878728
best_error: 3.175033130471885
best_error: 3.175033129742362
best_error: 3.175022265848971
best_error: 3.175022265149116
best_error: 3.1750087857583322
best_error: 3.175008785093497
best_error: 3.175008631818051
best_error: 3.175008631153267
best_error: 3.1750084835565526
best_error: 3.175008482891813
best_error: 3.175008377183304
best_error: 3.175008376518599
best_error: 3.1750082769266004
best_error: 3.1750082762619343
best_error: 3.1750080929366584
best_error: 3.175008092272034
best_error: 3.1750079299861858
best_error: 3.1750079293216227
best_error: 3.17500681093623
best_error: 3.1750068102720315
best_error: 3.175006798048501
best_error: 3.1750067973843104
best_error: 3.1750067855392468
best_error: 3.1750067848750456
best_error: 3.1750067787216394
best_error: 3.1750067780574502
best_error: 3.1750067721245228
best_error: 3.175006771460326
best_error: 3.175006768154291
best_error: 3.175006767490106
best_error: 3.175006764343723
best_error: 3.17500676367954
