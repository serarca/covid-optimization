ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 90
days_switch 55
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 98.20321397123386
best_error: 98.20321385714661
best_error: 98.20321382424694
best_error: 17.046080480296297
best_error: 17.046080178592437
best_error: 17.046078078434597
best_error: 13.603951591687427
best_error: 13.603951591403298
best_error: 13.603951557576144
best_error: 13.543203399673782
best_error: 13.543203399372292
best_error: 13.543203363056431
best_error: 13.25967813823948
best_error: 13.25967813790879
best_error: 13.259678089558246
best_error: 10.640179332574485
best_error: 10.640179083897124
best_error: 10.133735466418324
best_error: 10.133735212405831
best_error: 9.908300163963144
best_error: 9.908299948877056
best_error: 9.49044054674582
best_error: 9.490440544307827
best_error: 9.49044054205385
best_error: 9.490440533953869
best_error: 9.487669944754845
best_error: 9.48766991576943
best_error: 9.474758045708008
best_error: 9.474758018417415
best_error: 9.456468287119439
best_error: 9.456468284138847
best_error: 9.456468281944932
best_error: 9.4564682734206
best_error: 9.412013766284984
best_error: 9.412013763311077
best_error: 9.412013760696055
best_error: 9.412013752286569
best_error: 9.22732967935194
best_error: 9.227329677341398
best_error: 9.227329671753951
best_error: 9.227329664855725
best_error: 8.375777572043628
best_error: 8.375777560884428
best_error: 8.375777555081017
best_error: 8.37577755291242
best_error: 8.353489954485461
best_error: 8.353489941515877
best_error: 8.353489938106716
best_error: 8.353489935343601
best_error: 7.964992647151951
best_error: 7.964992629946408
best_error: 7.964992611594533
best_error: 7.210918784662174
best_error: 7.210918784658879
best_error: 7.210918753334525
best_error: 7.028836982110295
best_error: 7.028836886871548
best_error: 6.7266308437387945
best_error: 6.726630832353509
best_error: 6.648837186281443
best_error: 6.648837177073828
best_error: 6.619868664928869
best_error: 6.619868660048328
best_error: 6.61986865993805
best_error: 6.615194314462056
best_error: 6.615194028195768
best_error: 6.614970914272729
best_error: 6.614970910775853
best_error: 6.614970910424272
best_error: 6.614664252617416
best_error: 6.614663966281145
best_error: 6.614562718274121
best_error: 6.614562715200836
best_error: 6.614562714745479
best_error: 6.614538666486923
best_error: 6.614538380124684
best_error: 6.6041271613552865
best_error: 6.60412715955761
best_error: 6.604127159128741
best_error: 6.604127144444598
best_error: 6.599721394088178
best_error: 6.5997211980195845
best_error: 6.593196198506341
best_error: 6.593196197929937
best_error: 6.593196169173785
best_error: 6.593196153638264
best_error: 6.583451627789387
best_error: 6.583451440112815
best_error: 6.559460665804767
best_error: 6.559460665003557
best_error: 6.55946062545706
best_error: 6.559460616504109
best_error: 6.507650542016305
best_error: 6.507650536228365
best_error: 6.507650535697757
best_error: 6.496116008899996
best_error: 6.496116003493152
best_error: 6.496116002023491
best_error: 6.492300637143516
best_error: 6.492300633577088
best_error: 6.492300630762861
best_error: 6.489714122119006
best_error: 6.489714118185908
best_error: 6.489714112972694
best_error: 6.489010014496416
best_error: 6.489010010614891
best_error: 6.48901000648046
best_error: 6.488763789084901
best_error: 6.488763784789522
best_error: 6.488763783202691
best_error: 6.485814693504873
best_error: 6.485814689215638
best_error: 6.485814687651679
best_error: 6.477600176091513
best_error: 6.477599884577919
best_error: 6.477290773542537
best_error: 6.477290769618163
best_error: 6.477290765737567
best_error: 6.4764103021074
best_error: 6.476410298178521
best_error: 6.476410294306281
best_error: 6.47630351238514
best_error: 6.476303508455769
best_error: 6.476303504584454
best_error: 6.476297096746182
best_error: 6.47629681543937
best_error: 6.476285571792495
best_error: 6.476285567863046
best_error: 6.476285563991881
best_error: 6.476279927687301
best_error: 6.476279646378845
best_error: 6.475688856945525
best_error: 6.475688853004559
best_error: 6.475688849128502
best_error: 6.475427919858223
best_error: 6.4754279167500295
best_error: 6.475427915968583
best_error: 6.475427912013727
best_error: 6.465681242079693
best_error: 6.465681238346548
best_error: 6.465681237945146
best_error: 6.465681233562479
best_error: 6.44205004050474
best_error: 6.442049703812518
best_error: 6.439867102032923
best_error: 6.4398667670249035
best_error: 6.432000266174297
best_error: 6.432000257024316
best_error: 6.427265100836892
best_error: 6.42726479796452
best_error: 6.425221761812588
best_error: 6.425221588229548
best_error: 6.424365813799885
best_error: 6.4243658044071426
best_error: 6.423813005176827
best_error: 6.423812793856166
best_error: 6.4236472331628
best_error: 6.4236470460719834
best_error: 6.41913719751657
best_error: 6.419137188127903
best_error: 6.41913717158606
best_error: 6.419137163867482
best_error: 6.414411640093492
best_error: 6.4144116318914195
best_error: 6.414411631141132
best_error: 6.41269256232759
best_error: 6.412692555191166
best_error: 6.412692554939196
best_error: 6.410803080027791
best_error: 6.410803072653921
best_error: 6.409476665602404
best_error: 6.40947665851673
best_error: 6.409476658391543
best_error: 6.408960457692838
best_error: 6.408960450590412
best_error: 6.4089604504637165
best_error: 6.408812244262163
best_error: 6.40881223650418
best_error: 6.408812235757616
best_error: 6.408474990143539
best_error: 6.408474982355466
best_error: 6.408474981652088
best_error: 6.408374404367885
best_error: 6.408374054308195
best_error: 6.408343557589636
best_error: 6.408343549788868
best_error: 6.408343549103484
best_error: 6.40833634379456
best_error: 6.408336335993871
best_error: 6.408336335308449
best_error: 6.408335846585717
best_error: 6.408335838785049
best_error: 6.408335838099608
best_error: 6.408335550806606
best_error: 6.40833554300593
best_error: 6.408335542320498
best_error: 6.408335353732373
best_error: 6.408335345931702
best_error: 6.408335345246266
best_error: 6.408335337027712
best_error: 6.408335144034628
best_error: 6.408335140723742
best_error: 6.408335134656039
best_error: 6.408335133970595
best_error: 6.408335131078782
best_error: 6.4083351232781025
best_error: 6.408335122592677
best_error: 6.408335121309652
best_error: 6.408335113508978
best_error: 6.408335112823546
best_error: 6.408335109180322
best_error: 6.4083351013796435
best_error: 6.408335100694216
best_error: 6.408335093120752
best_error: 6.40833509243531
best_error: 6.4083350760647635
best_error: 6.408335056581862
