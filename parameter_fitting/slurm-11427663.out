ParameterFittingRandomToPython.py:123: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  french_days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values - data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values - data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:148: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values - data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:148: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values - data[data['reg']==11][data['cl_age90']==0].rea.values
days_ahead 60
days_switch 40
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
best_error: 24.835336141675043
best_error: 24.83533554514816
best_error: 5.083771194301481
best_error: 5.08377119417253
best_error: 5.083767078801006
best_error: 5.08376707879428
best_error: 5.083767078750214
best_error: 5.083750608850146
best_error: 5.08375060884341
best_error: 5.083750608799334
best_error: 5.083684601567442
best_error: 5.083684601560671
best_error: 5.083684601516549
best_error: 5.083418513631651
best_error: 5.083418513624738
best_error: 5.083418513580433
best_error: 5.08231994160368
best_error: 5.082319941596173
best_error: 5.082319941551113
best_error: 5.077279121544272
best_error: 5.077279121533701
best_error: 5.077279121485272
best_error: 5.023092517432412
best_error: 5.023092517161989
best_error: 4.96381412341337
best_error: 4.963814120437311
best_error: 3.6432602710939257
best_error: 3.643259990832494
best_error: 3.6432594615945106
best_error: 3.0664943202036508
best_error: 3.066494175356878
best_error: 2.9017755209220697
best_error: 2.9017754622802836
best_error: 2.89599265252823
best_error: 2.8959925963079423
best_error: 2.891959632665049
best_error: 2.8919596103761296
best_error: 2.8919595163181278
best_error: 2.891647899935847
best_error: 2.8916478773553553
best_error: 2.8915478636038836
best_error: 2.89154786168929
best_error: 2.8915478442712117
best_error: 2.8901959418087206
best_error: 2.8901959176553533
best_error: 2.886818101647807
best_error: 2.8868180549385323
best_error: 2.8682011636989877
best_error: 2.868201108407038
best_error: 2.778702004918062
best_error: 2.7787019289260604
best_error: 2.750323074770741
best_error: 2.750323002218181
best_error: 2.7485508753647605
best_error: 2.748550802894932
best_error: 2.7414848922952495
best_error: 2.7414848204876576
best_error: 2.7208797787552474
best_error: 2.72087973684364
best_error: 2.7179621428429885
best_error: 2.717962132681274
best_error: 2.717947817586641
best_error: 2.717947812627746
best_error: 2.717947808255712
best_error: 2.7179132125973
best_error: 2.7179132086661246
best_error: 2.71791320826223
best_error: 2.717913202891589
best_error: 2.717911979570616
best_error: 2.7179119756459675
best_error: 2.7179119752359213
best_error: 2.7179119698679863
best_error: 2.7179112357916004
best_error: 2.717911232343148
best_error: 2.717911231417361
best_error: 2.7179112261143383
best_error: 2.717910965009945
best_error: 2.7179109620611115
best_error: 2.717910960589504
best_error: 2.7179109553585956
best_error: 2.717910313107822
best_error: 2.7179103103966384
best_error: 2.7179103086670637
best_error: 2.717910303468165
best_error: 2.7179077808256427
best_error: 2.71790777836235
best_error: 2.717907776363629
best_error: 2.7179077711991475
best_error: 2.7178993725739904
best_error: 2.7178993713308692
best_error: 2.7178993680082058
best_error: 2.717899363010082
best_error: 2.7178484404878844
best_error: 2.71784843570482
best_error: 2.7178484310713227
best_error: 2.7176918846709173
best_error: 2.7176918793908764
best_error: 2.717691875622224
best_error: 2.7174392368130835
best_error: 2.7174392312048066
best_error: 2.7174392280818576
best_error: 2.7166332614867947
best_error: 2.716633255717809
best_error: 2.7166332532132156
best_error: 2.7147259073705663
best_error: 2.7147259020529027
best_error: 2.7147258994700354
best_error: 2.713244233671668
best_error: 2.713244145448403
best_error: 2.713243396983259
best_error: 2.7132423457381507
best_error: 2.7032864024037764
best_error: 2.7032863990335265
best_error: 2.7032863934533657
best_error: 2.6910709712044762
best_error: 2.69107096183625
best_error: 2.6910709606882643
best_error: 2.5825103864744317
best_error: 2.582510275909197
best_error: 2.5825090485723208
best_error: 2.582507899679533
best_error: 2.498192435058075
best_error: 2.498192294739647
best_error: 2.49819031627622
best_error: 2.4981889501940007
best_error: 2.1625886941812924
best_error: 2.162588487020824
best_error: 2.162583432311248
best_error: 2.162581491229671
best_error: 2.1450814416354187
best_error: 2.1450812467592546
best_error: 2.1450811492637656
best_error: 2.145081082531337
best_error: 2.10154815988695
best_error: 2.1015481596259415
best_error: 2.1015481518414867
best_error: 2.100966460887737
best_error: 2.100966455116355
best_error: 2.100966449973848
best_error: 2.100832654056285
best_error: 2.100832651100081
best_error: 2.1008326468655913
best_error: 2.1008326462355758
best_error: 2.1003350350951324
best_error: 2.100335033847187
best_error: 2.100335027246347
best_error: 2.0965264209260175
best_error: 2.096526412790685
best_error: 2.0896974183623165
best_error: 2.089697397857777
best_error: 2.0638048124524344
best_error: 2.063804785228517
best_error: 1.975448992542194
best_error: 1.9754489683581857
best_error: 1.9753632983142844
best_error: 1.9753632741015317
best_error: 1.9419086731579254
best_error: 1.9419084954557673
best_error: 1.9218477911646703
best_error: 1.9218477350240055
best_error: 1.887004556739804
best_error: 1.8870044564549187
best_error: 1.8808591427011205
best_error: 1.8808591007201694
best_error: 1.8667709528153464
best_error: 1.86677087995757
best_error: 1.8593791477209844
best_error: 1.859379134204907
best_error: 1.8593788483348948
best_error: 1.8548416689599607
best_error: 1.8548416209281973
best_error: 1.8530495815183654
best_error: 1.8530495461353942
best_error: 1.8530491050104536
best_error: 1.8518254866478498
best_error: 1.8518254650383823
best_error: 1.8499835014860755
best_error: 1.8499819678189688
best_error: 1.8461109656699688
best_error: 1.8461109516475955
best_error: 1.8449516150837457
best_error: 1.844951583871223
best_error: 1.8441636583754109
best_error: 1.8441636540098143
best_error: 1.843572635871041
best_error: 1.8435726351014923
best_error: 1.8435726342987235
best_error: 1.8434199150328723
best_error: 1.8434198941101345
best_error: 1.843069449996526
best_error: 1.8430694492906736
best_error: 1.842954556584577
best_error: 1.842954548997138
best_error: 1.8427570711943349
best_error: 1.842757068753322
best_error: 1.8425030812660845
best_error: 1.8425030807991656
best_error: 1.8425030807246627
best_error: 1.8422592070482773
best_error: 1.8422592067140835
best_error: 1.8422592066295578
best_error: 1.842180130724125
best_error: 1.842180130557725
best_error: 1.8421801302932264
best_error: 1.8421801302871625
best_error: 1.8421564589242578
best_error: 1.842156458326136
best_error: 1.8421547143113457
best_error: 1.8421547142988626
best_error: 1.8421547138850412
best_error: 1.8421544625693784
best_error: 1.842154462563602
best_error: 1.8421544621429247
best_error: 1.842154030394612
best_error: 1.8421540299671648
best_error: 1.8421499516322493
best_error: 1.8421499514705792
best_error: 1.8421499512048822
best_error: 1.8421213111145178
best_error: 1.8421213094462836
best_error: 1.8420797499651673
best_error: 1.842079749005659
best_error: 1.8419296183701743
best_error: 1.8419296115479682
best_error: 1.8418400935255348
best_error: 1.8418400924785914
best_error: 1.8418330640867049
best_error: 1.8418330639592022
best_error: 1.8418330636601146
best_error: 1.8418319927982127
best_error: 1.84183199237015
best_error: 1.8418312661882146
best_error: 1.841831266182932
best_error: 1.841831265763679
best_error: 1.8418310177660768
best_error: 1.8418310177571258
best_error: 1.8418310173415384
best_error: 1.8418309624633076
best_error: 1.8418309620144278
best_error: 1.8418307459220782
best_error: 1.8418307456086576
best_error: 1.8418307455005332
best_error: 1.8418307363041564
best_error: 1.8418307361727981
best_error: 1.8418307358811634
best_error: 1.8418307271304193
best_error: 1.8418307269848069
best_error: 1.841830726707428
best_error: 1.8418307051667124
best_error: 1.841830705123249
best_error: 1.8418307047422224
best_error: 1.8418306983151893
best_error: 1.841830698250284
best_error: 1.8418306978907029
best_error: 1.8418306869781984
best_error: 1.8418306866695235
best_error: 1.841830686555238
best_error: 1.841830674566563
best_error: 1.841830674279955
best_error: 1.8418306741436052
best_error: 1.841830661409122
best_error: 1.8418306614089566
best_error: 1.841830661405514
best_error: 1.8418306609846602
best_error: 1.841830628954159
best_error: 1.8418306289248283
best_error: 1.8418306285297072
best_error: 1.8418305317300676
best_error: 1.841830531701384
best_error: 1.8418305313031866
best_error: 1.8418304613407506
best_error: 1.8418304609986882
best_error: 1.8418304609163736
best_error: 1.8418303442600221
best_error: 1.841830344019393
best_error: 1.8418303438356007
best_error: 1.8418299901678576
best_error: 1.8418299899056614
best_error: 1.8418299897434136
best_error: 1.841829503853713
best_error: 1.8418295036130115
best_error: 1.8418295034282095
best_error: 1.8418290367686527
best_error: 1.8418290365630667
best_error: 1.8418290363418968
best_error: 1.841828457422973
best_error: 1.841828457208926
best_error: 1.8418284569947436
best_error: 1.841827840595214
best_error: 1.8418278401629293
best_error: 1.8418278401494366
best_error: 1.841827111849579
best_error: 1.8418271114133629
best_error: 1.8418271113763123
best_error: 1.841826216128391
best_error: 1.8418262156935996
best_error: 1.8418262156770961
best_error: 1.8418207968409825
best_error: 1.8418207964011863
best_error: 1.8418207963954547
best_error: 1.8418147786021908
best_error: 1.8418147784899201
best_error: 1.841814778163966
best_error: 1.8417939479902634
best_error: 1.841793947062814
best_error: 1.8417428105430955
best_error: 1.841742240338748
best_error: 1.8417325434530007
best_error: 1.8417325428946532
best_error: 1.8417325427276596
best_error: 1.8417325157807902
best_error: 1.8417325152222501
best_error: 1.8417325150553847
best_error: 1.8417321585409954
best_error: 1.84173215764458
best_error: 1.8417283796512445
best_error: 1.8417283790584777
best_error: 1.841728378923699
best_error: 1.841727255687027
best_error: 1.8417272517753687
best_error: 1.8417181050339337
best_error: 1.8417177829021893
best_error: 1.8417125526696763
best_error: 1.8417125509280083
best_error: 1.8417042278267142
best_error: 1.841704224986334
best_error: 1.8416883072900831
best_error: 1.8416883065441798
best_error: 1.8416796230319452
best_error: 1.841679622589773
best_error: 1.84167962240621
best_error: 1.8416729809694825
best_error: 1.8416729809568368
best_error: 1.841672980531129
best_error: 1.841672980428331
best_error: 1.8416728452260966
best_error: 1.8416728452173239
best_error: 1.8416728447914303
best_error: 1.84167284471837
best_error: 1.8416727983994128
best_error: 1.8416727983904577
best_error: 1.8416727979661862
best_error: 1.8416727979104235
best_error: 1.8416726590467096
best_error: 1.8416726586124745
best_error: 1.8416726585626835
best_error: 1.8416724957326158
best_error: 1.8416724952983419
best_error: 1.841672495249217
best_error: 1.8416721152753757
best_error: 1.8416721152693214
best_error: 1.8416721148410269
best_error: 1.8416721147939938
