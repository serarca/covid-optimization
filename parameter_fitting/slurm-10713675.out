ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 13.781834116261953
best_error: 13.781834107765834
best_error: 13.78183410679891
best_error: 13.773344465917223
best_error: 13.773344456688914
best_error: 13.773344455818949
best_error: 13.467480839911477
best_error: 13.467480797676785
best_error: 12.117827232637909
best_error: 12.117827011256582
best_error: 10.908343956708197
best_error: 10.90834357046889
best_error: 9.38609501749443
best_error: 9.386094429393006
best_error: 5.99482052320052
best_error: 5.994819791756676
best_error: 5.564367554134198
best_error: 5.5643673334517825
best_error: 5.514858770032609
best_error: 5.514858066827571
best_error: 5.511390468731011
best_error: 5.511390249784739
best_error: 5.486495857613789
best_error: 5.486495153243997
best_error: 5.485994079163204
best_error: 5.4859938620102255
best_error: 5.485897389052429
best_error: 5.485896684617606
best_error: 5.485742078021245
best_error: 5.485741860876306
best_error: 5.485680038532999
best_error: 5.485679821390025
best_error: 5.485677367698623
best_error: 5.48564347854975
best_error: 5.485643145944617
best_error: 5.485517526278401
best_error: 5.485517309154721
best_error: 5.484054287868924
best_error: 5.484054070919504
best_error: 5.478189639589663
best_error: 5.478189422882244
best_error: 5.4541671724070575
best_error: 5.45416695671211
best_error: 5.353651411453381
best_error: 5.353650738584276
best_error: 5.284011442321735
best_error: 5.284010897033923
best_error: 5.282261134352511
best_error: 5.282260604154235
best_error: 5.28219107845666
best_error: 5.282190538425131
best_error: 5.2817647541125545
best_error: 5.281764214850669
best_error: 5.281313346676901
best_error: 5.281312828490989
best_error: 5.281177948381913
best_error: 5.281177417864219
best_error: 5.279713711917176
best_error: 5.279713184415971
best_error: 5.274364214669216
best_error: 5.274363698347884
best_error: 5.245779186271745
best_error: 5.245778683475381
best_error: 5.220362386031406
best_error: 5.220361883458444
best_error: 5.219691796883155
best_error: 5.219691473520184
best_error: 5.218691988465563
best_error: 5.218691483594604
best_error: 5.217565433504067
best_error: 5.217565112320124
best_error: 5.21634311050255
best_error: 5.216342791193316
best_error: 5.216077781701292
best_error: 5.216077483810041
best_error: 5.215670376933568
best_error: 5.215670064798366
best_error: 5.21505197862314
best_error: 5.215051460975808
best_error: 5.1897777679561194
best_error: 5.18977746396768
best_error: 5.1854894312379205
best_error: 5.18548914835773
best_error: 5.174574319657918
best_error: 5.1745737319126786
best_error: 5.162205495877905
best_error: 5.162205222021305
best_error: 5.145525225950056
best_error: 5.145524959389567
best_error: 5.135522719416369
best_error: 5.135522444092134
best_error: 5.129791563228244
best_error: 5.1297912711252796
best_error: 5.107761102065978
best_error: 5.107760525988429
best_error: 5.084511997627275
best_error: 5.084511695312367
best_error: 5.075449500757218
best_error: 5.075449195389975
best_error: 5.067016335861924
best_error: 5.067015750056857
best_error: 5.0526221898665
best_error: 5.052621867089491
best_error: 5.032163902103537
best_error: 5.0321633115962126
best_error: 5.029189871752148
best_error: 5.0291895542427945
best_error: 5.027146135608635
best_error: 5.027145535294813
best_error: 5.019499939675307
best_error: 5.019499628366918
best_error: 5.016244505689204
best_error: 5.016243905087537
best_error: 5.0064900242960455
best_error: 5.0064897207704515
best_error: 4.999133829727517
best_error: 4.9991335300552215
best_error: 4.984696530656156
best_error: 4.9846962372241475
best_error: 4.975685856177071
best_error: 4.975685579332346
best_error: 4.973878988986003
best_error: 4.973878701833028
best_error: 4.967492713672097
best_error: 4.967492454560411
best_error: 4.957487251297099
best_error: 4.957486532581362
best_error: 4.942576797723168
best_error: 4.942576552271204
best_error: 4.938439930900296
best_error: 4.938439217004773
best_error: 4.931682522360222
best_error: 4.931682241921282
best_error: 4.927268007219697
best_error: 4.927267322366907
best_error: 4.9246371064979115
best_error: 4.924636817688496
best_error: 4.917734700991987
best_error: 4.91773401929818
best_error: 4.9097287330989445
best_error: 4.909728436505327
best_error: 4.906639406505861
best_error: 4.906638731562426
best_error: 4.8958753145435665
best_error: 4.895875005788398
best_error: 4.892005722866527
best_error: 4.892005061437198
best_error: 4.883490193319586
best_error: 4.883489867129761
best_error: 4.8787807483056564
best_error: 4.878780093972837
best_error: 4.8752952693679195
best_error: 4.8752949471183875
