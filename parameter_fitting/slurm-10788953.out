ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.801536814724235
best_error: 10.801536776396777
best_error: 10.419716569729834
best_error: 10.419716498045265
best_error: 9.08402728667432
best_error: 9.084027074642467
best_error: 6.497951014835585
best_error: 6.49795054004276
best_error: 5.167276676700703
best_error: 5.167276322006634
best_error: 4.884647321675242
best_error: 4.884647307364525
best_error: 4.884647100875444
best_error: 4.865501885087447
best_error: 4.865501863129774
best_error: 4.865501678156926
best_error: 4.848672151439184
best_error: 4.848672117747227
best_error: 4.848671972866451
best_error: 4.831179189314581
best_error: 4.831179135224224
best_error: 4.831179047961156
best_error: 4.764425003061329
best_error: 4.764424949679398
best_error: 4.764424857039043
best_error: 4.744043644548593
best_error: 4.74404359185438
best_error: 4.744043497236811
best_error: 4.73931607372876
best_error: 4.73931602112254
best_error: 4.739315925814585
best_error: 4.737312537418639
best_error: 4.737312485118498
best_error: 4.737312389093254
best_error: 4.736612951179836
best_error: 4.736612899904389
best_error: 4.736612802696319
best_error: 4.736262303159197
best_error: 4.73626225188938
best_error: 4.736262154629959
best_error: 4.736053805297011
best_error: 4.736053754030554
best_error: 4.736053656740591
best_error: 4.7359625849220865
best_error: 4.735962533657092
best_error: 4.735962436353779
best_error: 4.735897311516981
best_error: 4.73589726025303
best_error: 4.735897162940157
best_error: 4.735896960435873
best_error: 4.735896909171915
best_error: 4.735896811859002
best_error: 4.735896680953422
best_error: 4.735896629689459
best_error: 4.735896532376499
best_error: 4.735896491065651
best_error: 4.735896439801694
best_error: 4.735896342488707
best_error: 4.735896299803384
best_error: 4.735896202490377
best_error: 4.73589616930656
best_error: 4.7358960719935395
best_error: 4.735895998750523
best_error: 4.710345561897121
best_error: 4.710345513061377
best_error: 4.710345409740132
best_error: 4.62088297118726
best_error: 4.620882933783549
best_error: 4.620882806130811
best_error: 4.548785915765258
best_error: 4.548785630285713
best_error: 4.495637211400896
best_error: 4.49563698321521
best_error: 4.467256076120863
best_error: 4.467256071268606
best_error: 4.467255857488384
best_error: 4.378884628498492
best_error: 4.378884602782294
best_error: 4.378884434843168
best_error: 4.37521960232198
best_error: 4.375219415944439
best_error: 4.373994933080855
best_error: 4.373994907244821
best_error: 4.3739947386551155
best_error: 4.361956372106493
best_error: 4.36195634570296
best_error: 4.361956175984652
best_error: 4.360699843569367
best_error: 4.360699817134002
best_error: 4.360699647250337
best_error: 4.359981750455431
best_error: 4.359981724001845
best_error: 4.359981554023742
best_error: 4.359343024480214
best_error: 4.359342998010392
best_error: 4.359342827948348
best_error: 4.359053484455651
best_error: 4.35905345797846
best_error: 4.359053287878391
best_error: 4.358841590106901
best_error: 4.35884156362436
best_error: 4.358841393496437
best_error: 4.3587203861225925
best_error: 4.358720359636976
best_error: 4.358720189493125
best_error: 4.358613293302678
best_error: 4.358613266814331
best_error: 4.358613096656418
best_error: 4.358564584441453
best_error: 4.358564557951869
best_error: 4.35856438778756
best_error: 4.3585164371709375
best_error: 4.358516410680136
best_error: 4.3585162405095055
best_error: 4.358498832350676
best_error: 4.358498805859428
best_error: 4.358498635686473
best_error: 4.358488207890341
best_error: 4.358488181398821
best_error: 4.358488011224479
best_error: 4.358481007918292
best_error: 4.35848098142659
best_error: 4.358480811251305
best_error: 4.358475790935919
best_error: 4.358475764444089
best_error: 4.358475594268118
best_error: 4.358472589072335
best_error: 4.35847256258041
best_error: 4.358472392404024
best_error: 4.35847035048894
best_error: 4.358470323996974
best_error: 4.358470153820287
best_error: 4.358468868428446
best_error: 4.358468841936435
best_error: 4.358468671759551
best_error: 4.358467901260943
best_error: 4.358467874768898
best_error: 4.358467704591897
best_error: 4.3584671716271615
best_error: 4.358467145135103
best_error: 4.358466974957996
best_error: 4.358466759022566
best_error: 4.358466732530495
best_error: 4.358466562353341
best_error: 4.358466457199541
best_error: 4.35846643070747
best_error: 4.3584662605302675
best_error: 4.358466220247551
best_error: 4.358466193755473
best_error: 4.358466023578242
best_error: 4.358465998602528
best_error: 4.358465993544014
best_error: 4.358465978603841
best_error: 4.358465952111757
best_error: 4.358465947053244
best_error: 4.3584659228922344
best_error: 4.358465917833722
best_error: 4.358465904290666
best_error: 4.358465899232149
best_error: 4.35846589222383
best_error: 4.358465887165314
best_error: 4.073616724391426
best_error: 4.073616325225977
best_error: 4.03812669286982
best_error: 4.038126297294559
best_error: 4.017285099204063
best_error: 4.017284707826032
best_error: 4.008432444726014
best_error: 4.008432053295219
best_error: 4.006227509486885
best_error: 4.006227378822381
best_error: 4.0041211436049355
best_error: 4.004120752936774
best_error: 3.995623500929198
best_error: 3.9956231414762233
best_error: 3.9912001242000974
best_error: 3.9911997605322167
best_error: 3.9889133705505673
best_error: 3.988913234574448
best_error: 3.980900397869437
best_error: 3.9809002584392355
best_error: 3.974935366447358
best_error: 3.9749350065874562
best_error: 3.955685929528848
best_error: 3.9556855705013785
best_error: 3.91062894601638
best_error: 3.9106288012052914
best_error: 3.8827040459868867
best_error: 3.8827038999910592
best_error: 3.869177152145518
best_error: 3.8691768157746305
best_error: 3.840332771324448
best_error: 3.840332434107137
best_error: 3.817262187696043
best_error: 3.817262043801021
best_error: 3.805529475894917
best_error: 3.8055291286644204
best_error: 3.783064476521288
best_error: 3.7830643373647286
best_error: 3.7829273320303187
best_error: 3.7829269695046746
best_error: 3.7442445285004142
best_error: 3.7442441110428635
best_error: 3.7433228639989666
best_error: 3.743322446684156
best_error: 3.739750175624643
best_error: 3.739749760033598
best_error: 3.7379138102690987
best_error: 3.7379133961956255
best_error: 3.735822090823886
best_error: 3.735821679111952
best_error: 3.7354107132401357
best_error: 3.7354103017368403
best_error: 3.7352464720519443
best_error: 3.735246060554805
best_error: 3.7351705942330105
best_error: 3.7351701827387123
best_error: 3.735152720538066
best_error: 3.735152591352324
best_error: 3.735127491597421
best_error: 3.735127080101219
best_error: 3.735100169541761
best_error: 3.735099758044361
best_error: 3.735093383013391
best_error: 3.7350929715156953
best_error: 3.735091647209133
best_error: 3.7350912357113617
best_error: 3.735090995940607
best_error: 3.7350908667545237
best_error: 3.7350908453411327
best_error: 3.735090785799518
best_error: 3.735090785797429
best_error: 3.7350907835100475
best_error: 3.735090753305517
best_error: 3.7350907530689774
best_error: 3.7350907530668715
best_error: 3.735090752688498
best_error: 3.735090751648821
best_error: 3.7350907516137175
best_error: 3.735090751587091
best_error: 3.7350907515849885
best_error: 3.7350907514343694
