ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 68
days_switch 40
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 102.11213255651289
best_error: 102.11213234723381
best_error: 20.4345364911132
best_error: 20.434536491112183
best_error: 20.43453648918125
best_error: 20.43433486995247
best_error: 20.4343348680147
best_error: 20.43352230139846
best_error: 20.433522299437165
best_error: 20.430171604763835
best_error: 20.43017160270416
best_error: 20.414940964002668
best_error: 20.414940961470016
best_error: 20.299739631018888
best_error: 20.299739623797066
best_error: 20.296549332413395
best_error: 20.296549325033787
best_error: 18.13718804437958
best_error: 18.137187957344025
best_error: 14.174492215662656
best_error: 14.174492180168782
best_error: 14.04958100311632
best_error: 14.049580994279957
best_error: 14.049580994014626
best_error: 14.048106519945403
best_error: 14.048106511589797
best_error: 14.048106511218391
best_error: 14.048106510881652
best_error: 14.045511248409422
best_error: 14.045511243338009
best_error: 14.045511224199918
best_error: 14.043668998543868
best_error: 14.043668993419987
best_error: 14.043668974893569
best_error: 14.036859252148716
best_error: 14.036859245962024
best_error: 14.03685924218647
best_error: 14.024350014543607
best_error: 14.024350006068094
best_error: 14.024350005425957
best_error: 14.007876709094635
best_error: 14.007876676930787
best_error: 13.929461220358338
best_error: 13.92946121416978
best_error: 13.929461211123293
best_error: 13.929253204145752
best_error: 13.929253197959625
best_error: 13.929253194911707
best_error: 13.92842168046269
best_error: 13.928421674286277
best_error: 13.928421671232648
best_error: 13.925596429038261
best_error: 13.925596136887258
best_error: 13.925444239146277
best_error: 13.925444233030404
best_error: 13.925444229930575
best_error: 13.925374051876727
best_error: 13.925373759700049
best_error: 13.925367624426805
best_error: 13.925367618311789
best_error: 13.925367615211469
best_error: 13.925329888566413
best_error: 13.925329596384579
best_error: 13.924206627132012
best_error: 13.924206598831763
best_error: 13.923252385297845
best_error: 13.92325237916058
best_error: 13.923252376078022
best_error: 13.916660092444104
best_error: 13.916660086350024
best_error: 13.916660083255557
best_error: 13.896836384662379
best_error: 13.896836095118733
best_error: 13.825236049730751
best_error: 13.825236019706898
best_error: 13.772997276302837
best_error: 13.772997270597942
best_error: 13.77299726860636
best_error: 13.772997267699768
best_error: 13.725682500354464
best_error: 13.725682494921706
best_error: 13.725682493372435
best_error: 13.725682491961038
best_error: 13.701346585911963
best_error: 13.701346573876226
best_error: 13.701346314295433
best_error: 13.692752337624722
best_error: 13.692752332666057
best_error: 13.692752331994935
best_error: 13.69275233005051
best_error: 13.691425649056121
best_error: 13.691425644114904
best_error: 13.691425643482804
best_error: 13.691425641487497
best_error: 13.684888978840842
best_error: 13.68488897394589
best_error: 13.684888973463563
best_error: 13.684888971301891
best_error: 13.683468134038305
best_error: 13.68346812913768
best_error: 13.683468128710608
best_error: 13.683468126505971
best_error: 13.682989956696916
best_error: 13.682989951767961
best_error: 13.682989951376173
best_error: 13.682989949166831
best_error: 13.682698197125024
best_error: 13.682698192198533
best_error: 13.682698191822055
best_error: 13.682698189596247
best_error: 13.682607737261922
best_error: 13.682607732335773
best_error: 13.682607731959948
best_error: 13.682607729733562
best_error: 13.682568528359836
best_error: 13.682568523433837
best_error: 13.682568523058292
best_error: 13.68256852083165
best_error: 13.682550308847837
best_error: 13.682550303921905
best_error: 13.682550303546488
best_error: 13.682550301319736
best_error: 13.68254158113509
best_error: 13.68254157620919
best_error: 13.682541575833838
best_error: 13.682541573607029
best_error: 13.68253866954274
best_error: 13.682538664616853
best_error: 13.682538664241518
best_error: 13.682538662014686
best_error: 13.682537618428212
best_error: 13.682537606572147
best_error: 13.682537532895246
best_error: 13.673048355427747
best_error: 13.673048351438926
best_error: 13.67304834913351
best_error: 13.673048348254643
best_error: 13.64965385863453
best_error: 13.649653854358753
best_error: 13.649653852674657
best_error: 13.649653851709989
best_error: 13.641897250880444
best_error: 13.641897246599552
best_error: 13.641897244967806
best_error: 13.641897244030684
best_error: 13.641757328338052
best_error: 13.641757316787562
best_error: 13.641757060598973
best_error: 13.641044837038354
best_error: 13.641044832759807
best_error: 13.641044831127328
best_error: 13.64104483019688
best_error: 13.641030518144094
best_error: 13.64103050658646
best_error: 13.641030250335888
best_error: 13.640978038200108
best_error: 13.640978033921733
best_error: 13.64097803228921
best_error: 13.640978031359237
best_error: 13.640976299240855
best_error: 13.640976294962485
best_error: 13.64097629332996
best_error: 13.640976292400001
best_error: 13.60797698991005
best_error: 13.607976988941264
best_error: 13.60797698372707
best_error: 13.607976983306948
best_error: 13.567506164177626
best_error: 13.567506157239103
best_error: 13.567506155867175
best_error: 13.567315676447382
best_error: 13.56731567596568
best_error: 13.567315669464998
best_error: 13.559853336450294
best_error: 13.559853336125355
best_error: 13.559853328440035
best_error: 13.547833794516086
best_error: 13.547833794187245
best_error: 13.54783378603902
best_error: 13.536072855233964
best_error: 13.536072845704787
best_error: 13.536072844434276
best_error: 13.520511009879106
best_error: 13.520511000693094
best_error: 13.520510999574162
best_error: 13.455623017289106
best_error: 13.455623009239574
best_error: 13.455623008165244
best_error: 13.303042099815961
best_error: 13.30304202765431
best_error: 13.047995770489212
best_error: 13.047995682085123
best_error: 12.93333612124041
best_error: 12.93333602457193
best_error: 12.736468371568398
best_error: 12.736468364688161
best_error: 12.736468357164458
best_error: 12.631740324539596
best_error: 12.631740317544345
best_error: 12.63174031481634
best_error: 12.619658809625488
best_error: 12.619658802189083
best_error: 12.618134797807961
best_error: 12.618134790760593
best_error: 12.618134788320052
best_error: 12.611222436785857
best_error: 12.611222436785855
best_error: 12.611222429710878
best_error: 12.611222427401515
best_error: 12.61105209757699
best_error: 12.611052089131379
best_error: 12.606572496234286
best_error: 12.606572472797513
best_error: 12.606572025525455
best_error: 12.526325197005198
best_error: 12.526325164938235
best_error: 12.497453845611973
best_error: 12.497453802516127
best_error: 12.49692209613506
best_error: 12.49692205295205
best_error: 12.49680235975254
best_error: 12.496802344955636
best_error: 12.49680202748857
best_error: 12.496769853233411
best_error: 12.496769810025445
best_error: 12.496769499285254
best_error: 12.496769456077232
best_error: 12.496769350060895
best_error: 12.496769306852851
best_error: 12.496769240023596
