ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 13.113714688850738
best_error: 13.11371460961472
best_error: 10.312432855737224
best_error: 10.312432850118086
best_error: 10.31243282113842
best_error: 9.794260502343226
best_error: 9.794260494631441
best_error: 9.62385054355822
best_error: 9.623850533055904
best_error: 9.544142155902009
best_error: 9.544142142062288
best_error: 8.591335654009786
best_error: 8.59133556627378
best_error: 6.566683160628492
best_error: 6.566682933345008
best_error: 6.033180214450316
best_error: 6.03318002085053
best_error: 5.3377064136452645
best_error: 5.337706253997206
best_error: 4.635452158223082
best_error: 4.635452006465046
best_error: 4.24549049175472
best_error: 4.245490353217647
best_error: 4.094976337527395
best_error: 4.094976209025207
best_error: 4.049436867774762
best_error: 4.049436737720477
best_error: 4.038148039159036
best_error: 4.038147907977353
best_error: 4.034664137871999
best_error: 4.03466400634426
best_error: 4.0323928181505355
best_error: 4.032392687410708
best_error: 4.0275954603228366
best_error: 4.027595329086676
best_error: 4.027531496244395
best_error: 4.027531365001621
best_error: 4.027509251034321
best_error: 4.027509119789268
best_error: 4.027499101700748
best_error: 4.027498970454637
best_error: 4.027482908503897
best_error: 4.02748277725612
best_error: 4.027477445122542
best_error: 4.0274773138742015
best_error: 4.02747530418573
best_error: 4.027475172937162
best_error: 4.027472187323323
best_error: 4.027472184610355
best_error: 4.027470444265528
best_error: 4.027470313016453
best_error: 4.027469586822612
best_error: 4.027469455573465
best_error: 4.0274693621537185
best_error: 4.027469230904538
best_error: 4.027469194510429
best_error: 4.027469181603634
best_error: 4.027469106244451
best_error: 4.02746899009213
best_error: 4.027468987379114
best_error: 3.9983186087765
best_error: 3.9983184764067294
best_error: 3.991459687342658
best_error: 3.991459555129688
best_error: 3.9451948311823926
best_error: 3.945194697737394
best_error: 3.76696082168588
best_error: 3.7669606645678515
best_error: 3.7158774049808923
best_error: 3.7158772432578333
best_error: 3.682460494043129
best_error: 3.6824604855285474
best_error: 3.6823690556368054
best_error: 3.682368890129081
best_error: 3.6806265927843986
best_error: 3.680626427119975
best_error: 3.680038893789321
best_error: 3.6800387280683573
best_error: 3.6797960030588106
best_error: 3.679795837314474
best_error: 3.6796360759964797
best_error: 3.6796359102367475
best_error: 3.6795699269956215
best_error: 3.6795697612295317
best_error: 3.6795532789949252
best_error: 3.679553113227077
best_error: 3.679552965694021
best_error: 3.6795529351136116
best_error: 3.6795528418816654
best_error: 3.679552811301234
best_error: 3.6795527863528843
best_error: 3.6795527557724608
best_error: 3.6795527321729407
best_error: 3.675946658318732
best_error: 3.675946649702605
best_error: 3.674177966336125
best_error: 3.674177957649511
best_error: 3.6669533113282373
best_error: 3.6669533097175933
best_error: 3.6669533023886727
best_error: 3.6632985284071764
best_error: 3.6632985253575736
best_error: 3.6632985193452843
best_error: 3.65874977512337
best_error: 3.6587497710778103
best_error: 3.658749765776715
best_error: 3.6508006390885894
best_error: 3.6508006293189847
best_error: 3.650333627348338
best_error: 3.6503336174615093
best_error: 3.6484108399184842
best_error: 3.6484108295627333
best_error: 3.639843436849337
best_error: 3.639843424616619
best_error: 3.6165200705259952
best_error: 3.6165198950374293
best_error: 3.6124830754608244
best_error: 3.6124830585959664
best_error: 3.6123301972385606
best_error: 3.612330021007062
best_error: 3.612157308551348
best_error: 3.6121571322940262
best_error: 3.6120584371812683
best_error: 3.612058260909196
best_error: 3.6120018651429686
best_error: 3.6120016888624584
best_error: 3.6119695217526946
best_error: 3.6119693454673536
best_error: 3.6119510655203015
best_error: 3.6119508892322143
best_error: 3.611923497546164
best_error: 3.6119233212545403
best_error: 3.611918544365677
best_error: 3.6119183680734137
best_error: 3.611916656612764
best_error: 3.6119165097180357
best_error: 3.611916313521227
best_error: 3.611916295620431
best_error: 3.611916239716045
best_error: 3.6119162397160443
best_error: 3.6119162218152447
best_error: 3.6119162164457546
best_error: 3.6119162090142627
best_error: 3.608182096152642
best_error: 3.608181919967774
best_error: 3.597455185265096
best_error: 3.597455008349203
best_error: 3.5849694500695155
best_error: 3.5819473313096046
best_error: 3.581947331309604
best_error: 3.5818103045406073
best_error: 3.581810125789734
best_error: 3.5817012675425945
best_error: 3.5816201986794085
best_error: 3.5816194802028005
best_error: 3.5816193014295683
best_error: 3.581618596977494
best_error: 3.4630910891813604
best_error: 3.4453376477640614
best_error: 3.4450913856815717
best_error: 3.445084445878274
best_error: 3.4450624192399477
best_error: 3.4449624835420876
best_error: 3.4445652348928384
best_error: 3.4436587436034296
best_error: 3.4411392750680436
best_error: 3.4346456804729755
best_error: 3.417379126812711
best_error: 3.352326159490445
best_error: 3.352325899116849
best_error: 3.3266579502958384
best_error: 3.326657616784721
best_error: 3.104944966169015
best_error: 3.1049446764065713
best_error: 3.0099339117818475
best_error: 3.00993362849976
best_error: 2.9550991019593393
best_error: 2.955098823424456
best_error: 2.9235282965183647
best_error: 2.92352801820462
