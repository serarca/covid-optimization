ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 25.410210198557017
best_error: 25.410210060682708
best_error: 11.695919421501841
best_error: 11.695919412941386
best_error: 11.695919408702604
best_error: 11.640352369860274
best_error: 11.640352361065874
best_error: 11.586504534371214
best_error: 11.586504526644081
best_error: 11.586504516308947
best_error: 11.52811593665385
best_error: 11.528115926301606
best_error: 11.133011248285662
best_error: 11.133011210610032
best_error: 10.491501015757342
best_error: 10.49150091136796
best_error: 8.126474683504775
best_error: 8.126474531606185
best_error: 8.034759713913964
best_error: 8.034759572087426
best_error: 7.946320143521122
best_error: 7.946320011581422
best_error: 7.848592040491722
best_error: 7.848591937482008
best_error: 7.848591931383369
best_error: 7.768924292774531
best_error: 7.7689242146501725
best_error: 7.768924176039385
best_error: 7.751439093080065
best_error: 7.751439021563794
best_error: 7.751438974754551
best_error: 7.700740857677255
best_error: 7.700740803430608
best_error: 7.700740733981754
best_error: 7.696049058380252
best_error: 7.696049004469595
best_error: 7.696048934153626
best_error: 7.6903364153057225
best_error: 7.690336361573083
best_error: 7.690336290419298
best_error: 7.68570958115856
best_error: 7.685709526542505
best_error: 7.685709455718477
best_error: 7.668243800200493
best_error: 7.668243751142766
best_error: 7.668243672736449
best_error: 7.655607994855174
best_error: 7.655607947347734
best_error: 7.655607865839963
best_error: 7.655263280400016
best_error: 7.655263232829993
best_error: 7.65526315133458
best_error: 7.6549759298556665
best_error: 7.654975882233594
best_error: 7.654975800748423
best_error: 7.65444097943259
best_error: 7.654440897658681
best_error: 7.653319247452398
best_error: 7.6533191995323
best_error: 7.653319118104328
best_error: 7.652862188351355
best_error: 7.652862140349637
best_error: 7.652862058936924
best_error: 7.652777753091662
best_error: 7.652777705074902
best_error: 7.652777623665007
best_error: 7.652700161202711
best_error: 7.652700113172125
best_error: 7.65270003176477
best_error: 7.652681981072453
best_error: 7.652681933038616
best_error: 7.6526818516318675
best_error: 7.65267119748097
best_error: 7.652671149445216
best_error: 7.652671068038808
best_error: 7.652667362210414
best_error: 7.652667314173975
best_error: 7.652667232767696
best_error: 7.652646307771162
best_error: 7.65264625973098
best_error: 7.652646178325397
best_error: 7.6526459989609545
best_error: 7.652645950920712
best_error: 7.6526458695151405
best_error: 7.652645701550503
best_error: 7.652645653510216
best_error: 7.652645572104676
best_error: 7.652645528378787
best_error: 7.6526454907622865
best_error: 7.652645461261551
best_error: 7.652645413221208
best_error: 7.652645331815664
best_error: 7.652645298996351
best_error: 7.652645217590819
best_error: 7.6526452010660755
best_error: 7.652645163426279
best_error: 7.635874297322781
best_error: 7.635874248186234
best_error: 7.634119424274241
best_error: 7.634119374908206
best_error: 7.633662364004618
best_error: 7.633662364004495
best_error: 7.633445057704451
best_error: 7.633445008250218
best_error: 7.633444047261127
best_error: 7.633444047261038
best_error: 7.633439158355293
best_error: 7.63343910890029
best_error: 7.633437639158507
best_error: 7.633437639158396
best_error: 7.633436609978629
best_error: 7.6334365889361635
best_error: 7.633436557559012
best_error: 7.633359504590587
best_error: 7.633359455123397
best_error: 7.633354833863873
best_error: 7.633354784396076
best_error: 7.633349854148955
best_error: 7.6333498046807335
best_error: 7.633107337329656
best_error: 7.633107287841813
best_error: 7.632138341046865
best_error: 7.632138291481028
best_error: 7.628294181610972
best_error: 7.62829413046439
best_error: 7.613586362316131
best_error: 7.613586307601757
best_error: 7.566725251510333
best_error: 7.566725169532088
best_error: 7.546362917167743
best_error: 7.546362774523028
best_error: 7.542701807396402
best_error: 7.542701686326351
best_error: 7.542611178630544
best_error: 7.542611042207165
best_error: 7.542595750123028
best_error: 7.54259562679157
best_error: 7.542581248242533
best_error: 7.542581124967763
best_error: 7.542569758977072
best_error: 7.542569635747196
best_error: 7.542562910866742
best_error: 7.542562787663625
best_error: 7.5425576626681945
best_error: 7.542557539485567
best_error: 7.542554235224699
best_error: 7.542554112055461
best_error: 7.5425517768232835
best_error: 7.542551653663649
best_error: 7.542549830624388
best_error: 7.542549707472364
best_error: 7.542548655733457
best_error: 7.542548532586016
best_error: 7.542547944864232
best_error: 7.542547821719561
best_error: 7.542547696391734
best_error: 7.542547573248044
best_error: 7.5425475391600845
best_error: 7.542547514927464
best_error: 7.54254747898327
best_error: 7.542547462488289
best_error: 7.542547461833621
best_error: 7.54254745950047
