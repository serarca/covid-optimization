ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.424633823273982
best_error: 10.424633740327778
best_error: 10.42463373838944
best_error: 9.748096035281813
best_error: 9.748095924858653
best_error: 9.218071481458171
best_error: 9.218071336544156
best_error: 8.684979438654619
best_error: 8.684979277751667
best_error: 8.39511201433405
best_error: 8.395111951054162
best_error: 8.395111889830773
best_error: 7.323411540800784
best_error: 7.3234114106855515
best_error: 6.658707821848315
best_error: 6.658707754798456
best_error: 6.658707692256598
best_error: 6.513882492039568
best_error: 6.513882419923942
best_error: 6.513882361724486
best_error: 6.474448473633776
best_error: 6.474448401270523
best_error: 6.474448342879768
best_error: 6.460487869219768
best_error: 6.46048779569001
best_error: 6.46048773831898
best_error: 6.456919922740353
best_error: 6.456919848912983
best_error: 6.456919791802038
best_error: 6.455826649996995
best_error: 6.455826576078478
best_error: 6.455826519047179
best_error: 6.455141563432566
best_error: 6.455141489456948
best_error: 6.455141432475541
best_error: 6.454823355760007
best_error: 6.454823281757861
best_error: 6.454823224799664
best_error: 6.454595833454729
best_error: 6.454595759433635
best_error: 6.454595702492
best_error: 6.454523261538862
best_error: 6.454523187511697
best_error: 6.454523130575344
best_error: 6.45451333501819
best_error: 6.4545132609902005
best_error: 6.454513204054556
best_error: 6.454507731483595
best_error: 6.454507657455132
best_error: 6.454507600519882
best_error: 6.454504935914093
best_error: 6.454504861885389
best_error: 6.454504804950352
best_error: 6.454503089324584
best_error: 6.454503015295742
best_error: 6.45450295836085
best_error: 6.454502403629352
best_error: 6.45450232960045
best_error: 6.454502272665585
best_error: 6.4545019803111785
best_error: 6.454501906282243
best_error: 6.4545018493474196
best_error: 6.454501780031809
best_error: 6.454501649068059
best_error: 4.6419295060747
best_error: 4.641929249174641
best_error: 4.579578839910777
best_error: 4.579578495819536
best_error: 4.548743365351777
best_error: 4.548743042268777
best_error: 4.373889378985448
best_error: 4.373889106780005
best_error: 4.292728667841915
best_error: 4.292728401679556
best_error: 4.233433114508461
best_error: 4.233432857211738
best_error: 4.195161040116219
best_error: 4.195160780514663
best_error: 4.177456977620496
best_error: 4.177456719220185
best_error: 4.1629109211342685
best_error: 4.162910662251777
best_error: 4.154628773069906
best_error: 4.154628513335657
best_error: 4.152591190413297
best_error: 4.15259093043827
best_error: 4.1510552714690325
best_error: 4.151055011312786
best_error: 4.150060444362984
best_error: 4.150060185258376
best_error: 4.149303577856067
best_error: 4.149303318662252
best_error: 4.148836477338886
best_error: 4.148836218090032
best_error: 4.148384558550173
best_error: 4.148384299248107
best_error: 4.148175923769532
best_error: 4.148175664442909
best_error: 3.6291866696997683
best_error: 3.629186321728922
best_error: 3.5928265990062256
best_error: 3.592826233916753
best_error: 3.277738350306673
best_error: 3.2777380562850578
best_error: 3.2620396780768512
best_error: 3.262039380638002
best_error: 3.2529583445836345
best_error: 3.252958045105946
best_error: 3.2474554371387043
best_error: 3.247455136423876
best_error: 3.2442335846446966
best_error: 3.2442332832003906
best_error: 3.242480866823175
best_error: 3.242480564982249
best_error: 3.240137084010926
best_error: 3.240137083987001
best_error: 3.240136963654693
best_error: 3.111847562701721
best_error: 3.111847215453871
best_error: 3.0524943605662704
best_error: 3.0524939690362
best_error: 2.589202399277779
best_error: 2.5892020577099544
best_error: 2.512591165797602
best_error: 2.512590815578107
best_error: 2.3215741523519036
best_error: 2.3215737743869713
best_error: 2.301056978658697
best_error: 2.3010566019797363
best_error: 2.292561548595473
best_error: 2.292561173528629
best_error: 2.291910124930765
best_error: 2.2919097498083874
best_error: 2.2917125672175227
best_error: 2.2917121920742423
best_error: 2.2916973380935737
best_error: 2.2916969629486816
best_error: 2.291695602815646
best_error: 2.2916952276705738
best_error: 2.2916944068084533
best_error: 2.2916943602154696
best_error: 2.2916943539326864
best_error: 2.2916943445144735
best_error: 2.2916943349845855
best_error: 2.2813384967612964
best_error: 2.281338087227744
best_error: 2.2798708939163923
best_error: 2.2798705015391088
best_error: 2.2789266080853494
best_error: 2.2789262120063176
best_error: 2.278899570569342
best_error: 2.2788991741070896
best_error: 2.278898865358176
best_error: 2.2788988235419834
best_error: 2.2788988164013837
best_error: 2.2788942727183734
best_error: 2.2788938762528064
best_error: 2.27887452069118
best_error: 2.2788741242245893
best_error: 2.2787955949596004
best_error: 2.278795198488991
best_error: 2.2785080685827843
best_error: 2.2785076735340555
best_error: 2.27846054548362
best_error: 2.278460150729696
best_error: 2.2783718582098973
best_error: 2.278371463448872
best_error: 2.2783194308367687
best_error: 2.278319036071541
best_error: 2.2783180416524673
best_error: 2.278317646887099
best_error: 2.278316775195851
best_error: 2.278316380430379
best_error: 2.278315127700412
best_error: 2.278314732934777
best_error: 2.27831209314493
best_error: 2.2783116983789906
best_error: 2.2783083000595656
best_error: 2.278308271589821
best_error: 2.278308253350422
best_error: 2.278308238094391
best_error: 2.278308229235117
best_error: 2.2783081803175493
best_error: 2.2783081518478947
best_error: 2.2783081518478925
