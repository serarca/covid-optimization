ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 82
days_switch 85
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 105.39107088091504
best_error: 105.39107074105249
best_error: 105.39107072251011
best_error: 17.36118614187395
best_error: 17.36118614186694
best_error: 17.361186129321457
best_error: 17.345199270953955
best_error: 17.345199257980227
best_error: 17.275586769571763
best_error: 17.275586754698914
best_error: 16.853386024809566
best_error: 16.853385994895987
best_error: 15.830648092388637
best_error: 15.830648008753915
best_error: 13.95565821118046
best_error: 13.95565814504945
best_error: 13.49358736060364
best_error: 13.493587267653135
best_error: 13.323646791443405
best_error: 13.323646696426945
best_error: 13.05043181528676
best_error: 13.050431786308057
best_error: 13.036477357004998
best_error: 13.03647733563265
best_error: 13.036477329423054
best_error: 12.64572157103389
best_error: 12.645721539515717
best_error: 12.581379472843846
best_error: 12.581379442961644
best_error: 12.525389170923775
best_error: 12.52538914812108
best_error: 12.181429849533618
best_error: 12.181429849533613
best_error: 12.181429847618844
best_error: 12.181429828445935
best_error: 12.039942288721743
best_error: 12.039942229601658
best_error: 11.941296655023688
best_error: 11.941296627995914
best_error: 10.944226480426346
best_error: 10.944226457927646
best_error: 10.63305460797851
best_error: 10.633054246529365
best_error: 10.2798972856775
best_error: 10.279897276359298
best_error: 10.268680486880065
best_error: 10.268680322582812
best_error: 10.219272273373559
best_error: 10.219272266953741
best_error: 10.219272265469547
best_error: 10.163306717856281
best_error: 10.16330669842186
best_error: 10.15214347506113
best_error: 10.152143454936343
best_error: 10.110366596950543
best_error: 10.110366590666331
best_error: 10.110366588603837
best_error: 10.000422284887904
best_error: 10.000422275065734
best_error: 9.870042374005966
best_error: 9.87004234918896
best_error: 9.726138164263837
best_error: 9.726138141023956
best_error: 9.724166349011126
best_error: 9.724166282821495
best_error: 9.604643319939047
best_error: 9.60464326346441
best_error: 9.184516083853318
best_error: 9.184516080113212
best_error: 9.184516075533542
best_error: 9.178642550280458
best_error: 9.178642544003031
best_error: 9.17864254347905
best_error: 9.178642543114183
best_error: 9.157247953140654
best_error: 9.157247943878254
best_error: 9.150014493468873
best_error: 9.150014427457716
best_error: 9.148466765417558
best_error: 9.148466754927984
best_error: 9.144691928051436
best_error: 9.144691864555135
best_error: 9.144628225805493
best_error: 9.144628213486422
best_error: 9.144578282750377
best_error: 9.144578219261742
best_error: 9.144493942498238
best_error: 9.14449393017728
best_error: 9.144470396993038
best_error: 9.144470384671742
best_error: 9.144469492252467
best_error: 9.144469428772123
best_error: 9.135343972000555
best_error: 9.135343861037619
best_error: 9.129330113133985
best_error: 9.129330041154978
best_error: 9.11219858745474
best_error: 9.112198584835404
best_error: 9.11219857869493
best_error: 9.110643360165717
best_error: 9.110643295184982
best_error: 9.106765221186071
best_error: 9.10676521401566
best_error: 9.10676521392464
best_error: 9.094173951173822
best_error: 9.094173942631835
best_error: 9.093922148368481
best_error: 9.093922087511308
best_error: 9.084134091796795
best_error: 9.084133991601027
best_error: 9.053518725050314
best_error: 9.053518628046195
best_error: 8.968412405594078
best_error: 8.968412352052557
best_error: 8.92405016419798
best_error: 8.924050115738922
best_error: 8.909167731021444
best_error: 8.909167533158781
best_error: 8.856355949105513
best_error: 8.85635587971054
best_error: 8.807938657061786
best_error: 8.807938491520005
best_error: 8.78509719787319
best_error: 8.785097159139642
best_error: 8.779562747751076
best_error: 8.779562549779746
best_error: 8.717644361921282
best_error: 8.71764432371421
best_error: 8.699864568033414
best_error: 8.699864518595902
best_error: 8.672588642342749
best_error: 8.672588601057914
best_error: 8.665628795271353
best_error: 8.665628623917156
best_error: 8.6638168511677
best_error: 8.663816812400697
best_error: 8.663367047148157
best_error: 8.66336700839878
best_error: 8.654913307510926
best_error: 8.654913147769411
best_error: 8.65428988142947
best_error: 8.654289728798366
best_error: 8.654279085305157
best_error: 8.654279045986533
best_error: 8.65409342051922
best_error: 8.654093267901974
best_error: 8.653875455912733
best_error: 8.653875415444965
best_error: 8.653745044125685
best_error: 8.653744891457384
best_error: 8.65374151565793
best_error: 8.653741476342482
best_error: 8.652631888870657
best_error: 8.65263174461199
best_error: 8.652463049195665
best_error: 8.652462904912685
best_error: 8.652440846374217
best_error: 8.652440805772219
best_error: 8.64601008931029
best_error: 8.646009970349812
best_error: 8.645930683137724
best_error: 8.645930638640854
best_error: 8.645880073211032
best_error: 8.645879954233163
best_error: 8.64587604000901
best_error: 8.645875921030598
best_error: 8.64587443217365
best_error: 8.645874313195025
best_error: 8.645873902292212
best_error: 8.645873879613355
best_error: 8.645873867715096
best_error: 8.645873853018125
best_error: 8.645873847758665
best_error: 8.645873833061698
best_error: 8.645873822737302
best_error: 8.645873819843938
best_error: 8.645873819018627
best_error: 8.641107733245878
best_error: 8.641107663583593
best_error: 8.640718072776439
best_error: 8.640718003049159
best_error: 8.64043591250658
best_error: 8.640435842732234
best_error: 8.640302712728625
best_error: 8.64030264293206
best_error: 8.640200017598755
best_error: 8.640199947785062
