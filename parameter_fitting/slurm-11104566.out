ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 76
days_switch 55
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 102.77619163607172
best_error: 102.77619155223564
best_error: 102.77619145848149
best_error: 19.296071591100173
best_error: 19.29607159109743
best_error: 19.29607158500575
best_error: 19.286482273839688
best_error: 19.28648227383686
best_error: 19.286482267399002
best_error: 19.241839630044428
best_error: 19.241839630040626
best_error: 19.241839621761596
best_error: 18.739625516257767
best_error: 18.739625515977487
best_error: 18.739625466702055
best_error: 18.60078881311306
best_error: 18.600788812658607
best_error: 18.60078874921503
best_error: 18.386296066040885
best_error: 18.38629606524708
best_error: 18.386295979735152
best_error: 16.54724777614957
best_error: 16.547247770786882
best_error: 16.54724747515612
best_error: 14.516633236109625
best_error: 14.51663322892824
best_error: 14.516633158026044
best_error: 14.460922314352153
best_error: 14.460922307433805
best_error: 14.46092226622567
best_error: 14.460922242200503
best_error: 14.436659869927727
best_error: 14.436659862948513
best_error: 14.436659834224589
best_error: 14.436659764195412
best_error: 14.377355909914293
best_error: 14.377355830599507
best_error: 14.25729621149853
best_error: 14.257296110951808
best_error: 13.765654176322903
best_error: 13.765654014387747
best_error: 12.475750296294326
best_error: 12.475750140713323
best_error: 12.151325921281533
best_error: 12.151325902969681
best_error: 12.151325900292743
best_error: 12.067646151849942
best_error: 12.067646127698605
best_error: 12.012272538493605
best_error: 12.01227252681647
best_error: 12.012272521553381
best_error: 12.00219624967086
best_error: 12.002196228195194
best_error: 11.872742741985643
best_error: 11.872742726247898
best_error: 11.872742726177817
best_error: 11.804693891676436
best_error: 11.804693801306243
best_error: 11.752827550315063
best_error: 11.75282754061715
best_error: 11.75282753651863
best_error: 11.745591214377864
best_error: 11.745591206358046
best_error: 11.745591200871733
best_error: 11.736886443315793
best_error: 11.736886436450288
best_error: 11.736886430101809
best_error: 11.73096302804967
best_error: 11.730962791740653
best_error: 11.728656536725982
best_error: 11.728656531786505
best_error: 11.728656523755646
best_error: 11.727675134543667
best_error: 11.727674910693084
best_error: 11.727655935797623
best_error: 11.72765593086898
best_error: 11.727655922852806
best_error: 11.725260809741265
best_error: 11.72526080522442
best_error: 11.72526080510941
best_error: 11.72526079687469
best_error: 11.713451817971848
best_error: 11.713451817086437
best_error: 11.713451785662453
best_error: 11.692846673498126
best_error: 11.692846623305895
best_error: 11.615597451491112
best_error: 11.615597381381686
best_error: 11.290912821784037
best_error: 11.290912771077327
best_error: 10.921017951592013
best_error: 10.921017929943478
best_error: 10.903824376057372
best_error: 10.903824356200642
best_error: 10.89427136561708
best_error: 10.894271346775438
best_error: 10.893070329533137
best_error: 10.893070310394931
best_error: 10.892606363087936
best_error: 10.892606343996682
best_error: 10.892469812417687
best_error: 10.892469739914226
best_error: 10.882333149432663
best_error: 10.882333128659454
best_error: 10.880177673352959
best_error: 10.880177651511561
best_error: 10.875364292296156
best_error: 10.875364270643516
best_error: 10.768354216374833
best_error: 10.768354201632285
best_error: 10.761529224011538
best_error: 10.761529209987279
best_error: 10.761209515833112
best_error: 10.761209344139463
best_error: 10.760594481348038
best_error: 10.76059446733753
best_error: 10.760350770815402
best_error: 10.760350599335581
best_error: 10.756446925445953
best_error: 10.756446909387565
best_error: 10.75570658512265
best_error: 10.755706569422227
best_error: 10.755076896994286
best_error: 10.755076881348522
best_error: 10.748402017025994
best_error: 10.748402001406381
best_error: 10.713923057721727
best_error: 10.713922947992081
best_error: 10.712260029789569
best_error: 10.712260012974884
best_error: 10.703841506991717
best_error: 10.703841490054272
best_error: 10.70130267623287
best_error: 10.701302659550532
best_error: 10.689952588485491
best_error: 10.689952575496887
best_error: 10.685946262737508
best_error: 10.68594624988221
best_error: 10.60223859521125
best_error: 10.60223858806971
best_error: 10.596312547986152
best_error: 10.596312544022366
best_error: 10.584449749576017
best_error: 10.58444974590698
best_error: 10.580859798709653
best_error: 10.580859783617313
best_error: 10.58085962474756
best_error: 10.58081340113129
best_error: 10.580813397546722
best_error: 10.576848732254968
best_error: 10.576848732254966
best_error: 10.576848729247772
best_error: 10.571460976422467
best_error: 10.571460976422465
best_error: 10.571460974727671
best_error: 10.571460973829089
best_error: 10.56939796074276
best_error: 10.569397954415548
best_error: 10.566813773053278
best_error: 10.566813767183573
best_error: 10.563616559712687
best_error: 10.563616556826702
best_error: 10.560484631449373
best_error: 10.560484628409423
best_error: 10.560123155490661
best_error: 10.560123152430396
best_error: 10.540988945065097
best_error: 10.54098894290522
best_error: 10.540988941814154
