ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 66
days_switch 50
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.8444088257458
best_error: 101.84440865469256
best_error: 101.84440862503847
best_error: 20.56636044857315
best_error: 20.566360448572343
best_error: 20.566360447106625
best_error: 20.56618068721279
best_error: 20.5661806857411
best_error: 20.5654552758054
best_error: 20.56545527431275
best_error: 20.562447723252742
best_error: 20.56244772167145
best_error: 20.548421813863108
best_error: 20.548421811833613
best_error: 20.41870938749672
best_error: 20.418709379303962
best_error: 20.415968788188547
best_error: 20.415968779829534
best_error: 20.07213806332684
best_error: 20.072138024527668
best_error: 15.946931415933015
best_error: 15.946930846449774
best_error: 14.311204688278483
best_error: 14.311204681082359
best_error: 14.31120467656216
best_error: 14.311042221481443
best_error: 14.311042214315075
best_error: 14.311042209740368
best_error: 14.31083572762677
best_error: 14.310835721632174
best_error: 14.31083571387262
best_error: 14.306120459797635
best_error: 14.306120453497744
best_error: 14.30612044681288
best_error: 14.28897640062744
best_error: 14.288976393283786
best_error: 14.288976390659746
best_error: 14.22591635051056
best_error: 14.225916346551728
best_error: 14.225916315461204
best_error: 14.216661507221907
best_error: 14.216661504618147
best_error: 14.216661458312917
best_error: 14.213695442768827
best_error: 14.21369510182375
best_error: 14.212799678131976
best_error: 14.21279967551809
best_error: 14.21279962934521
best_error: 14.21219740223821
best_error: 14.21219706148146
best_error: 14.211370890960207
best_error: 14.21137055457664
best_error: 14.211362801804654
best_error: 14.21136279921133
best_error: 14.211362752765593
best_error: 14.209345705619622
best_error: 14.209345701917862
best_error: 14.209345668416471
best_error: 14.208064138638097
best_error: 14.208063813017695
best_error: 14.207222069677677
best_error: 14.207222065641254
best_error: 14.207222044741865
best_error: 14.205741541046851
best_error: 14.205741537001035
best_error: 14.205741516269164
best_error: 14.200460903505135
best_error: 14.200460878363756
best_error: 14.151596990734003
best_error: 14.151596965828434
best_error: 14.062987666506466
best_error: 14.062987664612859
best_error: 14.062987661379964
best_error: 14.06298765771913
best_error: 14.059916337206875
best_error: 14.059916335934162
best_error: 14.059916332196275
best_error: 14.059916328419405
best_error: 14.058372039967495
best_error: 14.058372038844457
best_error: 14.058372034995202
best_error: 14.058372031179953
best_error: 14.058166033312986
best_error: 14.058166027739336
best_error: 14.058166024540949
best_error: 14.058118127138432
best_error: 14.058118125990987
best_error: 14.058118122166022
best_error: 14.058118118350876
best_error: 14.057844947253798
best_error: 14.057844941682028
best_error: 14.057844938481765
best_error: 14.057829492035886
best_error: 14.057829491154209
best_error: 14.057829487102325
best_error: 14.057829483248323
best_error: 14.057809503661586
best_error: 14.057809502777976
best_error: 14.05780949872801
best_error: 14.057809494874018
best_error: 14.057804099605868
best_error: 14.05780409872174
best_error: 14.057804094672292
best_error: 14.057804090818305
best_error: 14.057803296564654
best_error: 14.057803295680447
best_error: 14.057803291631082
best_error: 14.057803287777093
best_error: 14.057802930149998
best_error: 14.057802921362432
best_error: 14.057241315759295
best_error: 14.057241310185862
best_error: 14.057241306988105
best_error: 14.055351284698755
best_error: 14.0553512791226
best_error: 14.055351275927894
best_error: 14.047794404389819
best_error: 14.047794398802758
best_error: 14.047794395620189
best_error: 14.017619543986378
best_error: 14.017619538355358
best_error: 14.017619535221705
best_error: 13.897925323404808
best_error: 13.89792531755077
best_error: 13.897925314659998
best_error: 13.442503318264983
best_error: 13.44250325853552
best_error: 13.160163387640267
best_error: 13.160163310274395
best_error: 13.136245431670892
best_error: 13.136245361978816
best_error: 13.135579375399526
best_error: 13.135579366201902
best_error: 12.916593693931262
best_error: 12.916593670329036
best_error: 12.91659320563021
best_error: 12.913750727413275
best_error: 12.913750703271303
best_error: 12.851479812201777
best_error: 12.851479806006246
best_error: 12.83080604610203
best_error: 12.830805951479448
best_error: 12.82650028815942
best_error: 12.826500194265641
best_error: 12.824474672772674
best_error: 12.82447457993968
best_error: 12.823504304536534
best_error: 12.823504212600735
best_error: 12.823385467552992
best_error: 12.823385375610332
best_error: 12.823369063106323
best_error: 12.823368971162727
best_error: 12.823360119953628
best_error: 12.823360028009517
best_error: 12.823356429811756
best_error: 12.823356337867436
best_error: 12.823356311720493
best_error: 12.823356305764296
best_error: 12.82335506291681
best_error: 12.823354970972407
best_error: 12.82335476074624
best_error: 12.823354668801816
best_error: 12.82335464677558
best_error: 12.823354594146359
