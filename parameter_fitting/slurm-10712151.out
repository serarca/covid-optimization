ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.063763379818367
best_error: 9.063763330629623
best_error: 7.971246732413332
best_error: 7.971246153971244
best_error: 7.655691497821938
best_error: 7.655691362045712
best_error: 6.312708819735322
best_error: 6.312708536053879
best_error: 6.27759567684141
best_error: 6.277595381885368
best_error: 6.277595371943716
best_error: 6.147540313038016
best_error: 6.147540051611779
best_error: 6.147539985051987
best_error: 4.793896917133813
best_error: 4.793896745584831
best_error: 4.793896665230568
best_error: 4.307311322588679
best_error: 4.3073111733264335
best_error: 4.307311087434215
best_error: 4.078356612996877
best_error: 4.078356460786072
best_error: 4.0783563769382045
best_error: 4.070683111563018
best_error: 4.070682958974111
best_error: 4.07068287531384
best_error: 4.0695683126219535
best_error: 4.069568159978163
best_error: 4.0695680763451545
best_error: 4.069293677188317
best_error: 4.069293524530992
best_error: 4.069293440904694
best_error: 4.069143984226562
best_error: 4.06914383156187
best_error: 4.0691437479392345
best_error: 4.069135264015717
best_error: 4.0691351113505965
best_error: 4.069135027728185
best_error: 4.06913248510315
best_error: 4.0691323324378885
best_error: 4.06913224881556
best_error: 4.069130965127387
best_error: 4.069130953574856
best_error: 4.069130934287257
best_error: 3.423690660125141
best_error: 3.4236906579696464
best_error: 3.138790799109408
best_error: 3.1387905683367867
best_error: 3.017568233759646
best_error: 3.0175680299281464
best_error: 2.7882690685596114
best_error: 2.7882690661726732
best_error: 2.3727773993077683
best_error: 2.3727771771332957
best_error: 2.306602830259093
best_error: 2.306602613713525
best_error: 2.2763993035092884
best_error: 2.276399084055625
best_error: 2.2647047767534945
best_error: 2.264704557154095
best_error: 2.257981522347529
best_error: 2.257981302104405
best_error: 2.2536138374395653
best_error: 2.253613616778848
best_error: 2.251466742764374
best_error: 2.251466521898533
best_error: 2.249938542835212
best_error: 2.249938321823463
best_error: 2.249916817208086
best_error: 2.249916596190973
best_error: 2.2498905870737245
best_error: 2.249890366050125
best_error: 2.249825886316173
best_error: 2.2498256652765782
best_error: 2.2497760980233723
best_error: 2.2497760959589037
best_error: 2.2497288057278073
best_error: 2.249728584664198
best_error: 2.249702217429647
best_error: 2.2497019963594624
best_error: 2.2496920344536298
best_error: 2.2496918133809136
best_error: 2.2496916389147827
best_error: 2.2496914777713384
best_error: 2.2496912674276244
best_error: 2.2496909342849465
best_error: 2.249690713211959
best_error: 2.2496900522407985
best_error: 2.249689920224987
best_error: 1.7106105741967443
best_error: 1.710610572487821
best_error: 1.710610492287169
best_error: 1.708469192410151
best_error: 1.7084691907083913
best_error: 1.708463124493393
best_error: 1.7084626499065716
best_error: 1.6612398977497433
best_error: 1.661239895821345
best_error: 1.6510708542781038
best_error: 1.6510708523723752
best_error: 1.6105084102808687
best_error: 1.6105079848214383
best_error: 1.5827528115040477
best_error: 1.5827524153792933
best_error: 1.5605396822339341
best_error: 1.5605393066543893
best_error: 1.5594588622883903
best_error: 1.5594584950587047
best_error: 1.5583185166566613
best_error: 1.5583181487933837
best_error: 1.5405374205997933
best_error: 1.5405370347115865
best_error: 1.5281914888067556
best_error: 1.5281911004408584
best_error: 1.5237005826695684
best_error: 1.5237001922278823
best_error: 1.523244497706552
best_error: 1.523244107204673
best_error: 1.523072269887101
best_error: 1.5230718793696285
best_error: 1.5230300067564393
best_error: 1.523029616235137
best_error: 1.5230186037754403
best_error: 1.5230182132531145
best_error: 1.523012400749023
best_error: 1.52301239897673
best_error: 1.5230123203055894
best_error: 1.5155964938453428
best_error: 1.5155960927524141
best_error: 1.5120250662870254
best_error: 1.5120246739875212
best_error: 1.5022305817704624
best_error: 1.502230194999068
best_error: 1.4988364161006755
best_error: 1.4988364145568145
best_error: 1.4988363358723928
best_error: 1.4975323422007498
best_error: 1.4975319557761797
best_error: 1.4971670373251476
best_error: 1.4971666509461738
best_error: 1.4970871320155856
best_error: 1.4970867456334558
best_error: 1.4970308667660333
best_error: 1.4970304803811216
best_error: 1.497012809044819
best_error: 1.4970124226590316
best_error: 1.4970054732914102
best_error: 1.4970050869052702
best_error: 1.4970020629926282
best_error: 1.4970016766063177
best_error: 1.4970006147511814
best_error: 1.4970002283649326
best_error: 1.496999824181788
best_error: 1.4969994377955582
best_error: 1.4969993920417684
best_error: 1.496999005655554
best_error: 1.496998904542401
best_error: 1.4969988760727655
