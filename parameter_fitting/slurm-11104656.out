ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 84
days_switch 10
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 97.43883061999296
best_error: 97.43883054717745
best_error: 97.4388304967547
best_error: 97.43883047245743
best_error: 97.438830447799
best_error: 18.70937443710978
best_error: 18.709374240884824
best_error: 18.709372874501774
best_error: 16.81790925322937
best_error: 16.81790925310029
best_error: 16.81790923539892
best_error: 16.77824777120679
best_error: 16.77824777106939
best_error: 16.778247752003185
best_error: 16.592402237976188
best_error: 16.5924022378352
best_error: 16.592402211023977
best_error: 13.87335108873912
best_error: 13.873350767404212
best_error: 10.209406664532764
best_error: 10.209406348293506
best_error: 10.028699213603943
best_error: 10.028699192667528
best_error: 10.016331647373855
best_error: 10.016331457898824
best_error: 9.962973015815253
best_error: 9.962972996745998
best_error: 9.959172048803362
best_error: 9.959171866278762
best_error: 9.957933202437244
best_error: 9.957933183471479
best_error: 9.9568237560296
best_error: 9.956823573240237
best_error: 9.95668805359674
best_error: 9.956688034654006
best_error: 9.956234883410591
best_error: 9.95623470055489
best_error: 9.924590738949835
best_error: 9.924590719939264
best_error: 9.776683589237866
best_error: 9.776683570493166
best_error: 9.660213016126908
best_error: 9.660212997304324
best_error: 9.401965304940067
best_error: 9.401965287241008
best_error: 9.401965285727963
best_error: 9.271687567403099
best_error: 9.271687546993153
best_error: 9.228586488473244
best_error: 9.228586454952787
best_error: 9.22709077140826
best_error: 9.227090692386616
best_error: 8.748466609984987
best_error: 8.74846653884722
best_error: 8.556036146105367
best_error: 8.556036099375872
best_error: 8.068380931128745
best_error: 8.068380910867992
best_error: 7.979672805212452
best_error: 7.97967278059982
best_error: 7.926144429118301
best_error: 7.926144394765826
best_error: 7.852547278801113
best_error: 7.852547249375693
best_error: 7.77136715068409
best_error: 7.771367135428363
best_error: 7.7713671293252755
best_error: 7.758234280050366
best_error: 7.75823424888916
best_error: 7.714916417923986
best_error: 7.714916394906733
best_error: 7.714108052530385
best_error: 7.714107948980475
best_error: 7.703972437794295
best_error: 7.70397241375073
best_error: 7.70008866275368
best_error: 7.700088635855851
best_error: 7.6670101944055284
best_error: 7.6670101616635895
best_error: 7.653439726566406
best_error: 7.653439697972307
best_error: 7.631064620830623
best_error: 7.631064593471599
best_error: 7.604005822659303
best_error: 7.604005818296441
best_error: 7.604005812440395
best_error: 7.478344460827556
best_error: 7.47834442800692
best_error: 7.358188351350447
best_error: 7.358188266728309
best_error: 7.293607099763002
best_error: 7.293607079142621
best_error: 7.188967173685269
best_error: 7.18896714974734
best_error: 7.144280515404314
best_error: 7.144280463395153
best_error: 6.833364448806922
best_error: 6.8333643895337755
best_error: 6.788172170346057
best_error: 6.788172120359336
best_error: 6.469279920721122
best_error: 6.469279861945642
best_error: 6.250248783602688
best_error: 6.250248772970517
best_error: 6.247827440910969
best_error: 6.247827233386858
best_error: 6.2281185309759195
best_error: 6.228118516723098
best_error: 6.190014900873505
best_error: 6.1900148872837155
best_error: 6.166393027239181
best_error: 6.16639300924763
best_error: 6.149461729643678
best_error: 6.149461681653641
best_error: 6.144023601213279
best_error: 6.144023583890256
best_error: 6.141829697226713
best_error: 6.141829679995723
best_error: 6.141016447223981
best_error: 6.14101643000423
best_error: 6.140473827646673
best_error: 6.140473810434431
best_error: 6.140097093865743
best_error: 6.140097076677534
best_error: 6.139820551863263
best_error: 6.139820534678903
best_error: 6.139591219001156
best_error: 6.139591201819972
best_error: 6.139404547193781
best_error: 6.139404530015193
best_error: 6.139245349082385
best_error: 6.139245331906341
best_error: 6.139151579333983
best_error: 6.139151562160021
best_error: 6.1391411294391585
best_error: 6.139141112265364
best_error: 6.1391280558369505
best_error: 6.13912803866339
best_error: 6.139125410983948
best_error: 6.13912539381043
best_error: 6.139124036136353
best_error: 6.13912401896285
best_error: 6.139121588144917
best_error: 6.13912154083029
best_error: 6.067004346480488
best_error: 6.067004340738285
best_error: 6.057499989713703
best_error: 6.05749998968119
best_error: 6.057499936680941
best_error: 6.051071342762075
best_error: 6.051071342568873
best_error: 6.05107129710676
best_error: 6.047782978900355
best_error: 6.047782636163399
best_error: 6.045742733839038
best_error: 6.045742733085884
best_error: 6.0457427018569705
best_error: 6.045448255062286
best_error: 6.045448224791126
