ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.510326447264312
best_error: 10.510326444521468
best_error: 8.950612368215351
best_error: 8.95061224237763
best_error: 4.902862623250009
best_error: 4.902862144632552
best_error: 3.6050862828757655
best_error: 3.6050862011035933
best_error: 3.0891334359477813
best_error: 3.0891331665747117
best_error: 2.8556838878607915
best_error: 2.8556836753251353
best_error: 2.8089167340124406
best_error: 2.808916529776549
best_error: 2.791287870106056
best_error: 2.791287667520076
best_error: 2.78172542624333
best_error: 2.7817252238731522
best_error: 2.7766551541368134
best_error: 2.7766549519143173
best_error: 2.7740739890742647
best_error: 2.7740737875642716
best_error: 2.772817779185906
best_error: 2.7728175775507227
best_error: 2.7717783986682085
best_error: 2.771778196890806
best_error: 2.7716963516381212
best_error: 2.7716961498494954
best_error: 2.7716343029491766
best_error: 2.7716341011520615
best_error: 2.7716270523387796
best_error: 2.771626850540669
best_error: 2.7716219036472305
best_error: 2.7716217018484075
best_error: 2.7716195967115693
best_error: 2.7716193949124506
best_error: 2.771618184899894
best_error: 2.771618097774226
best_error: 2.759210285079749
best_error: 2.7592100608423937
best_error: 2.755337113451654
best_error: 2.7553368849968716
best_error: 2.6926077218345608
best_error: 2.6926076432188646
best_error: 2.685285951948755
best_error: 2.685285873882365
best_error: 2.656696451861584
best_error: 2.6566963777999857
best_error: 2.5487728417863904
best_error: 2.5487727864067544
best_error: 2.5454117009246566
best_error: 2.5454116457293723
best_error: 2.3975454740269155
best_error: 2.3975451886852164
best_error: 2.373340612708091
best_error: 2.373340331330337
best_error: 2.3218653318425595
best_error: 2.3218650468646267
best_error: 2.3140308664568314
best_error: 2.314030581596406
best_error: 2.309866651704918
best_error: 2.3098663663158057
best_error: 2.307456343422829
best_error: 2.3074560582832193
best_error: 2.30576813061173
best_error: 2.3057678452581136
best_error: 2.305406189808343
best_error: 2.305405904408886
best_error: 2.3052744865385613
best_error: 2.3052742019056787
best_error: 2.30520293923072
best_error: 2.305202654588755
best_error: 2.305155279116847
best_error: 2.3051549944688468
best_error: 2.305139215106969
best_error: 2.3051389304568337
best_error: 2.305130807555466
best_error: 2.3051305229042205
best_error: 2.305126466949634
best_error: 2.305126182297831
best_error: 2.305123733069541
best_error: 2.305123448417361
best_error: 2.3051224583179457
best_error: 2.3051221736655947
best_error: 2.305121545994239
best_error: 2.3051212613417826
best_error: 2.305121164142827
best_error: 2.305121161254333
best_error: 2.3051211602259567
best_error: 2.305121134440956
best_error: 2.3051211094274615
best_error: 2.3051210978825374
best_error: 2.3013410110595944
best_error: 2.301340742552693
best_error: 2.299121149845573
best_error: 2.2991208948858786
best_error: 2.262771559100162
best_error: 2.262771492698673
best_error: 2.2627713574237944
best_error: 2.159246279385152
best_error: 2.1592462767016674
best_error: 2.159246272009712
best_error: 2.139913628744617
best_error: 2.139913615903591
best_error: 2.1399134011502072
best_error: 2.1041379526842845
best_error: 2.1041379293174582
best_error: 2.1041377251750477
best_error: 2.0878661346006515
best_error: 2.0878661168002983
best_error: 2.0878659034080718
best_error: 2.064366291798734
best_error: 2.064366041264006
best_error: 2.064149600568502
best_error: 2.06414935053963
best_error: 2.0641098805588975
best_error: 2.064109878415527
best_error: 2.0641096336425133
best_error: 2.063962157543151
best_error: 2.063962157467551
best_error: 2.0639619086701346
best_error: 2.059048241217912
best_error: 2.0590482411085267
best_error: 2.059047991741277
best_error: 2.055541757497947
best_error: 2.0555417573647587
best_error: 2.0555415075914008
best_error: 2.054273194036913
best_error: 2.054273193895207
best_error: 2.054272943975022
best_error: 2.0534581781696835
best_error: 2.053458178022499
best_error: 2.0534579280080383
best_error: 2.0530565245433636
best_error: 2.0530565243935053
best_error: 2.0530562743325627
best_error: 2.0527726313353405
best_error: 2.0527726311835743
best_error: 2.0527723810898078
best_error: 2.052645552585486
best_error: 2.05264555243288
best_error: 2.0526453023244087
best_error: 2.0526044193143127
best_error: 2.05260441916155
best_error: 2.05260416904801
best_error: 2.0525825642004434
best_error: 2.0525825640475945
best_error: 2.052582313931388
best_error: 2.0525702877107386
best_error: 2.05257028755784
best_error: 2.052570037440127
best_error: 2.0525628852907536
best_error: 2.0525628851378266
best_error: 2.052562635019199
best_error: 2.0525590385627495
best_error: 2.052559038409806
best_error: 2.0525587882906997
best_error: 2.0525564714583293
best_error: 2.0525564713053583
best_error: 2.05255622118596
best_error: 2.0525552469140633
best_error: 2.052555246761089
best_error: 2.0525549966415344
best_error: 2.052554351378078
best_error: 2.0525543512251145
best_error: 2.052554101105437
best_error: 2.052554008091384
best_error: 2.052554007938422
best_error: 2.052554007890622
best_error: 2.052554000120466
best_error: 2.052553999967502
best_error: 2.052553999919689
best_error: 2.0525539926514345
best_error: 2.0525539924985026
best_error: 2.052553992450654
best_error: 2.0525539882986
best_error: 2.0525539881456707
best_error: 2.0525539880978165
best_error: 2.0525539842716176
best_error: 2.0525539841186924
best_error: 2.0525539840708307
best_error: 2.0525539814242757
best_error: 2.052553981271358
best_error: 2.0525539812234825
best_error: 2.052553978895033
best_error: 2.052553978742121
best_error: 2.052553978694241
best_error: 2.0525539753366937
best_error: 2.0525539751837876
best_error: 2.0525539751359037
best_error: 2.0525539727339073
best_error: 2.052553972581004
best_error: 2.0525539725330977
best_error: 2.0525539669557196
best_error: 2.0525539669553803
best_error: 2.052553963118378
best_error: 2.052553962965486
best_error: 2.0525539629175706
best_error: 2.0525539626104203
best_error: 2.0525539624575133
best_error: 2.052553962409605
best_error: 2.052553962209025
best_error: 2.0525539620561215
best_error: 2.052553962008213
best_error: 2.0525539611077015
best_error: 2.0525539609547945
best_error: 2.0525539609068786
best_error: 2.0525539605057013
best_error: 2.0525539603048824
