ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 76
days_switch 90
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 109.69172322217922
best_error: 109.69172312149666
best_error: 109.69172304435514
best_error: 19.266008130116766
best_error: 19.26600813011344
best_error: 19.266008124161445
best_error: 19.260361046707793
best_error: 19.26036104059824
best_error: 19.236234129014537
best_error: 19.2362341222191
best_error: 19.105249809726583
best_error: 19.10524979844024
best_error: 13.787671760525235
best_error: 13.787671624430166
best_error: 13.703672740271603
best_error: 13.703672730128428
best_error: 13.703672720211374
best_error: 13.694803194778558
best_error: 13.694803168627624
best_error: 13.694803163836632
best_error: 13.663597138234326
best_error: 13.663597124895126
best_error: 13.663597108687805
best_error: 13.58725746633867
best_error: 13.587257450805332
best_error: 13.533376556283157
best_error: 13.533376539412242
best_error: 13.15373066140278
best_error: 13.153730649489395
best_error: 12.685960045694582
best_error: 12.685959881239958
best_error: 12.658880715799526
best_error: 12.658880709348523
best_error: 12.658880703263527
best_error: 12.639521947543276
best_error: 12.639521942071296
best_error: 12.63952193330288
best_error: 12.620438093125848
best_error: 12.62043808994348
best_error: 12.620438069532995
best_error: 12.607750715982178
best_error: 12.607750676830502
best_error: 12.607728989900483
best_error: 12.607728950747351
best_error: 12.607718201316555
best_error: 12.607718162162701
best_error: 12.607717312062924
best_error: 12.607717272909008
best_error: 12.607716108072106
best_error: 12.60771577216206
best_error: 12.429201407894734
best_error: 12.42920136158342
best_error: 12.408755890369633
best_error: 12.40875587522445
best_error: 12.393112243745827
best_error: 12.393112231501712
best_error: 12.392885351933794
best_error: 12.392885346878009
best_error: 12.392885344971155
best_error: 12.388939429179004
best_error: 12.388939420270152
best_error: 12.386443077087074
best_error: 12.386443068788159
best_error: 12.35376363057194
best_error: 12.353763625149163
best_error: 12.353763623631167
best_error: 12.269120680511385
best_error: 12.269120669961094
best_error: 12.180979492573233
best_error: 12.180979488102599
best_error: 12.180979477239031
best_error: 12.17162945841025
best_error: 12.171629444005436
best_error: 12.171629443978699
best_error: 12.164274530565411
best_error: 12.164274516583143
best_error: 12.054221597470683
best_error: 12.054221594806991
best_error: 12.054221594125123
best_error: 12.054221591494116
best_error: 12.006220887618834
best_error: 12.00622088155684
best_error: 12.006196150110164
best_error: 12.006196144048264
best_error: 12.006173021258341
best_error: 12.006173015196534
best_error: 12.006140917581426
best_error: 12.006140911519745
best_error: 12.006083848072723
best_error: 12.00608384201127
best_error: 12.006017823260178
best_error: 12.00601781719898
best_error: 12.006013885566897
best_error: 12.00601387950575
best_error: 12.006013010911458
best_error: 12.00601300485031
best_error: 12.006012492408075
best_error: 12.006012486346936
best_error: 11.9844202508114
best_error: 11.984420216779366
best_error: 11.98442021480415
best_error: 11.984415032050904
best_error: 11.98441499801893
best_error: 11.984414996043792
best_error: 11.979643487556682
best_error: 11.979643454987993
best_error: 11.979643453300643
best_error: 11.979429646187794
best_error: 11.979429569206093
best_error: 11.966332776069569
best_error: 11.966332670665611
best_error: 11.966277453217243
best_error: 11.966277347804358
best_error: 11.966263764462305
best_error: 11.966263659047211
best_error: 11.966260632010632
best_error: 11.966260526595036
best_error: 11.966260048122406
best_error: 11.96625994270671
best_error: 11.96625991399618
best_error: 11.96625991249676
best_error: 11.93992284158223
best_error: 11.93992281216493
best_error: 11.939922810693542
best_error: 11.916197669218153
best_error: 11.916197541768994
best_error: 11.916193052098567
best_error: 11.916193021873966
best_error: 11.916193019642325
best_error: 11.914054385022078
best_error: 11.914054355547954
best_error: 11.914054353517788
best_error: 11.872465374230371
best_error: 11.872465291170645
best_error: 11.755885320320377
best_error: 11.755885276949915
best_error: 11.755885261723684
best_error: 11.709876284823032
best_error: 11.709876238073075
best_error: 11.709876213769865
best_error: 11.659088342977808
best_error: 11.659088297379633
best_error: 11.659088266818884
best_error: 11.606299902157016
best_error: 11.60629985689023
best_error: 11.606299826089737
best_error: 11.5244883990367
best_error: 11.524488333751457
best_error: 11.524488281022073
best_error: 11.47062568460338
best_error: 11.4706256207913
best_error: 11.470625571411624
best_error: 11.404728884243651
best_error: 11.40472888359032
best_error: 11.404728860115842
best_error: 11.378401483408823
best_error: 11.378401463379967
best_error: 11.37840145336109
best_error: 11.37479740777923
best_error: 11.374797342769888
best_error: 11.347704125593763
best_error: 11.347704024027816
best_error: 11.337932417912434
best_error: 11.337932301401441
best_error: 11.337775619034874
best_error: 11.337775603380969
best_error: 11.337775598837409
best_error: 11.33776990135253
best_error: 11.33776978520076
best_error: 11.334618458219559
best_error: 11.334618354148713
best_error: 11.327332818892064
best_error: 11.327332763807336
best_error: 11.327332730845912
best_error: 11.327199231530876
best_error: 11.327199140027032
best_error: 11.326130829369477
best_error: 11.326130799411786
best_error: 11.32613079064082
best_error: 11.325778754181862
best_error: 11.325778662245288
