ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.87962861651213
best_error: 10.879628614716705
best_error: 10.397516547890811
best_error: 10.397516528630181
best_error: 9.874326405865022
best_error: 9.874326356758074
best_error: 7.120977527621708
best_error: 7.1209773249726425
best_error: 5.621024499056018
best_error: 5.621024418662051
best_error: 5.6210242150349154
best_error: 5.613534039299885
best_error: 5.613533980330004
best_error: 5.613533749634543
best_error: 5.612984456892486
best_error: 5.612984393148662
best_error: 5.612984167330651
best_error: 4.216898071217405
best_error: 4.216897972545317
best_error: 4.216897905583952
best_error: 3.931453610869689
best_error: 3.9314535232622774
best_error: 3.931453477254843
best_error: 3.766616722622644
best_error: 3.766616638911393
best_error: 3.7666166090810327
best_error: 3.6753500271217674
best_error: 3.675349946252008
best_error: 3.6753499168550716
best_error: 3.5481623561524436
best_error: 3.548162279617877
best_error: 3.5481622471867404
best_error: 3.5452803314033474
best_error: 3.545280310670297
best_error: 3.5344478670531787
best_error: 3.5344477905126688
best_error: 3.5344477578263485
best_error: 3.5115631326818453
best_error: 3.5115630565589013
best_error: 3.5115630223793013
best_error: 3.5088668427726635
best_error: 3.508866766591231
best_error: 3.5088667322499516
best_error: 3.5066488836493965
best_error: 3.506648807613332
best_error: 3.506648772944385
best_error: 3.5055234789184957
best_error: 3.505523402860166
best_error: 3.5055233681209392
best_error: 3.5050207938575855
best_error: 3.5050207177893213
best_error: 3.5050206830187
best_error: 3.5047251380901017
best_error: 3.504725062015987
best_error: 3.504725027226919
best_error: 3.50456212476434
best_error: 3.504562048687009
best_error: 3.5045620138877527
best_error: 3.5044740578390243
best_error: 3.5044739817599484
best_error: 3.504473946955198
best_error: 3.5044188594837626
best_error: 3.504418783403594
best_error: 3.5044187485954
best_error: 3.5043656797915865
best_error: 3.504365603710376
best_error: 3.5043655688988573
best_error: 3.5043612976294822
best_error: 3.5043612215481836
best_error: 3.50436118673639
best_error: 3.504358038918289
best_error: 3.5043579628369272
best_error: 3.5043579280249277
best_error: 3.504357380392439
best_error: 3.5043573597058986
best_error: 3.2483688412084684
best_error: 3.248368801192782
best_error: 3.248368685959786
best_error: 3.210638865871281
best_error: 3.2106388490857585
best_error: 3.2106386653038355
best_error: 3.1989522401605397
best_error: 3.1989522181564842
best_error: 3.198952042993567
best_error: 3.120348614353642
best_error: 3.120348577005082
best_error: 3.1203484247239652
best_error: 3.104218608684293
best_error: 3.104218524410993
best_error: 3.104218412690082
best_error: 3.0784181391484675
best_error: 3.0784180812587416
best_error: 3.0784179457532277
best_error: 2.9972766670242694
best_error: 2.997276602827533
best_error: 2.99727646134514
best_error: 2.9910854921762007
best_error: 2.9910854713417594
best_error: 2.9910854581460224
best_error: 2.986488320674039
best_error: 2.986488309559916
best_error: 2.9864880523250497
best_error: 2.950330731381589
best_error: 2.950330699750816
best_error: 2.9503304947447737
best_error: 2.9355676736220815
best_error: 2.935567638264855
best_error: 2.9355674415688346
best_error: 2.9340066709754886
best_error: 2.9340066355122203
best_error: 2.9340064388733573
best_error: 2.9330001249353375
best_error: 2.933000089257949
best_error: 2.9329998931543306
best_error: 2.9323633302227887
best_error: 2.9323632943591758
best_error: 2.93236309878613
best_error: 2.932001911237072
best_error: 2.9320018753485666
best_error: 2.932001679789267
best_error: 2.931804286825198
best_error: 2.9318042509230624
best_error: 2.9318040553712983
best_error: 2.9316873081150527
best_error: 2.9316872722097633
best_error: 2.9316870766556513
best_error: 2.9316219947064415
best_error: 2.931621958799414
best_error: 2.931621763243995
best_error: 2.931605662002853
best_error: 2.931605626095376
best_error: 2.9316054305396464
best_error: 2.9316042583496267
best_error: 2.931604222441762
best_error: 2.9316040268866046
best_error: 2.9316033287417183
best_error: 2.931603292833589
best_error: 2.931603097278831
best_error: 2.931602695441928
best_error: 2.931602659533623
best_error: 2.931602463979134
best_error: 2.931602242975204
best_error: 2.93160220706676
best_error: 2.931602011512471
best_error: 2.9316018905415424
best_error: 2.9316018546329916
best_error: 2.9316016590788605
best_error: 2.9316015646603892
best_error: 2.9316015287517576
best_error: 2.931601333197752
best_error: 2.931601243766196
best_error: 2.931601207857466
best_error: 2.931601012303606
best_error: 2.931600970390449
best_error: 2.9316009344816494
best_error: 2.9316007389278935
best_error: 2.931600648742652
best_error: 2.9316006300170505
best_error: 2.931600614050969
best_error: 2.931600594571106
best_error: 2.931600567169718
best_error: 2.931600531260897
best_error: 2.9316005137158663
best_error: 2.93160047479069
best_error: 2.9316004730267933
best_error: 2.930049820872834
best_error: 2.9300497866849584
best_error: 2.930049585429435
best_error: 2.9300137586003885
best_error: 2.9300137251461065
best_error: 2.9300135219685863
best_error: 2.927816108842361
best_error: 2.9278160761444347
best_error: 2.9278158708061808
best_error: 2.9265284489128285
best_error: 2.9265284162709393
best_error: 2.9265282106904795
best_error: 2.925920367347815
best_error: 2.925920334908744
best_error: 2.9259201290369115
best_error: 2.925622324530794
best_error: 2.9256222921049657
best_error: 2.925622086176343
best_error: 2.9255865148869558
best_error: 2.9255864977195634
best_error: 2.9255864800482527
best_error: 2.925390640670117
best_error: 2.9253906085432826
best_error: 2.925390401256047
best_error: 2.9238676353819484
best_error: 2.9238676082696324
best_error: 2.9238673846374423
best_error: 2.9234703966086952
best_error: 2.923470369271048
best_error: 2.9234701465841884
best_error: 2.9230656015769965
best_error: 2.9230655734966278
best_error: 2.9230653533464035
best_error: 2.9228925535591874
best_error: 2.922892525447939
best_error: 2.9228923054333427
best_error: 2.9228045831153002
best_error: 2.9228045537002956
best_error: 2.9228043375164994
best_error: 2.922651057188641
best_error: 2.922651027772791
best_error: 2.9226508115966032
best_error: 2.9226331451688075
best_error: 2.9226331157528787
best_error: 2.922632899577575
best_error: 2.9226237701730913
best_error: 2.9226237407570963
best_error: 2.9226235245822663
best_error: 2.922618898386623
best_error: 2.922618868970604
best_error: 2.922618652796011
best_error: 2.9226168373355383
best_error: 2.9226168079195043
best_error: 2.922616591745058
best_error: 2.922615624231001
best_error: 2.9226155948149364
best_error: 2.9226153786405935
best_error: 2.92261490889545
best_error: 2.9226148794793887
best_error: 2.922614663305093
best_error: 2.922614486678265
best_error: 2.922614457262184
best_error: 2.92261424108792
best_error: 2.92261423771863
best_error: 2.9226142083025533
best_error: 2.92261399212831
best_error: 2.922613948303085
best_error: 2.9226139318431885
best_error: 2.9226139024271194
