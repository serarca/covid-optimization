ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.509095373413828
best_error: 11.50909535784199
best_error: 11.509095335772344
best_error: 11.29882424268257
best_error: 11.298824221368262
best_error: 11.29882419447749
best_error: 9.210005265062463
best_error: 9.21000517692721
best_error: 8.969998967643095
best_error: 8.969998872205547
best_error: 8.934133407185886
best_error: 8.934133310746237
best_error: 8.02621267037677
best_error: 8.026212537787071
best_error: 7.714113245355589
best_error: 7.71411318712776
best_error: 7.7141131782747046
best_error: 6.922687308283654
best_error: 6.922687264843887
best_error: 6.922687221096059
best_error: 3.994397498785438
best_error: 3.994397279684996
best_error: 3.972564310038238
best_error: 3.9725640799666877
best_error: 3.47553816309531
best_error: 3.475537962582936
best_error: 2.8020343282973617
best_error: 2.8020341250205387
best_error: 2.7457495268356737
best_error: 2.745749320180181
best_error: 2.730881787112708
best_error: 2.730881579101191
best_error: 2.721554433575543
best_error: 2.7215542247137403
best_error: 2.717720256029264
best_error: 2.717720046646038
best_error: 2.7171677877176443
best_error: 2.7171677877091995
best_error: 2.716850477733427
best_error: 2.7168502682708255
best_error: 2.716780292188085
best_error: 2.716780292179621
best_error: 2.6058556294992377
best_error: 2.6058553892062037
best_error: 2.478009103825861
best_error: 2.4780088316674984
best_error: 2.386043764002735
best_error: 2.3860434697706308
best_error: 2.376270279035909
best_error: 2.3762702790280406
best_error: 2.3746297412149544
best_error: 2.3746294012709837
best_error: 2.3699443152676176
best_error: 2.3699443152599935
best_error: 2.3691423406278176
best_error: 2.3691420035149395
best_error: 2.3663217737743416
best_error: 2.366321773766768
best_error: 2.345030624975049
best_error: 2.3450303014435345
best_error: 2.3293437113890656
best_error: 2.3293437113812034
best_error: 2.328175464771449
best_error: 2.3281751382344584
best_error: 2.3221072342864324
best_error: 2.3221069071440494
best_error: 2.319603949750637
best_error: 2.319603949742983
best_error: 2.317130645289007
best_error: 2.3171306452814147
best_error: 2.3168221846304244
best_error: 2.3168218330311214
best_error: 2.3151272015680693
best_error: 2.315127201560543
best_error: 2.314932154358499
best_error: 2.3149321543509593
best_error: 2.313810477048553
best_error: 2.3138101089279712
best_error: 2.311468960967784
best_error: 2.311468597572693
best_error: 2.3005489460067152
best_error: 2.3005485915273383
best_error: 2.2703729097347094
best_error: 2.270372909727143
best_error: 2.1954595376504757
best_error: 2.195459537642883
best_error: 2.185004651309339
best_error: 2.185004272466041
best_error: 2.1426751922871574
best_error: 2.1426748035002143
best_error: 2.1123035579629716
best_error: 2.112303557955494
best_error: 2.1123034258172892
best_error: 2.1118080786822055
best_error: 2.111807688032815
best_error: 2.10967548190459
best_error: 2.109675090134581
best_error: 2.109400138273534
best_error: 2.1093997464730196
best_error: 2.1093554983359994
best_error: 2.1093551065305514
best_error: 2.1093370342941857
best_error: 2.109336642486669
best_error: 2.109328715726167
best_error: 2.1093283239177505
best_error: 2.109327143013928
best_error: 2.1093267512053204
best_error: 2.109326710774286
best_error: 2.109326576739419
best_error: 2.1093265381733293
best_error: 2.10932653547244
best_error: 2.109326504402666
best_error: 2.109326504395202
best_error: 2.1089336053550403
best_error: 2.1089336053476613
best_error: 2.10893347332622
best_error: 2.108902307782158
best_error: 2.108902307774766
best_error: 2.108878809023074
best_error: 2.1088788090156676
best_error: 2.108865531016072
best_error: 2.1088655310087194
best_error: 2.1088520954323604
best_error: 2.108852095424968
best_error: 2.1088464345872024
best_error: 2.1088464345798457
best_error: 2.108842901629337
best_error: 2.108842901621949
best_error: 2.108839610489582
best_error: 2.108839610482147
best_error: 2.1088380521861745
best_error: 2.10883805217878
best_error: 2.108837057883542
best_error: 2.1088370578761664
best_error: 2.108836438085534
best_error: 2.1088364380781814
best_error: 2.1088357870744425
best_error: 2.108835787067047
best_error: 2.1088354956640325
best_error: 2.1088354956566073
best_error: 2.108835128506823
best_error: 2.1088351284994444
best_error: 2.1088350204845936
best_error: 2.1088350204772133
best_error: 2.1088349677799343
best_error: 2.108834967772557
best_error: 2.1088349306560152
best_error: 2.1088349306486323
best_error: 2.108834904901497
best_error: 2.108834904894118
best_error: 2.1088348686465874
best_error: 2.1088348686391445
best_error: 2.108834845645993
best_error: 2.1088348456385777
best_error: 2.1088348432036366
best_error: 2.1088348431962514
best_error: 2.1088348417610674
best_error: 2.1088348417537173
best_error: 2.108834840462559
best_error: 2.1088348404551116
best_error: 2.1088348398754
best_error: 2.108834839868006
best_error: 2.1088348393835683
best_error: 2.108834839376181
best_error: 2.108834839159929
best_error: 2.1088348391525367
best_error: 2.10883483896498
best_error: 2.108834838957586
best_error: 2.1088348388622427
best_error: 2.108834838854838
