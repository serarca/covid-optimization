ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.547295830976884
best_error: 10.547295827974079
best_error: 8.040131976713063
best_error: 8.040131818580342
best_error: 8.039273055230389
best_error: 8.039272897036964
best_error: 7.194273787089896
best_error: 7.194273774509758
best_error: 7.194273567588036
best_error: 6.971651516072101
best_error: 6.971651467251274
best_error: 6.971651275765239
best_error: 5.651099750797789
best_error: 5.651099605235132
best_error: 5.433634102583635
best_error: 5.433633412855156
best_error: 3.541485845572457
best_error: 3.541485844357288
best_error: 3.5414855634083824
best_error: 3.324275584383012
best_error: 3.3242755526533436
best_error: 3.324275379155151
best_error: 3.2644039165881864
best_error: 3.264403880864057
best_error: 3.264403723455386
best_error: 3.2430869076174393
best_error: 3.2430868707886082
best_error: 3.243086714843966
best_error: 3.2366329046912967
best_error: 3.236632867578276
best_error: 3.2366327117463465
best_error: 3.232291204831453
best_error: 3.232291167676781
best_error: 3.2322910124303315
best_error: 3.2300408757152175
best_error: 3.230040838501424
best_error: 3.2300406831358823
best_error: 3.2284332638623354
best_error: 3.228433226606307
best_error: 3.2284330711558047
best_error: 3.227652892384074
best_error: 3.2276528551075443
best_error: 3.2276526996158417
best_error: 3.2270619086036714
best_error: 3.227061871311599
best_error: 3.2270617157887176
best_error: 3.2267990985593773
best_error: 3.2267990612603845
best_error: 3.2267989057236584
best_error: 3.2267201529975233
best_error: 3.226720115696466
best_error: 3.2267199601555556
best_error: 3.2266985531095007
best_error: 3.2266985158078763
best_error: 3.226698360265824
best_error: 3.2266857972488476
best_error: 3.2266857599468732
best_error: 3.226685604404169
best_error: 3.226678224737456
best_error: 3.226678187435275
best_error: 3.226678031892168
best_error: 3.2266735750598645
best_error: 3.226673537757569
best_error: 3.226673382214213
best_error: 3.2266709086936265
best_error: 3.226670871391272
best_error: 3.226670715847769
best_error: 3.2266692006455537
best_error: 3.226669163343141
best_error: 3.226669007799557
best_error: 3.2266680339186555
best_error: 3.2266679966162117
best_error: 3.226667841072567
best_error: 3.226667128034569
best_error: 3.226667090732114
best_error: 3.2266669351884154
best_error: 3.226666840749839
best_error: 3.226666812171144
best_error: 3.225958670846681
best_error: 3.2259586336637973
best_error: 3.2259584779302024
best_error: 3.223192665957306
best_error: 3.223192629368743
best_error: 3.223192472423591
best_error: 3.213387730389271
best_error: 3.213387697592266
best_error: 3.2133875319606973
best_error: 3.2080034365625156
best_error: 3.2080034176652252
best_error: 3.208003226502313
best_error: 3.205267460355757
best_error: 3.205267438074011
best_error: 3.205267251569995
best_error: 3.2028925236959265
best_error: 3.202892498926278
best_error: 3.2028923141610353
best_error: 3.199601847566174
best_error: 3.1996018198835707
best_error: 3.199601632210972
best_error: 3.1974426569910825
best_error: 3.1974426312594284
best_error: 3.197442432563736
best_error: 3.1972256342645435
best_error: 3.1972256099208183
best_error: 3.197225408757186
best_error: 3.196884649481356
best_error: 3.1968846256734156
best_error: 3.1968844214195826
best_error: 3.19582919375208
best_error: 3.1958291704328716
best_error: 3.195828962881226
best_error: 3.1928455874905106
best_error: 3.192845564131093
best_error: 3.1928453562585046
best_error: 3.1920490321834505
best_error: 3.192049008813275
best_error: 3.1920488008551806
best_error: 3.191808016554974
best_error: 3.191807993181542
best_error: 3.1918077851975832
best_error: 3.1916600238366115
best_error: 3.191660000461187
best_error: 3.191659792461344
best_error: 3.1915826238093827
best_error: 3.1915826004329158
best_error: 3.1915823924247677
best_error: 3.191530643761709
best_error: 3.191530620384523
best_error: 3.191530412370815
best_error: 3.191507572604544
best_error: 3.191507549227059
best_error: 3.191507341210859
best_error: 3.19149238231536
best_error: 3.191492358937678
best_error: 3.191492150919847
best_error: 3.1914849175543063
best_error: 3.191484894176523
best_error: 3.191484686157887
best_error: 3.1914795621836127
best_error: 3.191479538805754
best_error: 3.1914793307865463
best_error: 3.1914771614334096
best_error: 3.191477138055501
best_error: 3.1914769300360475
best_error: 3.1914758435473245
best_error: 3.1914758358905453
best_error: 3.1908720587438335
best_error: 3.1908720503420547
best_error: 3.189972182097903
best_error: 3.189972159763268
best_error: 3.1899719477765545
best_error: 3.1873295559857473
best_error: 3.1873295371757986
best_error: 3.1873293134861864
best_error: 3.157337295456152
best_error: 3.1573372842947034
best_error: 3.097530340698662
best_error: 2.982762257150342
best_error: 2.9827619974960964
best_error: 2.9793656427443693
best_error: 2.979365634654723
best_error: 2.978972956933526
best_error: 2.9789726944542165
best_error: 2.966084723517069
best_error: 2.966084719784073
best_error: 2.9607534495377923
best_error: 2.9607531577801565
best_error: 2.96058116994599
best_error: 2.960580878174503
best_error: 2.960475901499324
best_error: 2.960475609719364
best_error: 2.9604745158153327
best_error: 2.9604742240352646
best_error: 2.9604740540831616
best_error: 2.9604740496247928
best_error: 2.960474015899301
best_error: 2.9604740158992997
best_error: 2.9604739795509962
