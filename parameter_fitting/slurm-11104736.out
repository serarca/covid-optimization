ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 90
days_switch 35
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 97.18809311617252
best_error: 97.18809297098879
best_error: 97.18809288476521
best_error: 13.893003045823267
best_error: 13.89300304581474
best_error: 13.893003021695934
best_error: 13.839818525844109
best_error: 13.839818500361131
best_error: 13.598221031058472
best_error: 13.598220999705973
best_error: 11.658045746845263
best_error: 11.658045594902347
best_error: 10.653777618982188
best_error: 10.653777405282629
best_error: 10.295547413223707
best_error: 10.295547387912263
best_error: 10.29450294456073
best_error: 10.294502941678946
best_error: 10.294502939661331
best_error: 10.294502938980367
best_error: 10.291979592207326
best_error: 10.291979586121851
best_error: 10.291979585529816
best_error: 10.291025191471892
best_error: 10.291025185307422
best_error: 10.291025184769515
best_error: 10.287188956165837
best_error: 10.287188950137729
best_error: 10.287188949386925
best_error: 10.286139008974029
best_error: 10.28613900405223
best_error: 10.286139000183535
best_error: 10.267664407345391
best_error: 10.26766440079024
best_error: 10.228492763354385
best_error: 10.22849275623688
best_error: 10.129092281586958
best_error: 10.129092275163293
best_error: 10.129092273041254
best_error: 10.119563391936207
best_error: 10.119563383604138
best_error: 10.084634937291579
best_error: 10.084634928619682
best_error: 10.06517653301249
best_error: 10.06517653004066
best_error: 10.065176382498855
best_error: 10.001834019413893
best_error: 10.001834015703487
best_error: 10.001833891828955
best_error: 9.625552461001892
best_error: 9.625552384869675
best_error: 9.625552330414328
best_error: 8.849289197807103
best_error: 8.849289190008006
best_error: 8.78703160573914
best_error: 8.787031605132917
best_error: 8.787031604251032
best_error: 8.76547640391938
best_error: 8.765476402359337
best_error: 8.765476402299436
best_error: 8.621271503946002
best_error: 8.621271503306707
best_error: 8.621271496279432
best_error: 8.288110233011563
best_error: 8.288110222036648
best_error: 8.15363678011693
best_error: 8.1536367016796
best_error: 8.103617883015168
best_error: 8.103617856957051
best_error: 8.049595069198068
best_error: 8.049595064779492
best_error: 8.04959503592639
best_error: 7.866024145284167
best_error: 7.866024140773213
best_error: 7.866024109047051
best_error: 7.518665541414587
best_error: 7.51866546720705
best_error: 7.432191977212713
best_error: 7.432191973042449
best_error: 7.432191953478705
best_error: 7.425504498076931
best_error: 7.42550448049
best_error: 7.4255044609216485
best_error: 7.3735276944710195
best_error: 7.373527689704048
best_error: 7.373527666210231
best_error: 7.336916484386689
best_error: 7.336916462914862
best_error: 7.302624929006585
best_error: 7.30262487948003
best_error: 7.2499547596449805
best_error: 7.249954747226306
best_error: 7.249954718041477
best_error: 7.233769130275866
best_error: 7.233769117192946
best_error: 7.233769088645133
best_error: 7.121056301969458
best_error: 7.121056209792757
best_error: 7.101493249013401
best_error: 7.101493228130923
best_error: 7.101493216760535
best_error: 7.060134151210743
best_error: 7.060134129526893
best_error: 7.060134119702943
best_error: 6.9727556796848456
best_error: 6.9727555794996725
best_error: 6.917892986947897
best_error: 6.917892962519134
best_error: 6.858010630331208
best_error: 6.858010597043978
best_error: 6.812014397912444
best_error: 6.812014368462197
best_error: 6.8091049507784875
best_error: 6.809104898847066
best_error: 6.80427346272236
best_error: 6.804273460279194
best_error: 6.804273454145649
best_error: 6.804273454098983
best_error: 6.801600973346498
best_error: 6.801600945318744
best_error: 6.7989856118020215
best_error: 6.798985611319119
best_error: 6.798985609655672
best_error: 6.798985602999952
best_error: 6.796416802016993
best_error: 6.796416800644897
best_error: 6.796416799751871
best_error: 6.796416793070692
best_error: 6.793454792574853
best_error: 6.793454761791032
best_error: 6.787103267895848
best_error: 6.787103244843372
best_error: 6.7861238199381155
best_error: 6.786123768618239
best_error: 6.785390992169117
best_error: 6.785390945414531
best_error: 6.784449611388186
best_error: 6.784449586863287
best_error: 6.783319178898301
best_error: 6.783319130433388
best_error: 6.7818750538275445
best_error: 6.7818750306436835
best_error: 6.78033986628508
best_error: 6.780339843400291
best_error: 6.775090766329594
best_error: 6.775090743877098
best_error: 6.756775761585232
best_error: 6.756775735846773
best_error: 6.718322546891575
best_error: 6.718322527646154
best_error: 6.696281973100059
best_error: 6.696281956532427
best_error: 6.690464237229911
best_error: 6.690464219515761
