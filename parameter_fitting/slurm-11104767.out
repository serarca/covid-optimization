ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 92
days_switch 60
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 99.54319424359625
best_error: 99.54319410355657
best_error: 15.2952685830949
best_error: 15.295268571912898
best_error: 15.286545510372843
best_error: 15.286545506281005
best_error: 15.283697482029778
best_error: 15.283697477928161
best_error: 15.27360894390135
best_error: 15.273608940933213
best_error: 15.235407820256285
best_error: 15.235407818419555
best_error: 15.234704694836708
best_error: 15.234704694767974
best_error: 15.234704694590082
best_error: 15.234502730646884
best_error: 15.23450272856561
best_error: 15.234196375876397
best_error: 15.234196375809166
best_error: 15.234196375634436
best_error: 15.234102792576305
best_error: 15.234102792509319
best_error: 15.234102792335168
best_error: 15.233355855705714
best_error: 15.233355853660765
best_error: 15.2286522035496
best_error: 15.228652201405136
best_error: 15.208755882568816
best_error: 15.208755879576998
best_error: 15.104694197437498
best_error: 15.104694191959974
best_error: 14.371691969573845
best_error: 14.371691969567845
best_error: 14.371691941166635
best_error: 14.355499468093587
best_error: 14.355499440401584
best_error: 14.289102985455038
best_error: 14.289102955775832
best_error: 13.941754917472334
best_error: 13.941754879373576
best_error: 13.92930489886788
best_error: 13.929304897840641
best_error: 13.929304897226615
best_error: 13.921084662688042
best_error: 13.921084661513358
best_error: 13.921084660856053
best_error: 13.918760612115936
best_error: 13.918760611597156
best_error: 13.91876061087148
best_error: 13.918760610222776
best_error: 13.917788654162383
best_error: 13.91778865361937
best_error: 13.917788652897883
best_error: 13.917788652277668
best_error: 13.913999960751953
best_error: 13.913999959031656
best_error: 13.913999958893152
best_error: 13.904640965467198
best_error: 13.904640945125571
best_error: 13.761810018320318
best_error: 13.761809986217134
best_error: 13.661566600633574
best_error: 13.661566600476243
best_error: 13.66156659351118
best_error: 13.614247248412715
best_error: 13.614247247441817
best_error: 13.614247237669867
best_error: 13.612528293128616
best_error: 13.612528292523201
best_error: 13.612528290589294
best_error: 13.499525578824079
best_error: 13.499525577283354
best_error: 13.495609663601755
best_error: 13.495609662085783
best_error: 13.487174491133333
best_error: 13.487174489456283
best_error: 13.487174486087152
best_error: 13.483985959006594
best_error: 13.48398595893243
best_error: 13.483985956362105
best_error: 13.482749461917045
best_error: 13.482749461864042
best_error: 13.482749459629918
best_error: 13.476593800374813
best_error: 13.47659380014198
best_error: 13.476593786117176
best_error: 13.470938174005322
best_error: 13.470938173172463
best_error: 13.466134848830048
best_error: 13.466134848120815
best_error: 13.455862422703065
best_error: 13.455862420789897
best_error: 13.440861306069982
best_error: 13.440861303380078
best_error: 13.327666451611172
best_error: 13.327666446033637
best_error: 13.20404752459613
best_error: 13.204047523956758
best_error: 13.204047501443014
best_error: 12.95781778340341
best_error: 12.957817782162216
best_error: 12.957817760438338
best_error: 12.957817759241049
best_error: 12.838479024695157
best_error: 12.838479024518076
best_error: 12.838479003601046
best_error: 12.830485448881635
best_error: 12.83048544552857
best_error: 12.830485443421379
best_error: 12.82980251919195
best_error: 12.82980251919192
best_error: 12.829802519179664
best_error: 12.829802512777066
best_error: 12.828710167017022
best_error: 12.828710167016988
best_error: 12.828710167004541
best_error: 12.828710160563558
best_error: 12.825878104661026
best_error: 12.825878102283498
best_error: 12.825878097901949
best_error: 12.82587346157769
best_error: 12.825873459200354
best_error: 12.825873454818593
best_error: 12.820687438340181
best_error: 12.820687437137998
best_error: 12.820687421212977
best_error: 12.683907885873898
best_error: 12.683907880153436
best_error: 12.683907751492404
best_error: 12.657402863569336
best_error: 12.657402861466943
best_error: 12.65740282474983
best_error: 12.623478818432524
best_error: 12.623478817268015
best_error: 12.623478799622646
best_error: 12.617674626967892
best_error: 12.617674625877992
best_error: 12.617674608422462
best_error: 12.535158994265998
best_error: 12.535158987053876
best_error: 12.535158984781585
best_error: 12.535158983813155
best_error: 12.534654600994038
best_error: 12.534654600551619
best_error: 12.53465458786333
best_error: 12.520021344087642
best_error: 12.520021325847175
best_error: 12.520021300514756
best_error: 12.517555654105717
best_error: 12.51755563727378
best_error: 12.517167942538137
best_error: 12.517167925693135
best_error: 12.5167825034151
best_error: 12.516782486333451
best_error: 12.516013351408073
best_error: 12.516013334021093
best_error: 12.515885501477072
best_error: 12.515885484081817
best_error: 12.515610132041154
best_error: 12.515610114261637
best_error: 12.486860848495944
best_error: 12.486860826847723
best_error: 12.389046680682899
best_error: 12.389046661556769
best_error: 12.2803648163448
best_error: 12.280364807750816
best_error: 12.280364797712274
best_error: 12.158472112969157
best_error: 12.15847210475727
best_error: 12.158472097123717
best_error: 12.13768606010426
best_error: 12.137685956578455
best_error: 12.035376811662486
best_error: 12.03537680876361
best_error: 12.035376686717811
best_error: 11.824552689039198
best_error: 11.824552678326366
best_error: 11.824552578810561
best_error: 11.682078730833064
best_error: 11.68207872477949
best_error: 11.682078549958485
best_error: 11.564592432950196
best_error: 11.564592432622572
best_error: 11.56459242956743
best_error: 11.564592428267856
best_error: 11.564592422167445
best_error: 11.526261810563632
best_error: 11.526261806903788
best_error: 11.526261791719882
best_error: 11.49845420203659
best_error: 11.498454196701497
best_error: 11.498454166018213
best_error: 11.472854095907568
best_error: 11.472854091546159
best_error: 11.472854090397632
best_error: 11.472854082679602
best_error: 11.461984399558245
best_error: 11.46198439281375
best_error: 11.461984312745543
best_error: 11.42762326839892
best_error: 11.427623259602429
best_error: 11.427623175449565
best_error: 11.356893878447572
best_error: 11.356893871061128
best_error: 11.356893852886433
best_error: 11.351640630646727
best_error: 11.351640624285482
best_error: 11.35164062256909
best_error: 11.351640616486605
best_error: 11.349843887628499
best_error: 11.34984388133708
best_error: 11.349843879572557
best_error: 11.349843873398969
best_error: 11.348851243835526
best_error: 11.348851237872363
best_error: 11.348851229566176
