ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.536304647890342
best_error: 11.53630463698339
best_error: 11.533289886962411
best_error: 11.533289875777838
best_error: 7.441010966444073
best_error: 7.44101071873965
best_error: 5.959916367949232
best_error: 5.9599163537051965
best_error: 5.94648800012734
best_error: 5.946488000082189
best_error: 5.946487987271756
best_error: 5.94439236507287
best_error: 5.9443923650275075
best_error: 5.94439235218754
best_error: 5.935998497360385
best_error: 5.935998497314545
best_error: 5.935998484501285
best_error: 5.9094314822036775
best_error: 5.9094314694603565
best_error: 5.639374511825055
best_error: 5.639374454328232
best_error: 5.525448002372824
best_error: 5.525447813495381
best_error: 5.372866429531089
best_error: 5.372866337189601
best_error: 5.162782657480154
best_error: 5.162782548595041
best_error: 5.032835288220747
best_error: 5.0328351662087245
best_error: 4.7697409602750245
best_error: 4.769740927769989
best_error: 4.734631220321501
best_error: 4.734631218206952
best_error: 4.734631214380882
best_error: 4.728560181421499
best_error: 4.728560079060721
best_error: 4.725503587253877
best_error: 4.725503489288189
best_error: 4.715626982255629
best_error: 4.715626900628708
best_error: 4.701071361232934
best_error: 4.701071328515828
best_error: 4.682069928237266
best_error: 4.682069901076557
best_error: 4.615908243954516
best_error: 4.615908230594137
best_error: 4.6063240379134385
best_error: 4.606323944820124
best_error: 4.599200813464586
best_error: 4.599200789791796
best_error: 4.5345323003674896
best_error: 4.534532277694341
best_error: 4.489063359738238
best_error: 4.489063351469467
best_error: 4.4606422195131845
best_error: 4.460642165350015
best_error: 4.4410763371435875
best_error: 4.441076003494315
best_error: 4.407319530490016
best_error: 4.407319349526313
best_error: 4.3962463563459675
best_error: 4.396246348935796
best_error: 4.383363295100283
best_error: 4.3833631161258095
best_error: 4.373291811313246
best_error: 4.373291776888465
best_error: 4.372020468237625
best_error: 4.372020297375838
best_error: 4.37153654787919
best_error: 4.371536508745086
best_error: 4.371263466105686
best_error: 4.371263295283879
best_error: 4.371237309294253
best_error: 4.371237269800698
best_error: 4.371218196685197
best_error: 4.371218157093553
best_error: 4.37121588572489
best_error: 4.371215846134111
best_error: 4.371214963925119
best_error: 4.371214924334691
best_error: 4.371214357701938
best_error: 4.371214318111738
best_error: 4.371214055450514
best_error: 4.371214015860422
best_error: 4.371213840019949
best_error: 4.371213800429939
best_error: 4.371213741608357
best_error: 4.371213702018389
best_error: 4.3712136657015455
best_error: 4.371213626111605
best_error: 4.371213585682132
best_error: 4.365711473177491
best_error: 4.365711452954052
best_error: 4.364779416133546
best_error: 4.3647793997078015
best_error: 4.36442740888187
best_error: 4.3644273930279365
best_error: 4.364192181296891
best_error: 4.364192165999377
best_error: 4.364026255487292
best_error: 4.364026240845207
best_error: 4.363895812557745
best_error: 4.363895797891208
best_error: 4.363797700602591
best_error: 4.363797686499393
best_error: 4.363774927040561
best_error: 4.363774913236549
best_error: 4.363772482612005
best_error: 4.363772467975164
best_error: 4.363004571205953
best_error: 4.3630045570764
best_error: 4.360132891066686
best_error: 4.360132881618995
best_error: 4.3601328805699655
best_error: 4.344016614506187
best_error: 4.344016597685029
best_error: 4.3403319219286
best_error: 4.340331903063992
best_error: 4.327350848951764
best_error: 4.327350824598396
best_error: 4.308405582501537
best_error: 4.308405554891297
best_error: 4.297089404049988
best_error: 4.297089382184949
best_error: 4.287167803185613
best_error: 4.287167797071174
best_error: 4.28179234385443
best_error: 4.281792319586044
best_error: 4.281696209700008
best_error: 4.281696195621342
best_error: 4.281503706023132
best_error: 4.281503687625785
best_error: 4.281486264119215
best_error: 4.281486244895264
best_error: 4.281461361202255
best_error: 4.281461341461032
best_error: 4.281451824565343
best_error: 4.2814518045494525
best_error: 4.281443770789822
best_error: 4.281443750760181
best_error: 4.281440236563681
best_error: 4.281440216680525
best_error: 4.2814366815041724
best_error: 4.281436661358922
best_error: 4.281433873752971
best_error: 4.281433853602673
best_error: 4.281433260195572
best_error: 4.2814332400445805
best_error: 4.281432721424208
best_error: 4.281432701272607
best_error: 4.2814324376514845
best_error: 4.281432417499567
best_error: 4.281432189108659
best_error: 4.281432168956466
best_error: 4.281432056254774
best_error: 4.281432036102428
best_error: 4.281431940465433
best_error: 4.281431920312959
best_error: 4.2814318767493935
best_error: 4.2814318565968446
best_error: 4.281431821769033
best_error: 4.281431801616423
best_error: 4.281431789649468
best_error: 4.281431769496822
best_error: 4.281431762542919
best_error: 4.281431742390241
best_error: 4.2814317242450555
best_error: 4.281431723732094
best_error: 4.281431703579371
best_error: 4.281431685300427
best_error: 4.281431676083251
best_error: 4.2814316725384085
best_error: 4.281431672398387
