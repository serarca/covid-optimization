ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 8.022929104544895
best_error: 8.022929059365868
best_error: 7.38633631969721
best_error: 7.386336239928123
best_error: 7.075472914392175
best_error: 7.075472904812175
best_error: 7.075472804205077
best_error: 6.4204153886985385
best_error: 6.42041533671302
best_error: 6.420415227209801
best_error: 6.292628730343371
best_error: 6.292628667362055
best_error: 6.292628567610587
best_error: 6.076906058076157
best_error: 6.076905983438404
best_error: 6.076905920398444
best_error: 5.356351688979468
best_error: 5.35635159510791
best_error: 5.216337014422362
best_error: 5.216336923918521
best_error: 4.21758583317816
best_error: 4.217585764003637
best_error: 2.950305522065697
best_error: 2.950305420516147
best_error: 2.9176654881978314
best_error: 2.917665488193445
best_error: 2.9176654801880018
best_error: 2.8662017585616093
best_error: 2.866201752755434
best_error: 2.8662017505260855
best_error: 2.8542922239036033
best_error: 2.8542922233040704
best_error: 2.8542921903089447
best_error: 2.8195353529108944
best_error: 2.8195353527465543
best_error: 2.8195353113358257
best_error: 2.6677791139729377
best_error: 2.667779104839344
best_error: 2.6677790994356947
best_error: 2.588244919313992
best_error: 2.588244895867991
best_error: 2.579201980492239
best_error: 2.5792019775840562
best_error: 2.5792018748296126
best_error: 2.5520724352890136
best_error: 2.55207240879806
best_error: 2.5507208187718464
best_error: 2.550720799771771
best_error: 2.550207341241858
best_error: 2.550207323516955
best_error: 2.548481190346739
best_error: 2.548481190284215
best_error: 2.548481178866
best_error: 2.5480350641452234
best_error: 2.5480350640425926
best_error: 2.548035053411887
best_error: 2.547833305839208
best_error: 2.547833305770999
best_error: 2.547833295357026
best_error: 2.5477105140115484
best_error: 2.547710513901573
best_error: 2.5477105038929713
best_error: 2.547634077206838
best_error: 2.5476340770627197
best_error: 2.5476340673629023
best_error: 2.5475849516380986
best_error: 2.5475849514634694
best_error: 2.5475849420857175
best_error: 2.5475520173747226
best_error: 2.5475520171867023
best_error: 2.547552007875235
best_error: 2.547529052884086
best_error: 2.5475290526828713
best_error: 2.547529043410625
best_error: 2.547499557723366
best_error: 2.5474995575125625
best_error: 2.547499548351866
best_error: 2.547496838444036
best_error: 2.5474968382333003
best_error: 2.547496829071661
best_error: 2.5474952925548022
best_error: 2.5474952923440726
best_error: 2.547495283181927
best_error: 2.547494325356589
best_error: 2.547494325145897
best_error: 2.5474943159834056
best_error: 2.547493762860564
best_error: 2.547493762649885
best_error: 2.5474937534871978
best_error: 2.5474933104394797
best_error: 2.547493310228808
best_error: 2.5474933010659724
best_error: 2.547493064850733
best_error: 2.5474930646400624
best_error: 2.547493055477159
best_error: 2.547492931427681
best_error: 2.5474929312170302
best_error: 2.547492922054067
best_error: 2.547492855312881
best_error: 2.5474928551022207
best_error: 2.547492845939243
best_error: 2.5474928175338376
best_error: 2.547492817323184
best_error: 2.547492808160186
best_error: 2.547492796699831
best_error: 2.5474927964891796
best_error: 2.546859260236539
best_error: 2.546859253259345
best_error: 2.5289219739893385
best_error: 2.528921970208997
best_error: 2.528782365082321
best_error: 2.528782361492083
best_error: 2.5283275009173076
best_error: 2.5283274977560626
best_error: 2.5281740957459164
best_error: 2.5281740929118053
best_error: 2.5281592586383335
best_error: 2.52815925583039
best_error: 2.52815620987547
best_error: 2.5281561904918104
best_error: 2.528146122014788
best_error: 2.528146119207457
best_error: 2.5281385637730094
best_error: 2.5281385609659486
best_error: 2.528108636657495
best_error: 2.5281086337970997
best_error: 2.527997840349776
best_error: 2.527997837191714
best_error: 2.5272800871703187
best_error: 2.527280082531613
best_error: 2.5271318710015143
best_error: 2.527131865031941
best_error: 2.527119174120907
best_error: 2.5271191683788956
best_error: 2.526990764805787
best_error: 2.52699075928187
best_error: 2.5269647608626196
best_error: 2.526964748449772
best_error: 2.526956231895898
best_error: 2.526956219481073
best_error: 2.5269499299741214
best_error: 2.526949917668867
best_error: 2.52694465433357
best_error: 2.5269446421472166
best_error: 2.526939618604018
best_error: 2.5269396064164398
best_error: 2.5269348314557325
best_error: 2.526934819403267
best_error: 2.526931776248935
best_error: 2.5269317641957096
best_error: 2.5269312097396397
best_error: 2.5269311976861966
best_error: 2.5269306992119622
best_error: 2.526930687158329
best_error: 2.5269304509630586
best_error: 2.526930438909329
best_error: 2.526930296222538
best_error: 2.526930284168752
best_error: 2.526930155476544
best_error: 2.5269301554729573
best_error: 2.5269301533131108
best_error: 2.5269301533095203
best_error: 2.5269301513003963
best_error: 2.5269301512968054
best_error: 2.526930150335244
best_error: 2.5269301503316592
best_error: 2.5269301503039725
best_error: 2.526930150300374
best_error: 2.526930150275396
best_error: 2.526930150271803
