ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.199621431488032
best_error: 11.199621335314724
best_error: 10.314602245224007
best_error: 10.314602087840417
best_error: 9.439345055029511
best_error: 9.439344852987109
best_error: 8.96613509122615
best_error: 8.966134888162754
best_error: 8.755531199814321
best_error: 8.755530986182414
best_error: 8.520832806018436
best_error: 8.520832647690465
best_error: 7.463537292479635
best_error: 7.4635371847945535
best_error: 7.463537157587437
best_error: 6.792602663818874
best_error: 6.792602559211549
best_error: 6.792602528897574
best_error: 6.698857956476916
best_error: 6.698857843119319
best_error: 6.69885782202458
best_error: 6.6550498567524485
best_error: 6.655049740427433
best_error: 6.655049723807078
best_error: 6.636729066113407
best_error: 6.636728949206724
best_error: 6.636728933101835
best_error: 6.62894266193196
best_error: 6.628942463613735
best_error: 5.239969724629024
best_error: 5.239969435223717
best_error: 4.993411074805193
best_error: 4.993410586431835
best_error: 4.761941880977109
best_error: 4.761941459222969
best_error: 4.501197271104231
best_error: 4.501196853997722
best_error: 4.3657056990457725
best_error: 4.36570527805701
best_error: 4.313517370920762
best_error: 4.313516947061644
best_error: 4.31066646400844
best_error: 4.3106662909911355
best_error: 4.30763583963912
best_error: 4.307635415038387
best_error: 4.302532203743745
best_error: 4.302531778499954
best_error: 4.301630161353346
best_error: 4.301629735995942
best_error: 4.3011746464547125
best_error: 4.301174473660828
best_error: 4.282834742994648
best_error: 4.282834303804469
best_error: 4.2769390688997415
best_error: 4.276938571233743
best_error: 4.261756057293261
best_error: 4.261755595907301
best_error: 4.249100438478257
best_error: 4.249099982753647
best_error: 4.2431551212377645
best_error: 4.243154959214725
best_error: 4.2415065050788066
best_error: 4.241506041687723
best_error: 4.229242645152655
best_error: 4.22924248746588
best_error: 4.214829779179842
best_error: 4.214829646695639
best_error: 4.1937591581109865
best_error: 4.193759023012672
best_error: 4.149089225659567
best_error: 4.1490890620594865
best_error: 4.072024656413992
best_error: 4.072024498164628
best_error: 4.016917679422448
best_error: 4.0169172707699055
best_error: 3.979136928526926
best_error: 3.979136552101967
best_error: 3.8364298183921655
best_error: 3.836429438963073
best_error: 3.6887975148421015
best_error: 3.6887974129622614
best_error: 3.688797387082002
best_error: 3.6669315170665113
best_error: 3.666931117727855
best_error: 3.456044132296748
best_error: 3.4560437326066697
best_error: 3.4402695152860194
best_error: 3.4402691174463214
best_error: 3.4379316076904933
best_error: 3.437931536197161
best_error: 3.437931482192922
best_error: 3.437666973078773
best_error: 3.4376665755553635
best_error: 3.435837426285259
best_error: 3.4358370286804374
best_error: 3.435730967463321
best_error: 3.4357305698512484
best_error: 3.4356787599537792
best_error: 3.4356783623381384
best_error: 3.4356709500503073
best_error: 3.4356705524341393
best_error: 3.4356692245790024
best_error: 3.435668826962649
best_error: 3.435668238974735
best_error: 3.4356678413582777
best_error: 3.435667752438194
best_error: 3.435667354821663
best_error: 3.4356673458064595
best_error: 3.435667311875636
best_error: 3.4356672763667113
best_error: 3.435667242435902
best_error: 3.3887837621736594
best_error: 3.388783347684601
best_error: 3.352204681880476
best_error: 3.3522042536182024
best_error: 3.349305914079199
best_error: 3.3493054967414873
best_error: 3.3236954622590167
best_error: 3.3236950435321377
best_error: 3.3174026266271017
best_error: 3.317402202045926
best_error: 3.3141203454439436
best_error: 3.3141199214672428
best_error: 3.3128924704044307
best_error: 3.3128920413880394
best_error: 3.3125238156646293
best_error: 3.312523388679396
best_error: 3.3123836659116304
best_error: 3.312383238194136
best_error: 3.293334114942592
best_error: 3.29333369790478
best_error: 3.2845159923984184
best_error: 3.2845155754694497
best_error: 3.2827918743226414
best_error: 3.2827914571653993
best_error: 3.282118751598624
best_error: 3.2821183343522846
best_error: 3.2816789511758158
best_error: 3.2816785338712373
best_error: 3.281676830287739
best_error: 3.2816767798910202
best_error: 3.2816767042321717
best_error: 3.2778497073276047
best_error: 3.2778492892930307
best_error: 3.258437431770024
best_error: 3.25843701166917
best_error: 3.1856935796515233
best_error: 3.1856931597302243
best_error: 3.178968267737143
best_error: 3.1789682382982334
best_error: 3.178968141635378
best_error: 3.1773676100406245
best_error: 3.1773671898939053
best_error: 3.176754883792584
best_error: 3.176754463611737
best_error: 3.176741848821906
best_error: 3.17674181918586
best_error: 3.1767417227537313
best_error: 3.176722231664658
best_error: 3.1767218114809954
best_error: 3.17668921532738
best_error: 3.176688795140895
best_error: 3.176684067158435
best_error: 3.176683646971525
best_error: 3.176681442739611
best_error: 3.17668102255248
best_error: 3.176680304181608
best_error: 3.176679883994373
best_error: 3.176679883248194
best_error: 3.176679492772461
best_error: 3.1749508790163965
best_error: 3.1749504480060846
best_error: 3.174787397854117
best_error: 3.174786969708107
best_error: 3.1746901426677487
best_error: 3.1746897145725805
best_error: 3.1740666796511285
best_error: 3.1740662519775866
best_error: 3.17398371053859
best_error: 3.173983282877991
best_error: 3.1739177434765056
best_error: 3.173917315825238
best_error: 3.1738659495070825
best_error: 3.1738655227437573
best_error: 3.1738318491958157
best_error: 3.1738314224367956
best_error: 3.173789278881776
best_error: 3.173788852458893
best_error: 3.173768480513181
best_error: 3.1737680540927387
best_error: 3.173759423078061
best_error: 3.173758996658672
best_error: 3.173757469010877
best_error: 3.1737570425917108
