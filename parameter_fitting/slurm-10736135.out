ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.380772040179007
best_error: 11.380772034462519
best_error: 11.133711390331502
best_error: 11.13371135598343
best_error: 8.951670501644122
best_error: 8.951670186127785
best_error: 7.00602665103313
best_error: 7.0060263522011414
best_error: 6.931669283228324
best_error: 6.749247251515098
best_error: 6.7492472515150315
best_error: 6.7492472489590725
best_error: 6.73681172883113
best_error: 6.736811728831057
best_error: 6.736811725448081
best_error: 6.735858461847927
best_error: 6.735858461847852
best_error: 6.735858458435
best_error: 6.735657681666625
best_error: 6.735657681666555
best_error: 6.735657678228053
best_error: 6.735605333147651
best_error: 6.73560533314758
best_error: 6.7356053297091565
best_error: 6.735583693423825
best_error: 6.735583693423758
best_error: 6.735583689985312
best_error: 6.735573255278377
best_error: 6.735573255278304
best_error: 6.735573251839857
best_error: 6.7355680981606145
best_error: 6.735568098160551
best_error: 6.735568094722099
best_error: 6.735565519300593
best_error: 6.73556551930052
best_error: 6.735565515862071
best_error: 6.7355642249569545
best_error: 6.735564224956886
best_error: 6.735564221518433
best_error: 6.735564181779229
best_error: 6.735564051422746
best_error: 6.735564051422675
best_error: 6.735564047984222
best_error: 6.735564021785433
best_error: 6.735564021785363
best_error: 6.735564018346912
best_error: 6.735564009693489
best_error: 6.735564009693414
best_error: 6.7355640062549735
best_error: 6.735564003729792
best_error: 6.735564003729719
best_error: 6.735564000291271
best_error: 6.7355639961061815
best_error: 6.735419757017729
best_error: 6.735419680790718
best_error: 6.734839511324429
best_error: 6.734839435059955
best_error: 6.732469532609919
best_error: 6.732469456289968
best_error: 6.722732755242085
best_error: 6.722732755242009
best_error: 6.722732751208325
best_error: 6.6802084843637175
best_error: 6.680208484363655
best_error: 6.68020847905543
best_error: 6.633629878192435
best_error: 6.633629878192414
best_error: 6.633450804148204
best_error: 6.633450804148191
best_error: 6.633123434674529
best_error: 6.633123434674504
best_error: 6.628605690872069
best_error: 6.628605690872057
best_error: 6.611305126243794
best_error: 6.611305126243775
best_error: 6.567747547967924
best_error: 6.567747547967917
best_error: 6.525880719959028
best_error: 6.513558317490822
best_error: 6.513558317490786
best_error: 6.498339673268238
best_error: 6.498339673268201
best_error: 6.497399676526382
best_error: 6.497399676526359
best_error: 6.497382162560333
best_error: 6.497382162560309
best_error: 6.497373411319643
best_error: 6.497373411319619
best_error: 6.497362935476491
best_error: 6.497362935476462
best_error: 6.497329837963084
best_error: 6.4973298379630675
best_error: 6.497170320070611
best_error: 6.497170320070585
best_error: 6.3594445369191215
best_error: 6.35944447002133
best_error: 5.627211480771461
best_error: 5.62721122978699
best_error: 5.443415109265614
best_error: 5.4434151092655965
best_error: 5.205795287038532
best_error: 5.205795250405966
best_error: 5.205795229881218
best_error: 5.1906818733913465
best_error: 5.190681873391309
best_error: 5.1906818647811575
best_error: 5.144445938128787
best_error: 5.144445934518503
best_error: 5.1444459263303335
best_error: 5.113142264535611
best_error: 5.113142264535577
best_error: 5.101647855121739
best_error: 5.101647828293527
best_error: 4.999570787231209
best_error: 4.999570787231155
best_error: 4.9995707585199565
best_error: 4.982767041888892
best_error: 4.982767041888833
best_error: 4.982767012129017
best_error: 4.977412841832768
best_error: 4.977412841832713
best_error: 4.976169681318398
best_error: 4.9761696813183365
best_error: 4.975479042329396
best_error: 4.975479042329331
best_error: 4.975264323212361
best_error: 4.975264323212295
best_error: 4.975185272387382
best_error: 4.975185272387318
best_error: 4.9751223660251895
best_error: 4.97512236602512
best_error: 4.975049148817777
best_error: 4.975049148817716
best_error: 4.975049148817707
best_error: 4.975030646899745
best_error: 4.975030560571704
best_error: 4.975020850679199
best_error: 4.975020850679132
best_error: 4.9750208506791225
best_error: 4.975016680276573
best_error: 4.97501668027651
best_error: 4.9750166802765
best_error: 4.975015222842236
best_error: 4.975015222842169
best_error: 4.975015222842156
best_error: 4.97501477993214
best_error: 4.975014779932068
best_error: 4.975014779932065
best_error: 4.9750145746743275
best_error: 4.9750145746742565
best_error: 4.975014574674254
best_error: 4.975014302455824
best_error: 4.9750143024557545
best_error: 4.975014302455749
best_error: 4.9750141254054885
best_error: 4.9750141254054245
best_error: 4.975014125405422
best_error: 4.975014097071347
best_error: 4.97501409707128
best_error: 4.975014097071275
best_error: 4.975014072939407
best_error: 4.975014072939337
best_error: 4.975014072939336
best_error: 4.975014063662629
best_error: 4.975014063662558
best_error: 4.975014063662554
best_error: 4.9750140475206175
