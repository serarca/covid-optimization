ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 66
days_switch 25
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.60838966667079
best_error: 101.60838949835197
best_error: 101.60838946630612
best_error: 20.577670272945713
best_error: 20.57767027294498
best_error: 20.577670271429188
best_error: 20.577461649039925
best_error: 20.5774616475179
best_error: 20.57661959895866
best_error: 20.5766195974144
best_error: 20.573126368603926
best_error: 20.573126366966296
best_error: 20.556848095212974
best_error: 20.556848093117743
best_error: 20.409038961281922
best_error: 20.409038952576587
best_error: 20.40608240480578
best_error: 20.406082395906004
best_error: 20.073013336372767
best_error: 20.073013293652245
best_error: 15.392351687812969
best_error: 15.392351032455984
best_error: 15.122160110972064
best_error: 15.122160069077387
best_error: 14.63319961875254
best_error: 14.633199587645896
best_error: 14.534295418091254
best_error: 14.534295417435626
best_error: 14.534295354934695
best_error: 14.532462045608854
best_error: 14.53246204492303
best_error: 14.532461982897573
best_error: 14.531962355905925
best_error: 14.531962355221005
best_error: 14.53196229315111
best_error: 14.531746444973573
best_error: 14.531746444289052
best_error: 14.531746382199948
best_error: 14.531603692633748
best_error: 14.53160369194948
best_error: 14.531603629847679
best_error: 14.531601679641124
best_error: 14.531601655528497
best_error: 14.531580459550064
best_error: 14.531580458867268
best_error: 14.53158039675249
best_error: 14.529604966335233
best_error: 14.529604965673645
best_error: 14.529604903248291
best_error: 14.521711238823174
best_error: 14.521711238279618
best_error: 14.52171117397586
best_error: 14.490609473064524
best_error: 14.490609449739125
best_error: 14.489263489517484
best_error: 14.489263390244176
best_error: 14.464337318633824
best_error: 14.464337314073301
best_error: 14.464337303145872
best_error: 14.46328327782573
best_error: 14.463283250371145
best_error: 14.461846171676028
best_error: 14.461846167013757
best_error: 14.461846157612314
best_error: 14.456534430490624
best_error: 14.45653442522104
best_error: 14.456534420909541
best_error: 14.455634544375325
best_error: 14.455634539079096
best_error: 14.45563453478459
best_error: 14.455202086573912
best_error: 14.455202081264268
best_error: 14.455202077019806
best_error: 14.454986108765219
best_error: 14.454986103455427
best_error: 14.454986099209155
best_error: 14.454966594590882
best_error: 14.454966589281074
best_error: 14.45496658503464
best_error: 14.45495250703667
best_error: 14.454952501726844
best_error: 14.4549524974803
best_error: 14.454943078585266
best_error: 14.454943073275444
best_error: 14.454943069028815
best_error: 14.454936773153445
best_error: 14.454936767843616
best_error: 14.454936763596933
best_error: 14.454931762956083
best_error: 14.454931757646253
best_error: 14.454931753399528
best_error: 14.454928493134894
best_error: 14.454928465899064
best_error: 14.454924268861031
best_error: 14.454924263551197
best_error: 14.454924259304407
best_error: 14.454923620289318
best_error: 14.454923614979482
best_error: 14.454923610732687
best_error: 14.4549233373107
best_error: 14.454923332000865
best_error: 14.454923327754063
best_error: 14.454923040295737
best_error: 14.454923034985905
best_error: 14.454923030739103
best_error: 14.454922887111344
best_error: 14.454922881801508
best_error: 14.454922877554706
best_error: 14.454922831908402
best_error: 14.45492282659856
best_error: 14.454922822351765
best_error: 14.454922789016319
best_error: 14.45492278370648
best_error: 14.454922779459679
best_error: 14.454922768947394
best_error: 14.454922763637558
best_error: 14.454922759390758
best_error: 14.454922757464129
best_error: 14.454922730228406
best_error: 14.454922724749839
best_error: 14.454922719440006
best_error: 14.454922717776487
best_error: 14.45492271545039
best_error: 14.454916627033956
best_error: 14.454916599798207
best_error: 14.454386555370949
best_error: 14.45438652814194
best_error: 14.452268419401559
best_error: 14.45226839222537
best_error: 14.451490000660673
best_error: 14.451489973494354
best_error: 14.400775387823057
best_error: 14.400775049054547
best_error: 14.391555868979864
best_error: 14.391555866242028
best_error: 14.391555826635027
best_error: 14.296763807035983
best_error: 14.296763782015173
best_error: 14.296763781643559
best_error: 14.150724713769197
best_error: 14.150724682057339
best_error: 14.141996858172657
best_error: 14.141996827009656
best_error: 14.109854817133696
best_error: 14.109854788721002
best_error: 14.078657949326118
best_error: 14.078657898789643
best_error: 14.069735367618733
best_error: 14.069735327703938
best_error: 14.058626099908395
best_error: 14.058626058617522
best_error: 14.030391489550256
best_error: 14.030391472274843
best_error: 14.030391148943789
best_error: 14.02028083522857
best_error: 14.02028080798931
best_error: 13.901593534029349
best_error: 13.901593527540337
best_error: 13.901593527019584
best_error: 13.901593526248018
best_error: 13.87010473765627
best_error: 13.87010473108274
best_error: 13.870104730692926
best_error: 13.870104729944627
best_error: 13.749969499360724
best_error: 13.749969492356936
best_error: 13.749969491923565
best_error: 13.648603800885201
best_error: 13.648603794877435
best_error: 13.648603793292086
best_error: 13.595423922585082
best_error: 13.59542391628742
best_error: 13.595423913284709
best_error: 13.547002238605987
best_error: 13.5470022323703
best_error: 13.547002229931374
best_error: 13.507049210701307
best_error: 13.507049210332625
best_error: 13.50704920459857
best_error: 13.507049202869567
best_error: 13.329421478958725
best_error: 13.32942144623835
best_error: 13.329420860208089
best_error: 13.183246831300863
best_error: 13.183246793680599
best_error: 13.08775813703703
best_error: 13.087758041005124
best_error: 13.064409051471376
best_error: 13.064408960026036
best_error: 13.056368371708276
best_error: 13.056368290348207
best_error: 13.051639168706252
best_error: 13.051639168706249
best_error: 13.051639162464562
best_error: 13.05065843248121
best_error: 13.050658352054922
best_error: 13.050494090951698
best_error: 13.05049408471765
best_error: 13.044443679473103
best_error: 13.044443598116144
best_error: 13.039025729324006
best_error: 13.039025722883222
best_error: 13.031988178896267
best_error: 13.031988101151283
best_error: 13.031066400003528
best_error: 13.03106632255537
best_error: 13.028504509642177
best_error: 13.028504503176942
best_error: 13.02682463713607
best_error: 13.026824561112779
best_error: 13.02669851023062
best_error: 13.026698434200334
best_error: 13.026614780709904
best_error: 13.026614704674971
best_error: 13.026583772539475
best_error: 13.026583766087374
best_error: 13.026362036705818
best_error: 13.026361960667236
best_error: 13.026356837003576
best_error: 13.026356830551038
best_error: 13.026349228755596
best_error: 13.026349152716248
best_error: 13.026347783949067
best_error: 13.02634770790964
best_error: 13.02634767684117
best_error: 13.026347669263755
best_error: 13.026347664647233
best_error: 13.026347664098251
