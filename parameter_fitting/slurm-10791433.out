ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.966454902055167
best_error: 9.966454896566812
best_error: 7.909551894328807
best_error: 7.909551837043315
best_error: 7.909551800287437
best_error: 5.882847985829928
best_error: 5.8828477193848965
best_error: 5.270530802644882
best_error: 5.270530705771877
best_error: 3.5698639097940146
best_error: 3.5698638208444997
best_error: 3.569863758636417
best_error: 3.5336871434860115
best_error: 3.5336870660448874
best_error: 3.5336869607957175
best_error: 3.5136541650208577
best_error: 3.5136540818733564
best_error: 3.5136540020106013
best_error: 2.745334009521457
best_error: 2.745333972527221
best_error: 2.745333948683676
best_error: 2.7382343980419366
best_error: 2.7382343747330244
best_error: 2.618254123771922
best_error: 2.6182541008391915
best_error: 2.6048913637622255
best_error: 2.6048912185853106
best_error: 2.5137751297715893
best_error: 2.5137751158326127
best_error: 2.5133585573797848
best_error: 2.513358555328892
best_error: 2.5133585517087695
best_error: 2.5098310782082174
best_error: 2.5098310517727236
best_error: 2.508525841353303
best_error: 2.5085258151791954
best_error: 2.503922162959962
best_error: 2.503922162634363
best_error: 2.503922157118088
best_error: 2.473062118153714
best_error: 2.4730621178368635
best_error: 2.473062111941489
best_error: 2.412427859994397
best_error: 2.4124278587283294
best_error: 2.3872238590265242
best_error: 2.387223853458286
best_error: 2.3585127465737257
best_error: 2.3585127263644017
best_error: 2.339609809969587
best_error: 2.339609794194275
best_error: 2.2380435887534835
best_error: 2.238043586601526
best_error: 2.2338998526349285
best_error: 2.233899612029258
best_error: 2.1832420592896136
best_error: 2.1832420563638264
best_error: 2.183241951235778
best_error: 2.1715077712952793
best_error: 2.171507770294237
best_error: 2.171507664845939
best_error: 2.171205958517141
best_error: 2.1712059579562184
best_error: 2.170795611513944
best_error: 2.1707955945784
best_error: 2.1707274676207353
best_error: 2.1707274670540095
best_error: 2.1707274533326326
best_error: 2.1707153533833314
best_error: 2.170715352816036
best_error: 2.170715339176421
best_error: 2.170709413301874
best_error: 2.1707094127346767
best_error: 2.1707093990949877
best_error: 2.1707064329092467
best_error: 2.170706432396461
best_error: 2.1707064187023684
best_error: 2.1707049337492195
best_error: 2.170704933236455
best_error: 2.1707049195423482
best_error: 2.1707041520702153
best_error: 2.170704151557467
best_error: 2.1707041378633427
best_error: 2.1707037435041285
best_error: 2.17070374299139
best_error: 2.1707037292972577
best_error: 2.170703541690842
best_error: 2.1707035411781055
best_error: 2.1707035274840014
best_error: 2.170703470325715
best_error: 2.17070346981297
best_error: 2.1707034561188827
best_error: 2.1707034452935914
best_error: 2.1707034447808513
best_error: 2.1707034310867526
best_error: 2.1707034291128546
best_error: 2.170703428600114
best_error: 2.170703419090083
best_error: 2.1707034185110405
best_error: 2.1707034084089134
best_error: 2.170703407896172
best_error: 2.170703404420727
best_error: 2.1707034040149447
best_error: 2.170701533492915
best_error: 2.1707015329110098
best_error: 2.1706991446382045
best_error: 2.1706991440559316
best_error: 2.170689629655032
best_error: 2.1706896290705378
best_error: 2.170661958970064
best_error: 2.1706619583734916
best_error: 2.170620155989746
best_error: 2.1706201553550644
best_error: 2.170608568441798
best_error: 2.170608567804967
best_error: 2.170594508964041
best_error: 2.1705945072526163
best_error: 2.1705944983995162
best_error: 2.1705921222903877
best_error: 2.1705921207254306
best_error: 2.17059211129684
best_error: 2.17057958757509
best_error: 2.17057958606389
best_error: 2.170579576539766
best_error: 2.1705324533421897
best_error: 2.1705324520455593
best_error: 2.1705324419740015
best_error: 2.17024674524712
best_error: 2.170246744596247
best_error: 2.170155215064966
best_error: 2.170155214427691
best_error: 2.1701259058705666
best_error: 2.170125894202118
best_error: 2.1701244031024474
best_error: 2.170124391696577
best_error: 2.1700864670888955
best_error: 2.1700864669292335
best_error: 2.1700864560799635
best_error: 2.1700011347425887
best_error: 2.1700011346816535
best_error: 2.170001123814964
best_error: 2.1699281530757064
best_error: 2.1699281524410647
best_error: 2.16992805285727
best_error: 2.169718685180494
best_error: 2.1697186726313995
best_error: 2.1695599012410556
best_error: 2.169559900952838
best_error: 2.169412615110093
best_error: 2.169412614246224
best_error: 2.169412604987514
best_error: 2.1693492178696436
best_error: 2.1693492173213533
best_error: 2.1693492071043026
best_error: 2.169343465988766
best_error: 2.1693434654799457
best_error: 2.1693434553418576
best_error: 2.1693401046501135
best_error: 2.1693400913813945
best_error: 2.169310600643004
best_error: 2.1693106006327314
best_error: 2.169310589090025
best_error: 2.1693098522411067
best_error: 2.1693098522306986
best_error: 2.169309840686959
best_error: 2.1693089806790504
best_error: 2.1693089806684687
best_error: 2.169308969123535
best_error: 2.1693075388099268
best_error: 2.1693075270939426
best_error: 2.1693069982310607
best_error: 2.1693069981116784
best_error: 2.1693058875265074
best_error: 2.1693058758077695
best_error: 2.169305495569371
best_error: 2.1693054838499726
best_error: 2.1693054270102907
best_error: 2.1693054152908466
best_error: 2.169305349649652
best_error: 2.1693053379301532
best_error: 2.1693052653264635
best_error: 2.169305253606907
best_error: 2.1693052329021727
best_error: 2.169305232783166
best_error: 2.169305202532038
best_error: 2.169305190812438
best_error: 2.169305188541588
best_error: 2.1693051845951694
best_error: 2.169305184465494
best_error: 2.1693051817550755
best_error: 2.169305181625406
best_error: 2.1693051814397633
best_error: 2.1693051813207616
best_error: 2.169305181274664
best_error: 2.1693051803848555
best_error: 2.16930518025519
best_error: 2.1693051801670102
