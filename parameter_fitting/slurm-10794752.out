ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 8.995882206511261
best_error: 8.995882170536643
best_error: 7.802382597598063
best_error: 7.802382503307397
best_error: 6.757238289044878
best_error: 6.757238133880667
best_error: 6.353253717415105
best_error: 6.353253661198842
best_error: 6.353253555189172
best_error: 6.147369922723614
best_error: 6.1473698488553925
best_error: 6.147369763707188
best_error: 5.867209207350397
best_error: 5.867209122135709
best_error: 5.867209084761001
best_error: 4.981461265531376
best_error: 4.98146117736882
best_error: 4.981461173910985
best_error: 4.630232926111646
best_error: 4.630232838690836
best_error: 4.153825440780462
best_error: 4.153825355732289
best_error: 3.6401673639601158
best_error: 3.640166978170273
best_error: 3.2729174561741354
best_error: 3.272917447376959
best_error: 3.2729173571894647
best_error: 3.180861287122922
best_error: 3.180861177745596
best_error: 3.1343710089978987
best_error: 3.1343710035249606
best_error: 3.1343710031876006
best_error: 3.1343709959943475
best_error: 3.1096944681513543
best_error: 3.109694449279218
best_error: 3.1044080347828484
best_error: 3.1044080265152303
best_error: 3.088753660312111
best_error: 3.088753656839239
best_error: 3.088753652698074
best_error: 3.0679255832603167
best_error: 3.0679255029416312
best_error: 3.0452027802632893
best_error: 3.045202780246643
best_error: 3.0452027702543054
best_error: 2.9868004753107598
best_error: 2.9868004524402236
best_error: 2.986800426201271
best_error: 2.979547570587486
best_error: 2.9795475662064983
best_error: 2.8649383978755174
best_error: 2.8649383830044974
best_error: 2.8649383680268175
best_error: 2.8416449573529703
best_error: 2.841644735502056
best_error: 2.729065811035411
best_error: 2.729065683042194
best_error: 2.71222652592429
best_error: 2.712226512378465
best_error: 2.7061695941554667
best_error: 2.7061694778291674
best_error: 2.7054302172837246
best_error: 2.7054302082094677
best_error: 2.704696169462074
best_error: 2.704696056512041
best_error: 2.7035027942053196
best_error: 2.7035027941155008
best_error: 2.7033950088556393
best_error: 2.7033950088397116
best_error: 2.7028444229409456
best_error: 2.702844314761695
best_error: 2.701048396297132
best_error: 2.7010482885817986
best_error: 2.694401937279993
best_error: 2.694401832607917
best_error: 2.6892806556419755
best_error: 2.689280629808144
best_error: 2.6826480285863887
best_error: 2.6826480281946763
best_error: 2.682647944475402
best_error: 2.6739866074556184
best_error: 2.6739865127265823
best_error: 2.6730870709067767
best_error: 2.6730870685675563
best_error: 2.6717039583586857
best_error: 2.6717039565991527
best_error: 2.670083984979499
best_error: 2.6700839843495743
best_error: 2.670043171308939
best_error: 2.6700431712906383
best_error: 2.6700185552486833
best_error: 2.6700185550201305
best_error: 2.66998957549254
best_error: 2.669989575140403
best_error: 2.6699790424291985
best_error: 2.6699790420501923
best_error: 2.6699452596441944
best_error: 2.6699452591491992
best_error: 2.669940859010196
best_error: 2.6699408585151465
best_error: 2.6699365806078594
best_error: 2.6699365800988213
best_error: 2.6699344651610977
best_error: 2.669934464652032
best_error: 2.669932405010422
best_error: 2.6699324045013237
best_error: 2.669931363707313
best_error: 2.669931363180359
best_error: 2.6699306794586506
best_error: 2.6699306789316912
best_error: 2.6699300151102574
best_error: 2.669930014583286
best_error: 2.669929670015823
best_error: 2.669929669488844
best_error: 2.6699293355489324
best_error: 2.6699293350219597
best_error: 2.6699291591806764
best_error: 2.669929158642079
best_error: 2.669929036791159
best_error: 2.669929036252545
best_error: 2.6699289188623547
best_error: 2.669928918323746
best_error: 2.669928538721039
best_error: 2.6699285382782754
best_error: 2.6699276273233137
best_error: 2.669927524989271
best_error: 2.6699271588895197
best_error: 2.6699271584927433
best_error: 2.669927120911262
best_error: 2.6699271205144837
best_error: 2.669927086684628
best_error: 2.669927086287848
best_error: 2.669926914045541
best_error: 2.6699269137205226
best_error: 2.669926661019556
best_error: 2.669926660694572
best_error: 2.669926659252789
best_error: 2.669926658927796
best_error: 2.669926657549678
best_error: 2.669926657224689
best_error: 2.6699266563416226
best_error: 2.669926656016635
best_error: 2.6699266552002285
best_error: 2.669926654875231
best_error: 2.6699266540702817
best_error: 2.669926653745297
best_error: 2.6699266530544357
best_error: 2.669926652729456
best_error: 2.669926652106544
best_error: 2.6699266517815583
best_error: 2.6699266487755913
best_error: 2.6699266484506032
best_error: 2.6699266465398717
best_error: 2.669926646214888
best_error: 2.669926638339137
best_error: 2.669926638014151
best_error: 2.669926637909284
best_error: 2.6699266378845996
best_error: 2.669926637831363
best_error: 2.6699266377855504
best_error: 2.669926637741162
best_error: 2.6699266373598785
best_error: 2.6699266373417254
best_error: 2.669926637333025
best_error: 2.6699266373244805
best_error: 2.6699266373138997
best_error: 2.6699266373038713
best_error: 2.6699266371558017
best_error: 2.6699266371376504
best_error: 2.6699266371350325
best_error: 2.66992663713249
best_error: 2.669926637131741
