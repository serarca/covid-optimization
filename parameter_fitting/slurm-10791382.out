ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.926679881451316
best_error: 10.92667987418065
best_error: 10.920595086063607
best_error: 10.920595078401838
best_error: 7.955350517075514
best_error: 7.9553501558192945
best_error: 7.0677883408211954
best_error: 7.067787873260412
best_error: 5.884547245346246
best_error: 5.884546660310164
best_error: 4.948327947628899
best_error: 4.948327751837138
best_error: 4.923418077781972
best_error: 4.923418077721284
best_error: 4.923418061541268
best_error: 4.920681898335201
best_error: 4.920681898274261
best_error: 4.920681882279787
best_error: 4.909840891329064
best_error: 4.909840891266933
best_error: 4.909840875858516
best_error: 4.903081368107492
best_error: 4.903081312053781
best_error: 4.864189262145805
best_error: 4.864189206414252
best_error: 4.6967917813818
best_error: 4.696791728542812
best_error: 4.082138583596911
best_error: 4.082138440129784
best_error: 4.0621859846183614
best_error: 4.062185770689893
best_error: 4.038730431341962
best_error: 4.038730424767264
best_error: 4.038730423272697
best_error: 4.038001299229859
best_error: 4.038001291744978
best_error: 4.03800129109857
best_error: 4.035206901025918
best_error: 4.035206716037035
best_error: 3.943006398395016
best_error: 3.9430063198004155
best_error: 3.7138770214219576
best_error: 3.7138769402190617
best_error: 3.7073570615521723
best_error: 3.7073570159989337
best_error: 3.6432199804484084
best_error: 3.643219952256323
best_error: 3.5752830334460604
best_error: 3.575283015145793
best_error: 3.5633775092492557
best_error: 3.563377482160719
best_error: 3.508229573624044
best_error: 3.508229430427961
best_error: 3.501014376242727
best_error: 3.5010142684289702
best_error: 3.4918626785939884
best_error: 3.4918625886012635
best_error: 3.4862075127002967
best_error: 3.486207500573903
best_error: 3.4840398742500467
best_error: 3.4840398539212365
best_error: 3.480808881022773
best_error: 3.4808088794279746
best_error: 3.4807517094890437
best_error: 3.4807517061148148
best_error: 3.480726300707375
best_error: 3.480726299273936
best_error: 3.48071876195225
best_error: 3.4807187609740873
best_error: 3.4806809538395336
best_error: 3.480680953194453
best_error: 3.4806423736921976
best_error: 3.4806423721829587
best_error: 3.4805915668711256
best_error: 3.480591565387511
best_error: 3.480492132981806
best_error: 3.480492132325364
best_error: 3.480464561716585
best_error: 3.4804645612002494
best_error: 3.480436107964845
best_error: 3.4804361074824426
best_error: 3.480414706375506
best_error: 3.4804147059300505
best_error: 3.4804143379167662
best_error: 3.48041433747131
best_error: 3.4804140974774453
best_error: 3.4804140970319866
best_error: 3.480413939986055
best_error: 3.4804139395406017
best_error: 3.4804138362225694
best_error: 3.480413835777103
best_error: 3.4804137376618565
best_error: 3.4804137372163977
best_error: 3.4804136868663127
best_error: 3.4804136864208592
best_error: 3.4804136527924703
best_error: 3.480413652347013
best_error: 3.4804136205415235
best_error: 3.4804136200960665
best_error: 3.480413602919451
best_error: 3.480413602473985
best_error: 3.480413586329317
best_error: 3.4804135858838636
best_error: 3.48041357639883
best_error: 3.480413575953379
best_error: 3.480369056844167
best_error: 3.4803690534181966
best_error: 3.4803418958831926
best_error: 3.4803418954736856
best_error: 3.480327713164899
best_error: 3.4803277127544994
best_error: 3.480319373177238
best_error: 3.480319369908602
best_error: 3.480276613030218
best_error: 3.4802766120747157
best_error: 3.48020289467406
best_error: 3.480202894270705
best_error: 3.4801635258785852
best_error: 3.480163525209325
best_error: 3.480150903165744
best_error: 3.480150902899104
best_error: 3.480150902778373
best_error: 3.4801509027730804
best_error: 3.480146008295165
best_error: 3.480146008030359
best_error: 3.480146007918674
best_error: 3.4801460079016158
best_error: 3.480126738370283
best_error: 3.480126738174485
best_error: 3.480126737777728
best_error: 3.4800569467036895
best_error: 3.4800569466211435
best_error: 3.480056945314503
best_error: 3.4800386072602434
best_error: 3.480038605091604
best_error: 3.479733324884225
best_error: 3.4797333199354012
best_error: 3.479717254468543
best_error: 3.479717249366039
best_error: 3.4797092137705157
best_error: 3.479709208259193
best_error: 3.4797066107898664
best_error: 3.479706605201829
best_error: 3.479704325259739
best_error: 3.4797043196760002
best_error: 3.4797022030660747
best_error: 3.479702197486321
best_error: 3.479696200793262
best_error: 3.4796961952247685
best_error: 3.4796919663761203
best_error: 3.479691960688944
best_error: 3.4796752446182486
best_error: 3.4796752386131886
best_error: 3.4796746154518488
best_error: 3.4796746094478204
best_error: 3.4796740175021044
best_error: 3.479674011499038
best_error: 3.479673696161565
best_error: 3.4796736901590277
best_error: 3.4796733920240897
best_error: 3.4796733860220477
best_error: 3.47967321702952
best_error: 3.4796732110277637
best_error: 3.4796730529801865
best_error: 3.4796730469786965
best_error: 3.4796729398823283
best_error: 3.4796729338810204
best_error: 3.4796728370720205
best_error: 3.479672831070885
best_error: 3.479672700235638
best_error: 3.479672694234728
best_error: 3.479672593078047
best_error: 3.4796725870773044
best_error: 3.479672406598489
best_error: 3.479672281141956
best_error: 3.479672106429805
best_error: 3.479672100429858
best_error: 3.479672087782756
best_error: 3.4796720817828386
best_error: 3.479672065549387
best_error: 3.4796720595495088
best_error: 3.479672048135788
best_error: 3.479672042135937
best_error: 3.479672039277557
best_error: 3.479671983364343
best_error: 3.4796719773645974
best_error: 3.4796719429553145
best_error: 3.47967193695563
best_error: 3.4796719101871076
