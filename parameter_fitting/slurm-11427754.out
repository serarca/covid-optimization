ParameterFittingRandomToPython.py:123: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  french_days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values - data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values - data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:148: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values - data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:148: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values - data[data['reg']==11][data['cl_age90']==0].rea.values
days_ahead 68
days_switch 95
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
best_error: 22.71710639246867
best_error: 22.71710568510314
best_error: 4.957176558894237
best_error: 4.957176558355294
best_error: 4.9571337695189275
best_error: 4.957133769515281
best_error: 4.957133769511689
best_error: 4.95696233413762
best_error: 4.956962334133945
best_error: 4.956962334130366
best_error: 4.956272109796349
best_error: 4.956272109792567
best_error: 4.956272109789042
best_error: 4.9534370407719175
best_error: 4.953437040767645
best_error: 4.953437040764376
best_error: 4.940736130696049
best_error: 4.940736130688615
best_error: 4.940736130687298
best_error: 4.831370534812833
best_error: 4.831370534336278
best_error: 4.820863290603199
best_error: 4.820863289981647
best_error: 4.804668195549317
best_error: 4.804668194652533
best_error: 3.865190411396777
best_error: 3.8651904074359407
best_error: 3.8651903530165987
best_error: 3.8651190563130995
best_error: 3.865118997003618
best_error: 3.589008112595632
best_error: 3.589008098641039
best_error: 3.5890080149376526
best_error: 3.379532646686918
best_error: 3.379532588892439
best_error: 3.3640131377402627
best_error: 3.364013055794991
best_error: 3.2984418669554794
best_error: 3.2984418188675666
best_error: 3.2388361799780374
best_error: 3.238836154787778
best_error: 3.155063728104023
best_error: 3.1550636954919447
best_error: 3.0951014311047014
best_error: 3.0951012404298712
best_error: 3.057096186538415
best_error: 3.057096161895645
best_error: 3.0460664657817467
best_error: 3.0460664584680144
best_error: 3.044603687125053
best_error: 3.04460368299226
best_error: 3.0340668453778017
best_error: 3.034066833079761
best_error: 2.9966961803451597
best_error: 2.996696129676142
best_error: 2.761799115517649
best_error: 2.7617990546572053
best_error: 2.676497681720834
best_error: 2.676497586382678
best_error: 2.5307990873929604
best_error: 2.5307989487188296
best_error: 2.327154236151904
best_error: 2.3271542361397435
best_error: 2.327154234353282
best_error: 2.327154233475555
best_error: 2.3271542333373954
best_error: 2.283869671144406
best_error: 2.2838696318785114
best_error: 2.2598908513474414
best_error: 2.259890820365005
best_error: 2.2525095129343695
best_error: 2.2525094673172306
best_error: 2.2260551284950787
best_error: 2.2260550916977535
best_error: 2.216578966700126
best_error: 2.2165789424517084
best_error: 2.211853072448997
best_error: 2.2118530648148864
best_error: 2.211710555377843
best_error: 2.2117105272961535
best_error: 2.2113806649205983
best_error: 2.211380659092527
best_error: 2.211291896359446
best_error: 2.211291893473313
best_error: 2.211291891907824
best_error: 2.210969889063905
best_error: 2.2109698882998314
best_error: 2.2109698844140144
best_error: 2.208868034930655
best_error: 2.2088680249388783
best_error: 2.2017031460789434
best_error: 2.201703123057023
best_error: 2.1957397948150996
best_error: 2.1957397665398264
best_error: 2.1916903223505595
best_error: 2.1916902912055254
best_error: 2.190291656546042
best_error: 2.190291587120727
best_error: 2.175008038306278
best_error: 2.1750079669701314
best_error: 2.1302413369410083
best_error: 2.130241281784313
best_error: 2.0547228973039204
best_error: 2.054722893857512
best_error: 2.054722893706051
best_error: 2.0304816381977333
best_error: 2.0304816381703166
best_error: 2.0304816368228646
best_error: 2.0304816363964466
best_error: 2.0304816358044544
best_error: 2.0280364650430993
best_error: 2.028036465010026
best_error: 2.028036463802713
best_error: 2.0280364635080943
best_error: 2.0280364623953573
best_error: 2.020148414229654
best_error: 2.0201483601489256
best_error: 2.012002729734171
best_error: 2.0120027209584297
best_error: 2.011846867159416
best_error: 2.0118468667339426
best_error: 2.011846866323594
best_error: 2.0117539767278596
best_error: 2.011753975894836
best_error: 2.011666359713493
best_error: 2.0116663593264583
best_error: 2.0116663590056096
best_error: 2.01160563777789
best_error: 2.0116056366436195
best_error: 2.0115355695367616
best_error: 2.011535568976327
best_error: 2.0112982190876814
best_error: 2.011298217450235
best_error: 2.0096054685215052
best_error: 2.009605456657199
best_error: 2.000823569661361
best_error: 2.0008235546134405
best_error: 2.0004776871173795
best_error: 2.000477686016202
best_error: 2.000454982102756
best_error: 2.000454982050225
best_error: 2.0004549819938546
best_error: 2.000454981975291
best_error: 2.000454981526434
best_error: 1.9945943015375658
best_error: 1.9945943014876946
best_error: 1.9945943013593483
best_error: 1.9945943009985214
best_error: 1.9918679725458974
best_error: 1.9918679724781114
best_error: 1.991867972422642
best_error: 1.9918679720716739
best_error: 1.9861951559939848
best_error: 1.9861950690912653
best_error: 1.984170790085093
best_error: 1.9841707361981167
best_error: 1.9820735481478806
best_error: 1.9820735427222538
best_error: 1.9819906322773153
best_error: 1.9819906263814766
best_error: 1.9819149069109998
best_error: 1.9819148995297242
best_error: 1.9817351703604158
best_error: 1.98173516391975
best_error: 1.9807955070649212
best_error: 1.980795505668587
best_error: 1.977547444806122
best_error: 1.97754743904159
best_error: 1.9761482191890638
best_error: 1.976148219054846
best_error: 1.9761482189444113
best_error: 1.976148218596367
best_error: 1.9761482179594985
best_error: 1.9745978933393684
best_error: 1.974597893269663
best_error: 1.974597893213395
best_error: 1.9745978927923735
best_error: 1.9745978925750538
best_error: 1.9735986250212998
best_error: 1.973598622689314
best_error: 1.9735344381543651
best_error: 1.9735344366588257
best_error: 1.9734538468356353
best_error: 1.973453843074801
best_error: 1.9734281007822032
best_error: 1.9734280961208288
best_error: 1.973371049373455
best_error: 1.9733710466238525
best_error: 1.9733319657617423
best_error: 1.9733319649739625
best_error: 1.9732565276338025
best_error: 1.973256526426665
best_error: 1.9732438894318007
best_error: 1.9732438886527695
best_error: 1.973206764433618
best_error: 1.9732067644098013
best_error: 1.9732067643096818
best_error: 1.9731401854985113
best_error: 1.9731401825223336
best_error: 1.9730916005625465
best_error: 1.9730915968456244
best_error: 1.9730643601073354
best_error: 1.9730643570074955
best_error: 1.9730341187632359
best_error: 1.9730341182878155
best_error: 1.9730314681330279
best_error: 1.9730314680363363
best_error: 1.9730307790917798
best_error: 1.973030778418087
best_error: 1.9730305680747784
best_error: 1.9730305672904853
best_error: 1.9730281527723321
best_error: 1.973028151728346
best_error: 1.973020068159004
best_error: 1.9730200677190217
best_error: 1.9729906200177487
best_error: 1.9729906198986986
best_error: 1.9729906197582787
best_error: 1.9729333731855083
best_error: 1.9729333689901396
best_error: 1.9728534156713657
best_error: 1.97285341179757
best_error: 1.97259823870839
best_error: 1.972598238345985
best_error: 1.9725982343527781
best_error: 1.9722309282733232
best_error: 1.9722309116096175
best_error: 1.9717494358266385
best_error: 1.9717494320159221
best_error: 1.9717231136433375
best_error: 1.9717231076513755
best_error: 1.9717230508430532
best_error: 1.97172304491396
best_error: 1.9716912933078483
best_error: 1.9716912928740937
best_error: 1.971691257853136
best_error: 1.9716912576967578
best_error: 1.9716911837974525
best_error: 1.9716911837107016
best_error: 1.9716911836606146
best_error: 1.9716911836604991
best_error: 1.9716911653254525
best_error: 1.9716911652388698
best_error: 1.9716911651885807
best_error: 1.9716911651884939
best_error: 1.9716911643470114
best_error: 1.9716911643386061
best_error: 1.9716911642118753
best_error: 1.9716911591566098
best_error: 1.9716911590700834
best_error: 1.9716911590197257
best_error: 1.97169115901965
best_error: 1.9716911584899321
best_error: 1.9716911584722836
best_error: 1.9716911583530299
best_error: 1.9716911583526133
best_error: 1.9716064810858762
best_error: 1.9716064810729261
best_error: 1.971606481045147
best_error: 1.971606481003024
best_error: 1.9715919828758037
best_error: 1.9715919815460206
best_error: 1.971587992642053
best_error: 1.9715879924970476
best_error: 1.9715879921180133
best_error: 1.971587268237484
best_error: 1.9715872670520593
best_error: 1.971585740206093
best_error: 1.9715857398114198
best_error: 1.971585429399733
best_error: 1.9715854288764851
best_error: 1.9715847000099895
best_error: 1.9715846994772823
best_error: 1.9715773107997216
best_error: 1.9715773102255394
best_error: 1.9715607500786723
best_error: 1.9715607454959476
best_error: 1.9715562669773916
best_error: 1.9715562638905504
best_error: 1.971527287005155
best_error: 1.9715272845675358
best_error: 1.9715039421179696
best_error: 1.9715039372691756
best_error: 1.9714597468336006
best_error: 1.9714597446154698
best_error: 1.9714476917612034
best_error: 1.971447691662655
best_error: 1.971421021326609
best_error: 1.97142102119289
best_error: 1.9714091610132254
best_error: 1.971409159290688
best_error: 1.9713855880311884
best_error: 1.9713855842706423
