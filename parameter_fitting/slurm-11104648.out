ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 82
days_switch 80
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 104.70037639689019
best_error: 104.70037627313256
best_error: 104.70037623771958
best_error: 17.36863836534427
best_error: 17.368638365337294
best_error: 17.368638352880247
best_error: 17.349354765659573
best_error: 17.349354752686313
best_error: 17.263786534372265
best_error: 17.263786519022506
best_error: 16.67883094671904
best_error: 16.678830908894728
best_error: 16.59634445131704
best_error: 16.59634440964791
best_error: 16.502590744815976
best_error: 16.502590698540892
best_error: 12.973375746472623
best_error: 12.973375736072327
best_error: 12.97337572736326
best_error: 12.973375724299775
best_error: 12.783808213496696
best_error: 12.783808203384739
best_error: 12.78380818261741
best_error: 12.67994474840232
best_error: 12.679944734632707
best_error: 12.67994471584322
best_error: 12.23621255210983
best_error: 12.236212523131485
best_error: 12.06707365924893
best_error: 12.067073638480265
best_error: 11.979613761380623
best_error: 11.979613751683543
best_error: 11.979613742303592
best_error: 11.65021314281348
best_error: 11.650213111984021
best_error: 10.919132797634447
best_error: 10.919132782053422
best_error: 10.654603078327266
best_error: 10.654602941960011
best_error: 10.376454487378394
best_error: 10.376454476008476
best_error: 10.309725639278616
best_error: 10.309725631784348
best_error: 10.309725631781832
best_error: 10.309725630639035
best_error: 10.281676373106391
best_error: 10.281676368025892
best_error: 10.281676365599843
best_error: 10.28167636469022
best_error: 10.265315877529112
best_error: 10.265315873748815
best_error: 10.265315868704793
best_error: 10.263197373273776
best_error: 10.263197136363091
best_error: 10.262023149863754
best_error: 10.262023146172321
best_error: 10.262023141047017
best_error: 10.259947997528883
best_error: 10.259947994476605
best_error: 10.259947988026822
best_error: 10.259615475063557
best_error: 10.259615472556083
best_error: 10.259615465648766
best_error: 10.259502935271438
best_error: 10.259502932764455
best_error: 10.259502925859174
best_error: 10.259474135585952
best_error: 10.259474133114491
best_error: 10.259474126181788
best_error: 10.259463476594673
best_error: 10.25946347412326
best_error: 10.259463467190749
best_error: 10.25945883555391
best_error: 10.259458833082517
best_error: 10.259458826150087
best_error: 10.259453868962662
best_error: 10.259453866491292
best_error: 10.25945385955892
best_error: 10.259453418861796
best_error: 10.259453416390429
best_error: 10.259453409458063
best_error: 10.259453228647347
best_error: 10.259453226175978
best_error: 10.259453219243614
best_error: 10.259453142456838
best_error: 10.259453142456731
best_error: 10.259453133053107
best_error: 10.25097088551641
best_error: 10.25097088474111
best_error: 10.250970873616401
best_error: 10.246955103832711
best_error: 10.24695482169306
best_error: 10.174515377146559
best_error: 10.174515375788383
best_error: 10.174515366564762
best_error: 10.020701803190015
best_error: 10.020701794532254
best_error: 9.97957245655476
best_error: 9.979572431213093
best_error: 9.896085310072973
best_error: 9.896085290459053
best_error: 9.711376316924959
best_error: 9.711376297936255
best_error: 9.706175362568962
best_error: 9.706175298549823
best_error: 9.702079917295725
best_error: 9.702079898504074
best_error: 9.695513353122323
best_error: 9.69551333198108
best_error: 9.691716137148829
best_error: 9.691716073994073
best_error: 9.659576138922123
best_error: 9.659576123884841
best_error: 9.61915566895679
best_error: 9.619155615070506
best_error: 9.520379735381315
best_error: 9.520379685023123
best_error: 9.135799840554963
best_error: 9.135799743410274
best_error: 9.04088743969037
best_error: 9.040887188770824
best_error: 9.038329457627608
best_error: 9.038329206763546
best_error: 9.028704527829012
best_error: 9.028704301448666
best_error: 9.000122158892983
best_error: 9.000122049148947
best_error: 8.997590608453505
best_error: 8.997590521700408
best_error: 8.996445653244844
best_error: 8.996445568441722
best_error: 8.995766459397277
best_error: 8.995766374964699
best_error: 8.995366520501356
best_error: 8.995366436041682
best_error: 8.9950813335359
best_error: 8.995081249056891
best_error: 8.99494179199866
best_error: 8.994941708030124
best_error: 8.994860815993206
best_error: 8.99486073201922
best_error: 8.994799250368894
best_error: 8.99479916639076
best_error: 8.994771655022909
best_error: 8.994771571042918
best_error: 8.99475665217634
best_error: 8.994756568195326
best_error: 8.994756389303081
best_error: 8.994756305322044
best_error: 8.994756299698457
best_error: 8.994756215717416
best_error: 8.994756204988324
best_error: 8.994756202960422
best_error: 8.994756202040424
best_error: 8.994756186150882
best_error: 8.99475618412298
best_error: 8.994756182902092
best_error: 8.994756170702708
best_error: 8.994756170609492
best_error: 8.994756170022725
