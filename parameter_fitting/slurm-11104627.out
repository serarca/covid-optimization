ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 80
days_switch 90
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 107.8570338153638
best_error: 107.85703366029786
best_error: 107.85703365079243
best_error: 18.10493596497637
best_error: 18.104935964970856
best_error: 18.10493595505907
best_error: 18.096366504709877
best_error: 18.096366494563867
best_error: 18.060022310858272
best_error: 18.06002229970746
best_error: 17.870310532594942
best_error: 17.87031051528308
best_error: 13.828729756711605
best_error: 13.828729640966657
best_error: 13.618982242675802
best_error: 13.618982150272288
best_error: 13.509866153999614
best_error: 13.509866099472985
best_error: 13.485293861533975
best_error: 13.485293822887023
best_error: 13.473308598701346
best_error: 13.473308568180004
best_error: 13.467693400361105
best_error: 13.467693373759051
best_error: 13.467693370518218
best_error: 13.446900068522563
best_error: 13.44690003900314
best_error: 13.430086519395532
best_error: 13.430086469723161
best_error: 13.292297929329068
best_error: 13.292297882438849
best_error: 12.84191896320537
best_error: 12.841918917916846
best_error: 12.573361921728353
best_error: 12.573361904857924
best_error: 12.487002679892939
best_error: 12.487002678932022
best_error: 12.487002677826887
best_error: 12.48700266436549
best_error: 12.316090529539284
best_error: 12.316090496582541
best_error: 11.667656561987096
best_error: 11.667656549159133
best_error: 11.555669075383218
best_error: 11.55566897404443
best_error: 11.439042610117323
best_error: 11.439042600627566
best_error: 11.396315634670515
best_error: 11.396315627353445
best_error: 11.396315625941211
best_error: 11.384310048535934
best_error: 11.384310042086717
best_error: 11.384310039134208
best_error: 11.383346795289798
best_error: 11.383346789445753
best_error: 11.383346785898084
best_error: 11.377497415269461
best_error: 11.377497411163265
best_error: 11.377497406144853
best_error: 11.369712355294865
best_error: 11.369712122594793
best_error: 11.353982685598947
best_error: 11.353982678550977
best_error: 11.353982677734956
best_error: 11.333670940849013
best_error: 11.333670932282399
best_error: 11.300375247191226
best_error: 11.300375122586951
best_error: 11.288127236204591
best_error: 11.288127097985756
best_error: 11.253864368664395
best_error: 11.253864361023396
best_error: 11.15624669633634
best_error: 11.156246691908269
best_error: 11.156246691885979
best_error: 11.156246690369441
best_error: 11.156246689293535
best_error: 10.933966194862428
best_error: 10.933966178364205
best_error: 10.880443512539156
best_error: 10.880443445361044
best_error: 10.880443444626602
best_error: 10.878677647521432
best_error: 10.878677626353426
best_error: 10.827848611860885
best_error: 10.827848596243381
best_error: 10.823763559530772
best_error: 10.823763540445839
best_error: 10.816845996947796
best_error: 10.816845978688901
best_error: 10.775186491690118
best_error: 10.775186471988516
best_error: 10.741515616264552
best_error: 10.741515488086957
best_error: 10.550085211724694
best_error: 10.550085145417867
best_error: 10.550085139008162
best_error: 10.407738055311965
best_error: 10.407737991178735
best_error: 10.40773798242461
best_error: 10.093546714279794
best_error: 10.093546654723882
best_error: 10.093546650286342
best_error: 9.985403456859629
best_error: 9.985403395793956
best_error: 9.985403391496815
best_error: 9.947893356734713
best_error: 9.947893301899473
best_error: 9.947893301596556
best_error: 9.918810261432164
best_error: 9.918810223054834
best_error: 9.903522844543474
best_error: 9.903522811354526
best_error: 9.84300379973909
best_error: 9.843003292399878
best_error: 9.828084918361315
best_error: 9.828084864487055
best_error: 9.826472177452803
best_error: 9.826472136369294
best_error: 9.826472135877058
best_error: 9.825950424548678
best_error: 9.825950382619453
best_error: 9.82595038140878
best_error: 9.824269103705275
best_error: 9.824269069193846
best_error: 9.824011194166047
best_error: 9.824011160408137
best_error: 9.82375396228548
best_error: 9.823753928545763
best_error: 9.823495563145785
best_error: 9.82349552982021
best_error: 9.823349206483186
best_error: 9.823349178913437
best_error: 9.823300227710433
best_error: 9.82330020013863
best_error: 9.823266215565553
best_error: 9.823266187992322
best_error: 9.823245304576357
best_error: 9.823245277002254
best_error: 9.823231216473488
best_error: 9.823231188898793
best_error: 9.823222091575618
best_error: 9.82322206400054
best_error: 9.823216255854364
best_error: 9.82321622827904
best_error: 9.823212154503837
best_error: 9.823212126928343
best_error: 9.82320976284267
best_error: 9.823209735267076
best_error: 9.82320790415493
best_error: 9.823207876579259
best_error: 9.823206425385287
best_error: 9.823206397809551
best_error: 9.82320573612469
best_error: 9.823205708548926
best_error: 9.823205167041802
best_error: 9.823205167040909
best_error: 9.823205154049113
best_error: 9.823205145135617
best_error: 9.823205136751769
