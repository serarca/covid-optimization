ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.887928773421752
best_error: 10.887928746818652
best_error: 10.887928726845015
best_error: 10.415858419372853
best_error: 10.415858377728913
best_error: 10.415858354230274
best_error: 8.941440115409701
best_error: 8.941440030316718
best_error: 8.865523806176462
best_error: 8.865523718504095
best_error: 7.983906431707048
best_error: 7.983906303901
best_error: 7.582461902667756
best_error: 7.582461791688743
best_error: 7.5456158641101325
best_error: 7.545615786836192
best_error: 7.350254733277112
best_error: 7.35025468178928
best_error: 7.3502546705678125
best_error: 6.046488121540401
best_error: 6.046488082162278
best_error: 6.046488054540715
best_error: 5.833115235019683
best_error: 5.833115192264291
best_error: 5.833115165757752
best_error: 4.372733968163413
best_error: 4.372733916495535
best_error: 3.656308414378776
best_error: 3.656307897577274
best_error: 3.4494806605969375
best_error: 3.4494802303807637
best_error: 3.228803641833313
best_error: 3.2288036211679643
best_error: 3.215424158877806
best_error: 3.2154238358276457
best_error: 3.119388341355381
best_error: 3.1193880247919648
best_error: 2.9328182715807305
best_error: 2.932817954661605
best_error: 2.8297364109941627
best_error: 2.8297359893617076
best_error: 2.6900734085791944
best_error: 2.6900729182958925
best_error: 2.672883063470384
best_error: 2.672882568541709
best_error: 2.655542229041337
best_error: 2.6555417290435823
best_error: 2.6460846314373025
best_error: 2.646084128974966
best_error: 2.6371026013899708
best_error: 2.637102095869584
best_error: 2.6333970805818474
best_error: 2.633396574132386
best_error: 2.631018375162065
best_error: 2.6310178681206704
best_error: 2.6294881420345275
best_error: 2.6294876346139326
best_error: 2.6285483945322783
best_error: 2.6285478863104057
best_error: 2.6277621995734126
best_error: 2.6277616911605683
best_error: 2.627134765296234
best_error: 2.6271342567312264
best_error: 2.627027944553186
best_error: 2.627027435962278
best_error: 2.6269839317345394
best_error: 2.626983423132954
best_error: 2.6269688754667913
best_error: 2.626968366861565
best_error: 2.6269652911178314
best_error: 2.6269647825117506
best_error: 2.6269632886793595
best_error: 2.626962780072785
best_error: 2.626961954947788
best_error: 2.6269614463409043
best_error: 2.62696138477677
best_error: 2.626960876169739
best_error: 2.6269602998815262
best_error: 2.626959791274253
best_error: 2.588109397126678
best_error: 2.5881093970518068
best_error: 2.5881093950932117
best_error: 2.5308026882142682
best_error: 2.5308021681972956
best_error: 2.489438460315675
best_error: 2.4894379327560374
best_error: 2.419419037231148
best_error: 2.4194185208388586
best_error: 2.3451286107252525
best_error: 2.345128610644652
best_error: 2.345128498507508
best_error: 2.225953280548277
best_error: 2.2259528854397437
best_error: 2.2056693799869356
best_error: 2.2056690162987973
best_error: 2.2056312618033065
best_error: 2.2056308981103676
best_error: 2.205609360368734
best_error: 2.205608996673061
best_error: 2.205596828308034
best_error: 2.2055964646107746
best_error: 2.2055896964474355
best_error: 2.205589332749284
best_error: 2.2055856669548923
best_error: 2.2055853032562425
best_error: 2.205583411807498
best_error: 2.205583048108565
best_error: 2.2055820062965745
best_error: 2.2055820062139713
best_error: 2.2055818981852027
best_error: 2.2055818536458984
best_error: 2.205581820002648
best_error: 2.2055817626288468
best_error: 2.201853857847338
best_error: 2.2018534829169925
best_error: 2.2001464003578053
best_error: 2.200146017587074
best_error: 2.1998085846722066
best_error: 2.1998082018598586
best_error: 2.1997353169913803
best_error: 2.1997349341699977
best_error: 2.1997100188368712
best_error: 2.1997096360123702
best_error: 2.1996936251179395
best_error: 2.199693242291416
best_error: 2.1996876772482494
best_error: 2.1996876771665677
best_error: 2.1996875684138857
best_error: 2.19968727913966
best_error: 2.199475034447542
best_error: 2.199474648806299
best_error: 2.183983135455798
best_error: 2.18398313537343
best_error: 2.1839830266397464
best_error: 2.1536153483332745
best_error: 2.1536149739471355
best_error: 2.147369044838962
best_error: 2.1473686733543573
best_error: 2.1397965067622646
best_error: 2.1397965066703897
best_error: 2.13979639952088
best_error: 2.1381720841039797
best_error: 2.1381720840120915
best_error: 2.138171976959174
best_error: 2.1381290275536657
best_error: 2.1381286549839453
best_error: 2.1379985703371216
best_error: 2.137998570245225
best_error: 2.1379984632027225
best_error: 2.1379983144209187
best_error: 2.137997941821961
best_error: 2.137957406040714
best_error: 2.1379574059488817
best_error: 2.137957298909129
best_error: 2.1379540934064973
best_error: 2.137953996412943
best_error: 2.1379539083278836
best_error: 2.1379537782864135
best_error: 2.1379537584191306
