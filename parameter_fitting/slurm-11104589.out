ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 78
days_switch 45
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 100.9009390860021
best_error: 100.90093900527641
best_error: 100.90093891510874
best_error: 18.806857709089755
best_error: 18.80685770908606
best_error: 18.80685770141347
best_error: 18.789657226566163
best_error: 18.789657226562234
best_error: 18.789657218296398
best_error: 18.704719293920377
best_error: 18.704719293913012
best_error: 18.704719282151636
best_error: 16.58751429747825
best_error: 16.58751429375862
best_error: 16.587514065062
best_error: 14.112104236201453
best_error: 14.112104230085293
best_error: 14.112104051578498
best_error: 13.728365356172876
best_error: 13.728365349965793
best_error: 13.728365241135904
best_error: 13.628419251092101
best_error: 13.62841924631836
best_error: 13.628419241199861
best_error: 13.628419004221483
best_error: 13.621322435922096
best_error: 13.621322416491223
best_error: 12.846380783929877
best_error: 12.846380771958474
best_error: 12.846380759022669
best_error: 12.563185330880398
best_error: 12.563185311845308
best_error: 12.563185310019843
best_error: 12.064358089789607
best_error: 12.064358074223925
best_error: 12.06435806831582
best_error: 11.909893941039241
best_error: 11.9098939012756
best_error: 11.793820295792848
best_error: 11.793820290008286
best_error: 11.793820273775868
best_error: 11.5480658436934
best_error: 11.548065806437458
best_error: 11.088693685565575
best_error: 11.088693618142955
best_error: 10.930744672274628
best_error: 10.930744658194197
best_error: 10.930744654223282
best_error: 10.922157144132791
best_error: 10.92215702033742
best_error: 10.848213514818987
best_error: 10.848213507089849
best_error: 10.848213499567521
best_error: 10.846844817439175
best_error: 10.846844810275265
best_error: 10.846844802236829
best_error: 10.84652070256436
best_error: 10.846520695404642
best_error: 10.84652068736553
best_error: 10.846503039381824
best_error: 10.846502825232548
best_error: 10.842459480355036
best_error: 10.842459473660352
best_error: 10.842459473583219
best_error: 10.842459473013008
best_error: 10.842459465313716
best_error: 10.82707546030299
best_error: 10.827075456502085
best_error: 10.827075444825285
best_error: 10.827075434883618
best_error: 10.801602461943109
best_error: 10.80160245856037
best_error: 10.801602437623327
best_error: 10.801602430861285
best_error: 10.718049393147787
best_error: 10.718049386763182
best_error: 10.718049380382299
best_error: 10.718049364555755
best_error: 10.668813379972118
best_error: 10.668813373171568
best_error: 10.668813358954331
best_error: 10.668813346103892
best_error: 10.483669963904529
best_error: 10.483669962316828
best_error: 10.483669875190142
best_error: 10.421314417646308
best_error: 10.421314271163991
best_error: 10.412576958728804
best_error: 10.412576939836816
best_error: 10.404522573681666
best_error: 10.404522555467576
best_error: 10.403335235398378
best_error: 10.403335217253135
best_error: 10.40313087483982
best_error: 10.403130856709334
best_error: 10.403032536272912
best_error: 10.40303253467295
best_error: 10.40303244484526
best_error: 10.349157393183123
best_error: 10.349157298939259
best_error: 10.338195629544844
best_error: 10.338195606483481
best_error: 10.324227935350233
best_error: 10.324227910976811
best_error: 10.296907898932666
best_error: 10.29690786196505
best_error: 10.162622348218274
best_error: 10.162622324673032
best_error: 10.135705145427414
best_error: 10.135705123834605
best_error: 10.099484226062982
best_error: 10.099484206085005
best_error: 10.085410939880504
best_error: 10.085410920827616
best_error: 10.066655369625805
best_error: 10.06665526648523
best_error: 10.06278729242781
best_error: 10.06278727380507
best_error: 10.050758633899731
best_error: 10.05075861646104
best_error: 10.048568117532515
best_error: 10.048568001262673
best_error: 10.046914586294372
best_error: 10.04691456944024
best_error: 10.045333348068917
best_error: 10.045333231378699
best_error: 10.045216983710755
best_error: 10.045216967449267
best_error: 10.044921980021051
best_error: 10.044921862308
best_error: 10.044903075100052
best_error: 10.044903058907993
best_error: 10.043939608246184
best_error: 10.04393959174032
best_error: 10.04048377470663
best_error: 10.040483759386067
best_error: 10.039507847113859
best_error: 10.039507832162943
best_error: 10.03904396514274
best_error: 10.039043950885373
best_error: 10.037883142119076
best_error: 10.03788312784729
best_error: 10.034211737893656
best_error: 10.034211723028863
best_error: 10.020738677191638
best_error: 10.020738661140408
best_error: 10.013392233021566
best_error: 10.013392214144643
best_error: 10.004975650425886
best_error: 10.004975633742022
best_error: 9.973878140088775
best_error: 9.973878138499595
best_error: 9.97387813716075
best_error: 9.938759545537206
best_error: 9.938759543810113
best_error: 9.93875954236132
best_error: 9.913600983084848
best_error: 9.913600981714573
best_error: 9.913600979449487
best_error: 9.876535635973891
best_error: 9.87653563597389
best_error: 9.876535631793354
best_error: 9.86840446248098
best_error: 9.868404458335325
best_error: 9.866397157197847
best_error: 9.866397153760149
best_error: 9.865990310581964
best_error: 9.865990296457557
best_error: 9.865990128569324
