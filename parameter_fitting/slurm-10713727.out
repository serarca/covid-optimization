ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 13.206795089894612
best_error: 13.206795068394683
best_error: 13.206795059108149
best_error: 13.15371006436255
best_error: 13.153710039186198
best_error: 13.153710029513222
best_error: 12.318408169573843
best_error: 12.318408072623212
best_error: 12.318408066746763
best_error: 10.678433484495821
best_error: 10.678433223495695
best_error: 8.610652499616872
best_error: 8.61065207544981
best_error: 7.386279875695939
best_error: 7.3862794759100865
best_error: 7.1389504048329355
best_error: 7.138950142158286
best_error: 7.136038984414405
best_error: 7.136038725349414
best_error: 6.55407997311654
best_error: 6.554079762652428
best_error: 6.153399604859564
best_error: 6.153399270728261
best_error: 6.138428883706656
best_error: 6.138428666176407
best_error: 6.134113415258931
best_error: 6.134113197238958
best_error: 6.131271931582406
best_error: 6.13127171324013
best_error: 6.13010862530567
best_error: 6.1301084068314795
best_error: 6.130000774210057
best_error: 6.130000555723624
best_error: 6.129983064390657
best_error: 6.129982845902224
best_error: 6.129972476824256
best_error: 6.129972258334629
best_error: 6.1299679278168036
best_error: 6.1299677093266585
best_error: 6.129965832797938
best_error: 6.1299654993489625
best_error: 5.343314460504556
best_error: 5.343314141122495
best_error: 5.2220800304346415
best_error: 5.222079625061948
best_error: 5.220353488827863
best_error: 5.22035308072031
best_error: 5.192583926429264
best_error: 5.192583506632909
best_error: 5.066315662320886
best_error: 5.066315127700822
best_error: 4.946546708940172
best_error: 4.946546120845163
best_error: 4.774867362682041
best_error: 4.774866754615431
best_error: 4.6874047646553985
best_error: 4.68740455806053
best_error: 4.676636819489036
best_error: 4.676636206207281
best_error: 4.673132196103625
best_error: 4.673131995078199
best_error: 4.672948926146573
best_error: 4.672948312434714
best_error: 4.67291569072446
best_error: 4.6729154897083145
best_error: 4.67291326174098
best_error: 4.672913086064403
best_error: 4.672913045123881
best_error: 4.672262143309361
best_error: 4.67226193754167
best_error: 4.668526552950831
best_error: 4.6685263389831615
best_error: 4.656757049344541
best_error: 4.656756484345937
best_error: 4.653605074939374
best_error: 4.65360453928022
best_error: 4.631135651507446
best_error: 4.631135406810656
best_error: 4.624498542538326
best_error: 4.624498287213867
best_error: 4.616920830678101
best_error: 4.61692027791147
best_error: 4.604482730368401
best_error: 4.604482483308345
best_error: 4.5989023265063596
best_error: 4.598902068822035
best_error: 4.591952046358159
best_error: 4.591951789851498
best_error: 4.56870420736049
best_error: 4.568703961008806
best_error: 4.564837264501234
best_error: 4.564836678081235
best_error: 4.52517597127172
best_error: 4.525175740765904
best_error: 4.520904179284854
best_error: 4.520903578601334
best_error: 4.51642126603199
best_error: 4.516421034564564
best_error: 4.507333624195996
best_error: 4.5073330140821275
best_error: 4.489041619107967
best_error: 4.489041405429055
best_error: 4.472057520388995
best_error: 4.472057336250803
best_error: 4.4459795459674165
best_error: 4.445978880705763
best_error: 4.402392259375682
best_error: 4.402391602154324
best_error: 4.39703550343588
best_error: 4.3970352996007716
best_error: 4.374675225690311
best_error: 4.374674570024412
best_error: 4.301632669857057
best_error: 4.301632438947715
best_error: 4.299127780476385
best_error: 4.299127195723223
best_error: 4.235454515004678
best_error: 4.235453975749228
best_error: 4.17467097736744
best_error: 4.174670491103338
best_error: 4.114069880825991
best_error: 4.114069645099294
best_error: 4.057610533879522
best_error: 4.057610101835464
best_error: 4.009474788368109
best_error: 4.0094742814156685
best_error: 4.007653271305926
best_error: 4.007653090514633
best_error: 3.9208433571230588
best_error: 3.920843178675544
best_error: 3.8024429433058877
best_error: 3.802442458881167
best_error: 3.7686118622542697
best_error: 3.7686117290394856
best_error: 3.768611695405806
best_error: 3.665814306481994
best_error: 3.665813831049686
best_error: 3.574942471999284
best_error: 3.574942360491841
best_error: 3.574942307747043
best_error: 3.469696183073745
best_error: 3.469695661833504
best_error: 3.4419260407555488
best_error: 3.441926005537102
best_error: 3.4419258718941395
best_error: 3.425634355118122
best_error: 3.425633827027761
best_error: 3.4256019424301414
best_error: 3.425601907375266
best_error: 3.4256017743201155
best_error: 3.425543842697115
best_error: 3.4255433145955227
best_error: 3.4254873737284526
best_error: 3.4254868456198624
best_error: 3.4254745203095287
best_error: 3.4254739921993496
best_error: 3.4254723893279486
best_error: 3.4254723542751058
best_error: 3.4254722212216016
best_error: 3.4254722144775824
best_error: 3.425472170856672
