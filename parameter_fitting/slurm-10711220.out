ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.905349522733133
best_error: 11.905349434915427
best_error: 11.521125982967584
best_error: 11.521125979554881
best_error: 11.521125962665337
best_error: 11.260975687434595
best_error: 11.26097568272122
best_error: 11.260975676304037
best_error: 9.747823102725654
best_error: 9.747823089230117
best_error: 9.691440807172665
best_error: 9.691440792306498
best_error: 6.083819241861299
best_error: 6.08381918773749
best_error: 6.083819104931086
best_error: 6.072406000558219
best_error: 6.072405955005575
best_error: 6.072405864031165
best_error: 6.065061458128943
best_error: 6.065061415931332
best_error: 6.065061321102302
best_error: 6.061198653742556
best_error: 6.061198610769262
best_error: 6.0611985158183534
best_error: 6.057400819062673
best_error: 6.05740078020936
best_error: 6.057400681439249
best_error: 6.055391442949524
best_error: 6.055391403690524
best_error: 6.055391304808764
best_error: 6.053392797364069
best_error: 6.053392757714505
best_error: 6.053392658713864
best_error: 5.9702406263384376
best_error: 5.9702405982086795
best_error: 5.970240488232324
best_error: 5.926579667354503
best_error: 5.926579637011948
best_error: 5.926579526601701
best_error: 5.923447335940244
best_error: 5.923447305382016
best_error: 5.923447194982686
best_error: 5.920964859573487
best_error: 5.920964829773961
best_error: 5.920964718669058
best_error: 5.917737215976498
best_error: 5.91773718595746
best_error: 5.917737074860611
best_error: 5.915908480283475
best_error: 5.915908450140777
best_error: 5.915908339047943
best_error: 5.910331282239988
best_error: 5.91033125176653
best_error: 5.910331141067399
best_error: 5.907249356635631
best_error: 5.907249325979576
best_error: 5.907249215364894
best_error: 5.905538621777699
best_error: 5.90553859102034
best_error: 5.905538480452564
best_error: 5.9044810362085505
best_error: 5.904481005388591
best_error: 5.904480894849787
best_error: 5.903938595022497
best_error: 5.9039385641704465
best_error: 5.903938453646525
best_error: 5.903570096123564
best_error: 5.903570066180093
best_error: 5.903569954954052
best_error: 5.903397642959538
best_error: 5.9033976130058825
best_error: 5.903397501784521
best_error: 5.903269369355123
best_error: 5.903269339393875
best_error: 5.903269228176016
best_error: 5.9032378043034885
best_error: 5.903237774340369
best_error: 5.903237663123462
best_error: 5.903216544422506
best_error: 5.903216514458126
best_error: 5.903216403241869
best_error: 5.903207583942976
best_error: 5.903207553978068
best_error: 5.903207442762107
best_error: 5.903206078386079
best_error: 5.903206048421076
best_error: 5.9032059372051195
best_error: 5.90320490607156
best_error: 5.903204789551595
best_error: 5.9032046483705995
best_error: 5.903204615255389
best_error: 5.3123142679036395
best_error: 5.312314205382403
best_error: 5.312314136309972
best_error: 5.212681523526633
best_error: 5.212681456455564
best_error: 5.2126813901782985
best_error: 5.049616536246267
best_error: 5.04961645610538
best_error: 5.049616398737959
best_error: 4.995175553309612
best_error: 4.995175467517779
best_error: 4.995175414111898
best_error: 4.99397883093784
best_error: 4.9844540197010145
best_error: 4.984453932798218
best_error: 4.984453880170356
best_error: 4.982266899291481
best_error: 4.9817771528478625
best_error: 4.981777065667799
best_error: 4.981777013234111
best_error: 4.980137270873352
best_error: 4.980137183523448
best_error: 4.980137131208666
best_error: 4.979963514865461
best_error: 4.979909675050919
best_error: 4.979909587677448
best_error: 4.979909535379159
best_error: 4.979898026958139
best_error: 4.979897939583481
best_error: 4.979897887286052
best_error: 4.979897830683153
best_error: 4.979896852681579
best_error: 4.97989671300944
best_error: 4.979896616149512
best_error: 4.979896588133836
best_error: 4.979895359377732
best_error: 4.979895272002935
best_error: 4.979895219705664
best_error: 4.9798943347460085
best_error: 4.979894247371195
best_error: 4.979894195073957
best_error: 4.979890236222062
best_error: 4.979890148847129
best_error: 4.9798900965501325
best_error: 4.97987384217293
best_error: 4.979873754797582
best_error: 4.979873702501475
best_error: 4.979808266723081
best_error: 4.9798081793460405
best_error: 4.9798081270534915
best_error: 4.979545976865246
best_error: 4.979545889481447
best_error: 4.979545837203158
best_error: 4.978497008233415
best_error: 4.978496920822612
best_error: 4.978496868601335
best_error: 4.974304169418854
best_error: 4.974304081900636
best_error: 4.974304029907053
best_error: 4.9576458223225774
best_error: 4.957645734384175
best_error: 4.9576456837759295
best_error: 4.8933809179332
best_error: 4.8933808284468805
best_error: 4.89338078378047
best_error: 4.8557319897759506
best_error: 4.855731899426816
best_error: 4.8557318586229545
best_error: 4.837140186371171
best_error: 4.837140095602807
best_error: 4.837140056072376
best_error: 4.769084400114595
best_error: 4.769084306713718
best_error: 4.769084279188154
best_error: 4.433354455302262
best_error: 4.433354303450111
best_error: 4.432195551680895
best_error: 4.432195387297192
