ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 8.396324135671257
best_error: 8.396324100147893
best_error: 7.841392053180352
best_error: 7.841391967844762
best_error: 3.67122268025262
best_error: 3.6712226768552982
best_error: 3.658210814702354
best_error: 3.658210811273212
best_error: 3.6578160826088415
best_error: 3.6578160493184635
best_error: 3.657397465693007
best_error: 3.657397462257528
best_error: 3.6568603468524707
best_error: 3.6568603155712593
best_error: 3.6562281766841656
best_error: 3.6562281458530244
best_error: 3.6561050797199606
best_error: 3.6561050489986835
best_error: 3.65605194998921
best_error: 3.656051919253355
best_error: 3.6560223342082425
best_error: 3.6560223342082416
best_error: 3.6560223307535815
best_error: 3.6560212411124793
best_error: 3.6560212103683227
best_error: 3.655855385656828
best_error: 3.655855354903301
best_error: 3.655200226050441
best_error: 3.6552002225871036
best_error: 3.6526130857373564
best_error: 3.6526130822408183
best_error: 3.6426260954718925
best_error: 3.642626091853581
best_error: 3.607650344634274
best_error: 3.607650340427638
best_error: 3.519423052679559
best_error: 3.5194230454618585
best_error: 3.39251318959048
best_error: 3.3925131895904714
best_error: 3.391486665612824
best_error: 3.3914866656128155
best_error: 3.391261506407704
best_error: 3.3912615064077003
best_error: 3.391179069660469
best_error: 3.3911790696604576
best_error: 3.3909042486763186
best_error: 3.3909042486763115
best_error: 3.390361154184128
best_error: 3.390361154184114
best_error: 3.3899537913569233
best_error: 3.3899537913569118
best_error: 3.3897671222548054
best_error: 3.3897671222547943
best_error: 3.3897367657186424
best_error: 3.3897367657186295
best_error: 3.358107384309709
best_error: 3.3581073843096965
best_error: 3.3479287470791625
best_error: 3.3479286925754352
best_error: 3.341389398996172
best_error: 3.3413893989961685
best_error: 3.3413893963733825
best_error: 3.3385674686665103
best_error: 3.338567468666505
best_error: 3.3385674662598626
best_error: 3.3376747485674576
best_error: 3.337674748567455
best_error: 3.337674746290358
best_error: 3.337552123951171
best_error: 3.337552123951165
best_error: 3.3375521217546504
best_error: 3.3375057928003775
best_error: 3.3375057928003713
best_error: 3.337505790603457
best_error: 3.3374970027870368
best_error: 3.337497000590043
best_error: 3.3374957151658107
best_error: 3.3374957151658067
best_error: 3.3374957129688028
best_error: 3.3374952071321373
best_error: 3.337495207132135
best_error: 3.337495204935127
best_error: 3.3374951467976066
best_error: 3.337495144600596
best_error: 3.337495130355522
best_error: 3.337495130355518
best_error: 3.3374951268315614
best_error: 3.337495124467428
best_error: 3.337261987138894
best_error: 3.337261987138889
best_error: 3.3372619849404
best_error: 3.337218726206276
best_error: 3.337218724022958
best_error: 3.3372130349804707
best_error: 3.3372130349804636
best_error: 3.337213032797102
best_error: 3.3372106721868895
best_error: 3.3372106721868873
best_error: 3.337210670003502
best_error: 3.3372105765904267
best_error: 3.3372105765904165
best_error: 3.337210574407038
best_error: 3.3372105560458727
best_error: 3.3369425585047656
best_error: 3.336942558504762
best_error: 3.3369425563244084
best_error: 3.336936822609652
best_error: 3.3369368226096463
best_error: 3.336936820429243
best_error: 3.3369345664631687
best_error: 3.336934566463161
best_error: 3.3369345642827417
best_error: 3.336934522518466
best_error: 3.3369340588783656
best_error: 3.336934058878362
best_error: 3.3369340566979333
best_error: 3.3369339985916446
best_error: 3.3369339985916424
best_error: 3.336933996411213
best_error: 3.3369339959847233
best_error: 3.336933992294491
best_error: 3.3369339922944876
best_error: 3.336886636867824
best_error: 3.3368866346870725
best_error: 3.3368857218290664
best_error: 3.3368857196483077
best_error: 3.3368855338540273
best_error: 3.3368855316732655
best_error: 3.3368855063481555
best_error: 3.3368855024077306
best_error: 3.3368855024077226
best_error: 3.3368292412220946
best_error: 3.336829241222085
best_error: 3.336829239040965
best_error: 3.33682568038711
best_error: 3.336825618387979
best_error: 3.336825341346624
best_error: 3.3368253413466236
best_error: 3.33682533916546
best_error: 3.336822214863234
best_error: 3.336822214863228
best_error: 3.3368222126820433
best_error: 3.3368219146059213
best_error: 3.3368219146059133
best_error: 3.3368219124247274
best_error: 3.336821869470653
best_error: 3.336821846920423
best_error: 3.336808443492045
best_error: 3.336808443492038
best_error: 3.3368084413107595
best_error: 3.3368082542792323
best_error: 3.336808252097947
best_error: 3.3368081682199184
best_error: 3.336808168219558
best_error: 3.336797441704902
best_error: 3.336797441704898
best_error: 3.336797439523545
best_error: 3.3367959582508426
best_error: 3.336795956069475
best_error: 3.336795450949565
best_error: 3.3367953889495494
best_error: 3.336795387865429
best_error: 3.3367953878654233
best_error: 3.3367953856840544
best_error: 3.336795378022699
best_error: 3.3367953766403473
best_error: 3.336795353253592
