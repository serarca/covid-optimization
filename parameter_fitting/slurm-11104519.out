ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 72
days_switch 65
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 105.44334656398473
best_error: 105.44334639020028
best_error: 105.44334637526161
best_error: 19.99744781535955
best_error: 19.997447815357653
best_error: 19.997447811985722
best_error: 19.996776782043852
best_error: 19.99677677865139
best_error: 19.9940552371728
best_error: 19.994055233704156
best_error: 19.98253059235741
best_error: 19.982530588554486
best_error: 19.922852617357922
best_error: 19.922852611536744
best_error: 17.910635915492083
best_error: 17.9106357225819
best_error: 17.0117532274911
best_error: 17.011752936148458
best_error: 15.29544693128914
best_error: 15.295446475779778
best_error: 13.606390499162783
best_error: 13.606389993684072
best_error: 13.054751090546802
best_error: 13.054751075061425
best_error: 12.977842299100725
best_error: 12.977842024076079
best_error: 12.949086424667506
best_error: 12.949086411740458
best_error: 12.911280611848406
best_error: 12.911280601088572
best_error: 12.89635930709284
best_error: 12.896359298001475
best_error: 12.89635929705032
best_error: 12.895355541487888
best_error: 12.89535534993362
best_error: 12.894792208788225
best_error: 12.894792200103614
best_error: 12.894792198762921
best_error: 12.893500892013684
best_error: 12.893500883701957
best_error: 12.893500882004204
best_error: 12.893299622885529
best_error: 12.893299614576208
best_error: 12.893299612878565
best_error: 12.89320153606122
best_error: 12.893201528110898
best_error: 12.893201526055247
best_error: 12.893180788225274
best_error: 12.893180780275209
best_error: 12.893180778219573
best_error: 12.893179572061438
best_error: 12.893179385311564
best_error: 12.893174057737827
best_error: 12.893174049787834
best_error: 12.893174047732202
best_error: 12.89314100661743
best_error: 12.893140998309851
best_error: 12.893140996612132
best_error: 12.892821564507857
best_error: 12.892821382692704
best_error: 12.890699425638292
best_error: 12.890699257460476
best_error: 12.88723435745231
best_error: 12.887234216824355
best_error: 12.886001344496503
best_error: 12.886001215603692
best_error: 12.883032056046197
best_error: 12.883031932074474
best_error: 12.864866868673468
best_error: 12.864866764899931
best_error: 12.863706020290003
best_error: 12.863705916550742
best_error: 12.862826851007327
best_error: 12.86282674214617
best_error: 12.862085295129827
best_error: 12.862085186774152
best_error: 12.861351273694954
best_error: 12.861351165214701
best_error: 12.860993872840144
best_error: 12.860993764616818
best_error: 12.860427059032968
best_error: 12.860426951311094
best_error: 12.860116611821141
best_error: 12.860116599645856
best_error: 12.860116598422998
best_error: 12.849222331183984
best_error: 12.84922221663258
best_error: 12.823421603755616
best_error: 12.823421473144052
best_error: 12.726098650965291
best_error: 12.726098496012945
best_error: 12.192315885289014
best_error: 12.192315858460862
best_error: 12.14291800483835
best_error: 12.142917996983298
best_error: 12.14291799526099
best_error: 12.065225326891609
best_error: 12.065225321593962
best_error: 12.0652252913298
best_error: 12.023841297740685
best_error: 12.023841246844464
best_error: 12.020363006885649
best_error: 12.020362973921072
best_error: 12.012959033605123
best_error: 12.012959011794145
best_error: 12.011886373928613
best_error: 12.0118863521283
best_error: 12.011763445750784
best_error: 12.011763441872393
best_error: 12.011763389564297
best_error: 11.993775331761524
best_error: 11.993775310211237
best_error: 11.952009889948169
best_error: 11.952009840181685
best_error: 11.945680071596922
best_error: 11.945680039368435
best_error: 11.867218139794792
best_error: 11.86721809282071
best_error: 11.856422566958669
best_error: 11.856422537198014
best_error: 11.80087643537225
best_error: 11.800876433832471
best_error: 11.800876378141066
best_error: 11.756107817577378
best_error: 11.756107773464539
best_error: 11.734915710704717
best_error: 11.734915707912782
best_error: 11.73491566186842
best_error: 11.72441927563182
best_error: 11.7244192730171
best_error: 11.724419224592896
best_error: 11.70476137172726
best_error: 11.70476135416963
best_error: 11.704544584371043
best_error: 11.704544498428309
best_error: 11.702198092599705
best_error: 11.702198006764078
best_error: 11.701323530181057
best_error: 11.701323512768603
best_error: 11.700022131945396
best_error: 11.7000220364744
best_error: 11.697071745032261
best_error: 11.697071653393103
best_error: 11.695565598453591
best_error: 11.695565583107799
best_error: 11.694118648211182
best_error: 11.694118631225399
best_error: 11.692761716628084
best_error: 11.692761700321025
best_error: 11.692037544960353
best_error: 11.69203744484916
best_error: 11.691305082146364
best_error: 11.691304977488024
best_error: 11.690904663850315
best_error: 11.690904648782709
best_error: 11.690783931911437
best_error: 11.690783823972408
best_error: 11.690770466294596
best_error: 11.690770358360192
best_error: 11.690765679443802
best_error: 11.690765670308421
best_error: 11.690765669395848
best_error: 11.690765669395823
best_error: 11.6907656679315
