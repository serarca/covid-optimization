ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.74649582168195
best_error: 12.746495808414531
best_error: 12.746495801638327
best_error: 11.48524438784588
best_error: 11.485244319326327
best_error: 10.112095249824769
best_error: 10.112095163783241
best_error: 9.886720960572799
best_error: 9.886720848788517
best_error: 9.83802137743193
best_error: 9.838021266145407
best_error: 9.125051666713713
best_error: 9.12505162948408
best_error: 9.125051628029514
best_error: 8.101957872322478
best_error: 8.10195783649059
best_error: 8.101957831141155
best_error: 7.582714192438789
best_error: 7.582714168630621
best_error: 7.582714151893459
best_error: 7.456771453849978
best_error: 7.4567714292326315
best_error: 7.456771413379123
best_error: 7.422511071040691
best_error: 7.42251104539891
best_error: 7.422511030150576
best_error: 7.3540231423422675
best_error: 7.3540231131535325
best_error: 7.3540231003765175
best_error: 7.353904658012008
best_error: 7.3539046561788535
best_error: 7.353882291217472
best_error: 7.353882289384377
best_error: 5.700286490154353
best_error: 5.700286308949098
best_error: 5.68882231256413
best_error: 5.688822078247759
best_error: 5.67275838078101
best_error: 5.672758163831862
best_error: 5.646000220715711
best_error: 5.646000023603242
best_error: 5.564707935143814
best_error: 5.564707748539276
best_error: 5.46779928225174
best_error: 5.467799076766926
best_error: 5.384329251522098
best_error: 5.384329019321864
best_error: 5.280591913692965
best_error: 5.280591644706009
best_error: 5.254931837970581
best_error: 5.254931551134397
best_error: 5.243604153418538
best_error: 5.243603835343029
best_error: 5.242546069642885
best_error: 5.2425457649917515
best_error: 4.784950702301275
best_error: 4.784950418448389
best_error: 4.777192435686036
best_error: 4.7771921279341765
best_error: 4.719008950305383
best_error: 4.719008617966381
best_error: 4.665395520707047
best_error: 4.6653951887445135
best_error: 4.65798266933205
best_error: 4.657982337460835
best_error: 4.654444843303095
best_error: 4.654444511159073
best_error: 4.653066110989653
best_error: 4.653066109289956
best_error: 4.653066048078103
best_error: 4.652883049491608
best_error: 4.652882717221321
best_error: 4.649977114637723
best_error: 4.649976821606227
best_error: 4.64077137423244
best_error: 4.640771064071293
best_error: 4.640754248234112
best_error: 4.640753922415295
best_error: 4.639855434368819
best_error: 4.639855113285506
best_error: 4.639593352635449
best_error: 4.639593038233709
best_error: 4.639149523179336
best_error: 4.639149212508184
best_error: 4.6344644708718
best_error: 4.634464162732584
best_error: 4.631084426148842
best_error: 4.631084118383854
best_error: 4.630345877488438
best_error: 4.6303455696789175
best_error: 4.630223083063612
best_error: 4.630222775246689
best_error: 4.6301678192929
best_error: 4.630167511473073
best_error: 4.63015334436912
best_error: 4.63015303654854
best_error: 4.630147398518705
best_error: 4.630147090697802
best_error: 4.630144657331058
best_error: 4.630144349510024
best_error: 4.62998201884502
best_error: 4.62998171110613
best_error: 4.629236982289966
best_error: 4.62923667448871
best_error: 4.628970063630315
best_error: 4.628969755806729
best_error: 4.628796876614462
best_error: 4.628796568776368
best_error: 4.6287719931175095
best_error: 4.628771685277332
best_error: 4.628765135972375
best_error: 4.628764828131622
best_error: 4.628763460687288
best_error: 4.628763152846387
best_error: 4.6287624070503615
best_error: 4.6287620992093945
best_error: 4.626272297906252
best_error: 4.626271959937378
best_error: 4.621965526351331
best_error: 4.621965222011812
best_error: 4.618118388333411
best_error: 4.618118068756093
best_error: 4.616861214200406
best_error: 4.61686090085945
best_error: 4.6147813937135425
best_error: 4.614781088686801
best_error: 4.613183129086248
best_error: 4.613182823876981
best_error: 4.612294738189469
best_error: 4.612294432890843
best_error: 4.611817314514099
best_error: 4.611817009394143
best_error: 4.611563587180058
best_error: 4.6115632820373
best_error: 4.611430218329251
best_error: 4.611429913430493
best_error: 4.611405039372226
best_error: 4.611404734474361
best_error: 4.611386115657939
best_error: 4.611385810760751
best_error: 4.611370046348851
best_error: 4.611369741452238
best_error: 4.611356462674998
best_error: 4.611356157778863
best_error: 4.611346082095852
best_error: 4.611345777200096
best_error: 4.611340339311976
best_error: 4.611340034416427
best_error: 4.611338741201557
best_error: 4.611338436305964
best_error: 4.611337572562749
best_error: 4.611337267667121
best_error: 4.611336816474552
best_error: 4.6113365115789104
best_error: 4.611336368759111
best_error: 4.611336063863467
best_error: 4.611336042581695
best_error: 4.6113360340091365
best_error: 4.611335974631933
best_error: 4.611335753329804
best_error: 4.607273754407052
best_error: 4.6072737530951
best_error: 4.607273690677838
best_error: 4.606396865534646
best_error: 4.606396864220303
best_error: 4.606396801774494
best_error: 4.604114140174898
best_error: 4.6041138062649365
best_error: 4.604076237836553
best_error: 4.604076236516846
best_error: 4.6040761740023814
best_error: 4.604025895839698
best_error: 4.604025565057039
best_error: 4.603995348640808
best_error: 4.603995017861652
best_error: 4.60397568544672
best_error: 4.603975355305592
best_error: 4.603963142468793
best_error: 4.603962812329296
best_error: 4.603954021759789
best_error: 4.603953691621518
best_error: 4.603948788531357
best_error: 4.603948458393772
best_error: 4.603944605695798
best_error: 4.603944275558781
best_error: 4.603942574680994
best_error: 4.603942244544246
best_error: 4.603941233164427
best_error: 4.603940903027716
best_error: 4.60394033509321
best_error: 4.603940004956522
best_error: 4.603939765372246
best_error: 4.603939435235591
best_error: 4.603939398825115
best_error: 4.603939068688472
best_error: 4.6039388229583995
best_error: 4.603938674578151
