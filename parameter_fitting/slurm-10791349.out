ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.517282142360196
best_error: 11.517282137411241
best_error: 11.33718861409825
best_error: 11.337188589437678
best_error: 7.676339149358287
best_error: 7.676338638951309
best_error: 6.541494640821449
best_error: 6.541494130224405
best_error: 6.316006669297352
best_error: 6.316006607248592
best_error: 6.200945448750735
best_error: 6.200945410199931
best_error: 6.198062735867486
best_error: 6.198062725545341
best_error: 6.1965555994107335
best_error: 6.196555569510952
best_error: 6.196473191569199
best_error: 6.196473161665116
best_error: 6.1964626361476265
best_error: 6.196462606242998
best_error: 6.196461371685475
best_error: 6.1964613417807755
best_error: 6.196461273858727
best_error: 6.196461273841811
best_error: 6.196461269261643
best_error: 6.195660006369609
best_error: 6.195659996859325
best_error: 6.193155399367969
best_error: 6.193155389362237
best_error: 6.183182694199777
best_error: 6.183182683051144
best_error: 6.153376364942094
best_error: 6.153376312681834
best_error: 6.1401220148107445
best_error: 6.140121956563185
best_error: 6.130443917258636
best_error: 6.1304438530682885
best_error: 6.127709368138747
best_error: 6.1277092997585285
best_error: 6.123681440890641
best_error: 6.123681371409202
best_error: 6.063845271225299
best_error: 6.0638451908023665
best_error: 6.014414748769029
best_error: 6.014414511429555
best_error: 5.914821211768823
best_error: 5.914821157737742
best_error: 5.906282626360455
best_error: 5.90628241262389
best_error: 5.886288467884602
best_error: 5.886288448263086
best_error: 5.8762691688375375
best_error: 5.876269168809739
best_error: 5.837987726048915
best_error: 5.837987512855611
best_error: 5.333363430615273
best_error: 5.33336330968536
best_error: 5.106517518105817
best_error: 5.106517495896481
best_error: 4.989618970275572
best_error: 4.989618910267997
best_error: 4.861846530283697
best_error: 4.861846530117214
best_error: 4.86184652696268
best_error: 4.8211984330402
best_error: 4.821198419737987
best_error: 4.812417450686859
best_error: 4.812417369351786
best_error: 4.768272571903696
best_error: 4.7682725414291935
best_error: 4.717797925006425
best_error: 4.717797876870029
best_error: 4.6957521241598315
best_error: 4.695752012614797
best_error: 4.5397599096970795
best_error: 4.539759749202162
best_error: 4.37522868719998
best_error: 4.375228563739675
best_error: 4.3593765626267516
best_error: 4.359376220072266
best_error: 4.284051819854456
best_error: 4.284051557720242
best_error: 4.2229406078754685
best_error: 4.222940497678517
best_error: 4.211324577072835
best_error: 4.211324558177929
best_error: 4.197171535648069
best_error: 4.197171521973212
best_error: 4.185908960769708
best_error: 4.185908942411464
best_error: 4.151016925444106
best_error: 4.151016908393459
best_error: 4.150365177064238
best_error: 4.150365151134797
best_error: 4.140004643322536
best_error: 4.140004574665853
best_error: 4.128664909582797
best_error: 4.128664771708868
best_error: 4.122809803460411
best_error: 4.122809802304529
best_error: 4.122809794223528
best_error: 4.122331140364494
best_error: 4.122331126860232
best_error: 4.121998085612537
best_error: 4.1219980695362795
best_error: 4.121965552432746
best_error: 4.1219655363642556
best_error: 4.121921792319056
best_error: 4.121921776582844
best_error: 4.121896530515697
best_error: 4.121896514783
best_error: 4.121879472464208
best_error: 4.121879456635612
best_error: 4.121866615990639
best_error: 4.12186660014202
best_error: 4.12185552944172
best_error: 4.121855513714705
best_error: 4.121844491184658
best_error: 4.121844475440399
best_error: 4.121836684063508
best_error: 4.121836668307087
best_error: 4.121819196401065
best_error: 4.121819180466534
best_error: 4.121805778619648
best_error: 4.121805754627962
best_error: 4.121805065349557
best_error: 4.121805049392294
best_error: 4.1218033158105
best_error: 4.121803299851264
best_error: 4.1218017228576205
best_error: 4.121801707008045
best_error: 4.12180093971484
best_error: 4.121800923864376
best_error: 4.1218002235938425
best_error: 4.121800207742565
best_error: 4.121799879174451
best_error: 4.121799863322783
best_error: 4.121799835134981
best_error: 4.12179981928325
best_error: 4.121799795680475
best_error: 4.121799779828694
best_error: 4.121799771035505
best_error: 4.121799755183682
best_error: 4.121799749610778
best_error: 4.1217997337589285
best_error: 4.121799731455005
best_error: 4.121799715603123
best_error: 4.121799701632257
best_error: 4.121799690549187
best_error: 4.121799674697247
best_error: 4.121799662444603
best_error: 4.121799648944027
best_error: 4.121799642833997
best_error: 4.121799642262108
best_error: 4.121799640774834
best_error: 4.121799639243728
best_error: 4.121799638936833
