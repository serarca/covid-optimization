ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.094156447882458
best_error: 12.094156417729483
best_error: 12.094156391645503
best_error: 11.940241229103194
best_error: 11.940241191142647
best_error: 11.94024116158619
best_error: 10.729225789603202
best_error: 10.729225679009929
best_error: 10.72922563721931
best_error: 9.478750068836593
best_error: 9.478749895861952
best_error: 9.092942058685374
best_error: 9.092941887123693
best_error: 9.062413951292255
best_error: 9.062413777692337
best_error: 8.210513533702343
best_error: 8.210513440576763
best_error: 8.210513410750554
best_error: 7.89509808857466
best_error: 7.895097997846774
best_error: 7.895097955590376
best_error: 7.700530352494317
best_error: 7.700530270894712
best_error: 7.700530212153101
best_error: 7.540146380464476
best_error: 7.540146314594609
best_error: 7.540146234146157
best_error: 7.422506525764265
best_error: 7.422506465766495
best_error: 7.422506374541727
best_error: 7.07371175696824
best_error: 7.073711682348648
best_error: 7.073711608564727
best_error: 7.004915556988751
best_error: 7.0049153202148275
best_error: 6.996315490309698
best_error: 6.996315411968386
best_error: 6.996315342699189
best_error: 6.996042867207674
best_error: 6.996042630507649
best_error: 6.683485352447099
best_error: 6.683485203313521
best_error: 5.182925084770409
best_error: 5.182924886255446
best_error: 4.35407905915918
best_error: 4.35407872699752
best_error: 4.349026890197919
best_error: 4.349026525211826
best_error: 4.250477498664171
best_error: 4.2504771339114695
best_error: 4.205245971874143
best_error: 4.205245607362483
best_error: 4.185075353031431
best_error: 4.185074987475855
best_error: 4.17486392934398
best_error: 4.174863562569724
best_error: 4.168952549362093
best_error: 4.168952330154918
best_error: 4.168287452770847
best_error: 4.1682870850030636
best_error: 4.1252619900851375
best_error: 4.125261587561192
best_error: 4.069121543139671
best_error: 4.069121141251687
best_error: 4.063592837836527
best_error: 4.063592624842316
best_error: 4.045808680743867
best_error: 4.045808475848368
best_error: 4.040861088147654
best_error: 4.040860891546841
best_error: 4.0358854094234395
best_error: 4.035885218156643
best_error: 4.033459271705398
best_error: 4.033459080433787
best_error: 4.03268137754574
best_error: 4.032681186273091
best_error: 4.032623027926043
best_error: 4.032622592951589
best_error: 4.005690246541761
best_error: 4.005690054230435
best_error: 3.9123762486253044
best_error: 3.9123760562032692
best_error: 3.698597461766145
best_error: 3.698597313305603
best_error: 3.5478493307611414
best_error: 3.5478490135017524
best_error: 3.5322232842025287
best_error: 3.5322231506288073
best_error: 3.530624632939542
best_error: 3.530624304385036
best_error: 3.435563849756149
best_error: 3.43556354516439
best_error: 3.2406563530126347
best_error: 3.2406560208224224
best_error: 3.1177787382984414
best_error: 3.1177787382943474
best_error: 3.1177785675776555
best_error: 3.0858983732849516
best_error: 3.085898021996199
best_error: 2.9303633512583374
best_error: 2.930362986874772
best_error: 2.7279494327879554
best_error: 2.727949250487739
best_error: 2.6804165003466256
best_error: 2.6804160398714427
best_error: 2.47665602445206
best_error: 2.476655570859734
best_error: 2.384362068259413
best_error: 2.384361630844525
best_error: 2.3479979927740238
best_error: 2.3479975591624207
best_error: 2.3315455125070907
best_error: 2.3315450792047194
best_error: 2.3290907499503355
best_error: 2.3290907499377433
best_error: 2.329090749765313
best_error: 2.329090577020652
best_error: 2.3280616166444914
best_error: 2.328061182978961
best_error: 2.327937191499601
best_error: 2.327936757821126
best_error: 2.327898129611917
best_error: 2.327897695929341
best_error: 2.3278916246484083
best_error: 2.3278916246357912
best_error: 2.327891624463409
best_error: 2.3278914517509337
best_error: 2.3278890248873996
best_error: 2.327888591203892
best_error: 2.3278831196955756
best_error: 2.3278826860114314
best_error: 2.327880018201002
best_error: 2.327880018188366
best_error: 2.3278800180159926
best_error: 2.3278798453038396
best_error: 2.327879821395821
best_error: 2.3278798172073074
best_error: 2.3258094915934344
best_error: 2.3258090569263135
best_error: 2.318026241569152
best_error: 2.318025805355293
best_error: 2.2824671534767047
best_error: 2.28246668486023
best_error: 2.2804286777121394
best_error: 2.280428204232167
best_error: 2.277702861972662
best_error: 2.277702383893417
best_error: 2.275639376156941
best_error: 2.2756388924924877
best_error: 2.2738990644258643
best_error: 2.2738985783497547
best_error: 2.271539894789656
best_error: 2.2715394082660922
best_error: 2.266830844664863
best_error: 2.266830358299947
best_error: 2.246084097947465
best_error: 2.246083612775295
best_error: 2.2385745844231755
best_error: 2.2385740991624665
best_error: 2.2353286536974717
best_error: 2.235328168098923
best_error: 2.234626739375644
best_error: 2.234626253684765
best_error: 2.234455938608571
best_error: 2.234455452895193
best_error: 2.2344074362569324
best_error: 2.2344069505371773
best_error: 2.2343763060740622
best_error: 2.2343758203502317
best_error: 2.23437275259733
best_error: 2.2343727525971566
best_error: 2.234372752420419
best_error: 2.234372577661536
best_error: 2.2343722968552857
best_error: 2.2343719363344094
best_error: 2.2250221314884637
best_error: 2.2250216602069726
best_error: 2.214007098016202
best_error: 2.2140066294667733
best_error: 2.208485414870197
best_error: 2.208484945270633
best_error: 2.206405491014385
best_error: 2.2064050220747595
best_error: 2.2051311666034286
best_error: 2.205130697421845
best_error: 2.204352214065244
best_error: 2.2043517447358223
best_error: 2.2039052179551346
best_error: 2.2039047485409213
best_error: 2.203619728758036
best_error: 2.203619259289666
