ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.678809217796811
best_error: 10.67880921050814
best_error: 10.671399933812575
best_error: 10.671399926099411
best_error: 7.6842596756341
best_error: 7.684259329126382
best_error: 6.7483389589546565
best_error: 6.7483385044678785
best_error: 5.493319452916488
best_error: 5.493318883756009
best_error: 4.523457258320168
best_error: 4.523457086224694
best_error: 4.491811352844079
best_error: 4.491811302079009
best_error: 4.477995054211853
best_error: 4.477995054133853
best_error: 4.477995037732713
best_error: 4.476250312704232
best_error: 4.476250312626161
best_error: 4.476250296099165
best_error: 4.473877629023004
best_error: 4.473877579454207
best_error: 4.4717544878564395
best_error: 4.471754487777881
best_error: 4.471754471013989
best_error: 4.459160741815808
best_error: 4.459160741735635
best_error: 4.45916072483363
best_error: 4.407956925808547
best_error: 4.407956925721891
best_error: 4.407956908839087
best_error: 4.203543294513326
best_error: 4.203543259661682
best_error: 3.926688700616512
best_error: 3.9266886675298855
best_error: 3.903524137951171
best_error: 3.9035239386559213
best_error: 3.8887148114927848
best_error: 3.888714631849665
best_error: 3.885907286221088
best_error: 3.8859072124605896
best_error: 3.8839706650182784
best_error: 3.8839705791537598
best_error: 3.8805071669288167
best_error: 3.88050708133555
best_error: 3.8679535214348064
best_error: 3.8679535213259086
best_error: 3.8679535142810977
best_error: 3.6893005841311273
best_error: 3.6893005569385457
best_error: 3.6641689280241465
best_error: 3.6641688465818567
best_error: 3.644532490355835
best_error: 3.644532411893401
best_error: 3.59000759827414
best_error: 3.590007534888386
best_error: 3.5155161221924196
best_error: 3.5155160216166315
best_error: 3.2611181087307806
best_error: 3.2611180699300535
best_error: 3.2473037305685173
best_error: 3.2473037265811078
best_error: 3.237408758354666
best_error: 3.237408756792887
best_error: 3.2138963423747535
best_error: 3.213896326177552
best_error: 3.189739813041198
best_error: 3.1897397280096085
best_error: 3.1814569630781593
best_error: 3.181456955131121
best_error: 3.180052124648152
best_error: 3.1800521242276085
best_error: 3.1796502781219473
best_error: 3.1796502751792453
best_error: 3.17947337096449
best_error: 3.179473368503416
best_error: 3.1789183871419526
best_error: 3.1789183866417625
best_error: 3.1788831870298044
best_error: 3.1788831865462974
best_error: 3.1787841627538787
best_error: 3.178784162465447
best_error: 3.17878416236756
best_error: 3.1787772082976593
best_error: 3.178777208011099
best_error: 3.178777207911041
best_error: 3.1787705668509334
best_error: 3.178770566566152
best_error: 3.17877056646401
best_error: 3.1787616136220502
best_error: 3.1787616133995047
best_error: 3.1787616132350287
best_error: 3.1787325382505633
best_error: 3.1787325379627456
best_error: 3.1787325378648372
best_error: 3.178686221613387
best_error: 3.178686221396368
best_error: 3.1786862212259672
best_error: 3.178685920183466
best_error: 3.178685919966539
best_error: 3.178685919796029
best_error: 3.1786856284680605
best_error: 3.1786856282512046
best_error: 3.178685628080605
best_error: 3.1786854493196093
best_error: 3.1786854491028054
best_error: 3.1786854489321477
best_error: 3.1786852776039063
best_error: 3.178685277387159
best_error: 3.1786852772164385
best_error: 3.1786851188611633
best_error: 3.17868511864445
best_error: 3.178685118473684
best_error: 3.1786849671413373
best_error: 3.1786849669246635
best_error: 3.1786849667538517
best_error: 3.178684824072927
best_error: 3.1786848238562966
best_error: 3.17868482368543
best_error: 3.178684695083296
best_error: 3.1786846948667042
best_error: 3.178684694695796
best_error: 3.178684003450644
best_error: 3.1786840032342427
best_error: 3.17868400306311
best_error: 3.1786834531755366
best_error: 3.178683452959276
best_error: 3.1786834527879706
best_error: 3.17868338055048
best_error: 3.178683380334239
best_error: 3.1786833801629113
best_error: 3.1786833295884986
best_error: 3.1786833293722756
best_error: 3.1786833292009264
best_error: 3.1786828935096563
best_error: 3.178682893293547
best_error: 3.178682893122063
best_error: 3.178682888751795
best_error: 3.1786828885356977
best_error: 3.17868288836421
best_error: 3.178682884124349
best_error: 3.1786828839082553
best_error: 3.1786828837367644
best_error: 3.1786828829519496
best_error: 3.178682882735859
best_error: 3.178682882564372
best_error: 3.178682881814364
best_error: 3.178682881598265
best_error: 3.178682881426766
best_error: 3.1786828812033154
best_error: 3.17868288098722
best_error: 3.1786828808157255
best_error: 3.1786828806118823
best_error: 3.178682880395787
best_error: 3.1786828802243017
best_error: 3.178682880052534
best_error: 3.178682879881042
best_error: 3.1786828797846396
best_error: 3.178682879613143
best_error: 3.178682879529557
best_error: 3.178682879358066
best_error: 3.178682875601109
