ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.725643320589981
best_error: 10.725643248579367
best_error: 10.725643232762911
best_error: 10.027006927940532
best_error: 10.02700681950813
best_error: 9.422133600154524
best_error: 9.42213346843326
best_error: 9.13549145084879
best_error: 9.135491302049868
best_error: 8.62559571946842
best_error: 8.62559555276954
best_error: 8.331001823792015
best_error: 8.331001745425441
best_error: 8.331001706910683
best_error: 7.568381229108128
best_error: 7.568381134069013
best_error: 7.568381113571482
best_error: 6.585902034424571
best_error: 6.585901937524611
best_error: 6.585901918532549
best_error: 6.264328977611033
best_error: 6.2643288815033
best_error: 6.264328862583004
best_error: 6.13340329684623
best_error: 6.13340319670618
best_error: 6.133403181320698
best_error: 6.062800367678692
best_error: 6.062800263546746
best_error: 6.062800252212488
best_error: 6.046114158183319
best_error: 6.046114054492254
best_error: 6.04611404229377
best_error: 6.038616598761099
best_error: 6.038616495413092
best_error: 6.038616482680124
best_error: 6.035389977621012
best_error: 6.035389873969256
best_error: 6.035389861481668
best_error: 6.034521089475609
best_error: 6.034520985742121
best_error: 6.034520973320539
best_error: 6.034031146267125
best_error: 6.034031042487551
best_error: 6.034031030103182
best_error: 6.033710984313253
best_error: 6.033710880503642
best_error: 6.03371086814367
best_error: 6.033488412925138
best_error: 6.0334883090946345
best_error: 6.033488296751605
best_error: 6.03336265749958
best_error: 6.033362553657274
best_error: 6.033362541323811
best_error: 6.033274488227741
best_error: 6.033274384377162
best_error: 6.033274372050412
best_error: 6.033225367901536
best_error: 6.033225264046357
best_error: 6.033225251723342
best_error: 6.03319049960159
best_error: 6.033190395743135
best_error: 6.033190383422783
best_error: 6.0331714656567215
best_error: 6.033171361796487
best_error: 6.033171349477598
best_error: 6.033157714978271
best_error: 6.033157611116751
best_error: 6.033157598798878
best_error: 6.033146315363858
best_error: 6.0331462115012755
best_error: 6.033146199184278
best_error: 6.033141580796656
best_error: 6.033141435876331
best_error: 6.03313924811799
best_error: 6.033139144254733
best_error: 6.033139131938273
best_error: 6.033138614266699
best_error: 6.033138510403388
best_error: 6.033138498086991
best_error: 6.033138016913038
best_error: 6.0331379007332995
best_error: 4.752148572873314
best_error: 4.7521483605705
best_error: 4.470370483534264
best_error: 4.4703701298293455
best_error: 4.438337937176053
best_error: 4.438337629266633
best_error: 4.394803967646306
best_error: 4.394803668617591
best_error: 4.305381872960304
best_error: 4.305381774385406
best_error: 4.173616392678097
best_error: 4.173616118984938
best_error: 4.125118249096723
best_error: 4.1251180021616705
best_error: 4.01822547874507
best_error: 4.018225224423515
best_error: 3.9734810084895313
best_error: 3.9734807491030324
best_error: 3.969697825334659
best_error: 3.9696977096458843
best_error: 3.9112050268744243
best_error: 3.91120475012021
best_error: 3.658613575494447
best_error: 3.6586132496550854
best_error: 3.6566645248063794
best_error: 3.6566639592262944
best_error: 3.4952551260583586
best_error: 3.49525462854468
best_error: 2.9527434944334754
best_error: 2.95274303864606
best_error: 2.9098625469235055
best_error: 2.9098620990917237
best_error: 2.885899973270961
best_error: 2.8858995340942464
best_error: 2.872495445039804
best_error: 2.8724950115543986
best_error: 2.8646470263783668
best_error: 2.8646465948627595
best_error: 2.8600185913426683
best_error: 2.8600181591091225
best_error: 2.8576484801257376
best_error: 2.857648047525031
best_error: 2.8557974851803127
best_error: 2.8557970522866283
best_error: 2.855018905628568
best_error: 2.8550184726116745
best_error: 2.8545039950391082
best_error: 2.8545035619407777
best_error: 2.8542584386681282
best_error: 2.854258005530953
best_error: 2.8540797589949225
best_error: 2.8540793258295043
best_error: 2.854002663042305
best_error: 2.8540022298647028
best_error: 2.853986128932548
best_error: 2.853985695752317
best_error: 2.8539825259229454
best_error: 2.8539820927421395
best_error: 2.8539804302388254
best_error: 2.8539799970576887
best_error: 2.853979327498811
best_error: 2.853978894317492
best_error: 2.8539786090795234
best_error: 2.8539781758980847
best_error: 2.8539778291566313
best_error: 2.8523265452278457
best_error: 2.852326532204647
best_error: 2.852326411060483
best_error: 2.8459092565558772
best_error: 2.845908828748345
best_error: 2.8411483631704435
best_error: 2.8411479541287767
best_error: 2.840823829026552
best_error: 2.8408234200174727
best_error: 2.839547981785716
best_error: 2.8395475732201634
best_error: 2.834862407087666
best_error: 2.8348619997109106
best_error: 2.8111956158687166
best_error: 2.8111952174362287
best_error: 2.809086300573485
best_error: 2.8090859007437072
best_error: 2.8083837011765045
best_error: 2.80838330067108
best_error: 2.808141177121859
best_error: 2.8081407762427553
best_error: 2.8080307828681192
best_error: 2.80803038194463
best_error: 2.807976046788137
best_error: 2.8079756458425926
best_error: 2.807948673455842
best_error: 2.807948580439105
best_error: 2.8079484813086033
best_error: 2.8079484747263237
best_error: 2.807948466749929
best_error: 2.807948358186082
best_error: 2.8079483485702132
best_error: 2.8077837281777187
best_error: 2.807783330300272
best_error: 2.807783146275848
best_error: 2.8077798404457703
best_error: 2.8077794425149265
best_error: 2.8077634286270277
best_error: 2.807763030694537
best_error: 2.807755734489316
best_error: 2.807755724274484
best_error: 2.8077556022081547
best_error: 2.8077543775726848
best_error: 2.8077539796392985
best_error: 2.807753665202695
best_error: 2.807753575887131
best_error: 2.807753565675231
best_error: 2.807753484848295
best_error: 2.807753471622088
best_error: 2.8077534619145155
