ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 68
days_switch 85
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 109.19934905869958
best_error: 109.19934894698
best_error: 109.19934886029748
best_error: 20.415871141947775
best_error: 20.41587114194665
best_error: 20.415871139922515
best_error: 20.415307506256553
best_error: 20.415307504215654
best_error: 20.41300878402479
best_error: 20.413008781919338
best_error: 20.403039860377177
best_error: 20.40303985797751
best_error: 20.34416928778184
best_error: 20.344169283176853
best_error: 20.10120064508601
best_error: 20.10120062506312
best_error: 16.748182077429654
best_error: 16.748181725590623
best_error: 14.653240909014432
best_error: 14.653240384973232
best_error: 14.020178376975599
best_error: 14.020178373756078
best_error: 14.020178362000532
best_error: 14.004604407695604
best_error: 14.004604406845598
best_error: 14.00460438787222
best_error: 13.997157954417613
best_error: 13.997157953663613
best_error: 13.997157932960757
best_error: 13.993119419251544
best_error: 13.993119414736604
best_error: 13.993119397898699
best_error: 13.991238301131888
best_error: 13.991238290379444
best_error: 13.991238279151807
best_error: 13.987892737949839
best_error: 13.987892720670608
best_error: 13.987892716149496
best_error: 13.987375412404077
best_error: 13.987375395051075
best_error: 13.987375390616947
best_error: 13.98715620053231
best_error: 13.987156183148034
best_error: 13.987156178750784
best_error: 13.98711794985298
best_error: 13.987117655166081
best_error: 13.92896782065758
best_error: 13.928967819863061
best_error: 13.928967806273507
best_error: 13.890568045428692
best_error: 13.890568033441923
best_error: 13.876805620194263
best_error: 13.87680561114204
best_error: 13.874035919191389
best_error: 13.87403591130921
best_error: 13.868819832745404
best_error: 13.868819826747865
best_error: 13.86881982505789
best_error: 13.856532748693656
best_error: 13.856532746195434
best_error: 13.85653274210929
best_error: 13.856532741151863
best_error: 13.8342080289516
best_error: 13.834208026479441
best_error: 13.834208022510044
best_error: 13.834208021628037
best_error: 13.801518458581185
best_error: 13.801518451248509
best_error: 13.79919957082731
best_error: 13.799199563447104
best_error: 13.79618961564923
best_error: 13.796189583504141
best_error: 13.794215293178727
best_error: 13.794215285944674
best_error: 13.792148395946278
best_error: 13.792148388702074
best_error: 13.790936499795826
best_error: 13.790936492486527
best_error: 13.790222060139222
best_error: 13.7902220527765
best_error: 13.789816361005403
best_error: 13.78981635376078
best_error: 13.78950333215113
best_error: 13.789503300014275
best_error: 13.778116190870803
best_error: 13.778116162776007
best_error: 13.767231017268635
best_error: 13.767230744721225
best_error: 13.643632346377215
best_error: 13.643632318682986
best_error: 13.563398676203168
best_error: 13.563398644566645
best_error: 13.510993528268475
best_error: 13.510993497074356
best_error: 13.303741750192525
best_error: 13.30374174786084
best_error: 13.303741728597494
best_error: 13.234304448024051
best_error: 13.234304406379703
best_error: 13.226118523590289
best_error: 13.226118482143882
best_error: 13.19376303300444
best_error: 13.19376299242769
best_error: 13.071872331229168
best_error: 13.071872294633454
best_error: 12.969576436793634
best_error: 12.969576406840591
best_error: 12.945075372452461
best_error: 12.945075345395972
best_error: 12.933455711752753
best_error: 12.933455686262915
best_error: 12.930868456006008
best_error: 12.93086833559924
best_error: 12.925346370947661
best_error: 12.92534627769086
best_error: 12.92493525848575
best_error: 12.924935233395672
best_error: 12.920661931460863
best_error: 12.920661905843978
best_error: 12.907186272250339
best_error: 12.907186215474908
best_error: 12.872711707394334
best_error: 12.87271170327843
best_error: 12.87271170162812
best_error: 12.840775002955187
best_error: 12.84077499774882
best_error: 12.840774996657071
best_error: 12.834670772259209
best_error: 12.83467076652311
best_error: 12.834670765757984
best_error: 12.813119071611489
best_error: 12.813119025406257
best_error: 12.812058626023157
best_error: 12.812058619451804
best_error: 12.810527364717315
best_error: 12.810527358144757
best_error: 12.809754103682334
best_error: 12.809754097120052
best_error: 12.809754097109362
best_error: 12.80908881427979
best_error: 12.809088807714236
best_error: 12.809088807699975
best_error: 12.809036341036272
best_error: 12.809036318463724
best_error: 12.795496938665838
best_error: 12.795496934592974
best_error: 12.771585879876161
best_error: 12.771585876339289
best_error: 12.745591029222954
best_error: 12.745591015328705
best_error: 12.736829905541626
best_error: 12.73682990363228
best_error: 12.73154236774952
best_error: 12.73154236513073
best_error: 12.729864055667061
best_error: 12.729864054106441
best_error: 12.729588719819901
best_error: 12.729588717868912
best_error: 12.729533114780764
best_error: 12.729533113140985
best_error: 12.72931890445556
best_error: 12.729318902814118
best_error: 12.72842540975849
best_error: 12.727033522606327
best_error: 12.727033522606325
best_error: 12.727033522481575
