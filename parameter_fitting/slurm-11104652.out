ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 82
days_switch 95
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 107.37137131215047
best_error: 107.37137113694926
best_error: 17.349632101453814
best_error: 17.34963210144672
best_error: 17.349632088752003
best_error: 17.337145222343306
best_error: 17.337145209312236
best_error: 17.28382389066597
best_error: 17.283823876193566
best_error: 16.994935099508815
best_error: 16.994935075513716
best_error: 14.703605448781087
best_error: 14.703605444386662
best_error: 14.703605420820915
best_error: 13.80559267512847
best_error: 13.805592633262899
best_error: 13.504574701072105
best_error: 13.504574681067009
best_error: 13.48590137496875
best_error: 13.485901346759936
best_error: 12.52085810479851
best_error: 12.520858097761726
best_error: 12.520858076866737
best_error: 12.469655546369989
best_error: 12.46965553587614
best_error: 12.469655517393043
best_error: 12.419793251724672
best_error: 12.419793225073054
best_error: 12.348373230497025
best_error: 12.348373211410326
best_error: 12.294248710870296
best_error: 12.294248710870246
best_error: 12.294248707760186
best_error: 12.294248692244391
best_error: 12.13959519022257
best_error: 12.13959518674885
best_error: 12.139595171435891
best_error: 12.007662140941111
best_error: 12.007662041927048
best_error: 11.927265578328699
best_error: 11.927265560611064
best_error: 11.927265551850514
best_error: 10.450153020139025
best_error: 10.450153008036223
best_error: 10.450153003038782
best_error: 10.348414537307121
best_error: 10.348414338255374
best_error: 10.333089529313213
best_error: 10.333089513302363
best_error: 10.333089511347133
best_error: 10.292183897574038
best_error: 10.292183882106887
best_error: 10.292183879810283
best_error: 10.160102273697605
best_error: 10.16010221344029
best_error: 9.910848474896484
best_error: 9.910848421601722
best_error: 9.839121918595696
best_error: 9.839121870787949
best_error: 9.756881828698589
best_error: 9.756881637142405
best_error: 9.683267382139455
best_error: 9.683267329082632
best_error: 9.633472137534032
best_error: 9.633472093779135
best_error: 9.402976886664241
best_error: 9.402976492105278
best_error: 9.380760846067245
best_error: 9.380760475091567
best_error: 9.302903678817867
best_error: 9.302903400948795
best_error: 9.300537059368615
best_error: 9.30053703004339
best_error: 9.286824897598336
best_error: 9.286824869793806
best_error: 9.285836631132149
best_error: 9.285836361228174
best_error: 9.276194280136243
best_error: 9.276194042862011
best_error: 9.272689064718456
best_error: 9.272689030565523
best_error: 9.264228865121359
best_error: 9.264228831110772
best_error: 9.241461285542796
best_error: 9.241461112472463
best_error: 9.23768487360517
best_error: 9.237684727609466
best_error: 9.23757605323898
best_error: 9.237576013406951
best_error: 9.236105810181648
best_error: 9.236105672108199
best_error: 9.231516223059412
best_error: 9.23151618340964
best_error: 9.188740428311824
best_error: 9.188740375222094
best_error: 9.170272442245569
best_error: 9.170272385701605
best_error: 9.146801378403168
best_error: 9.146801271691995
best_error: 9.12386015731267
best_error: 9.123860140432484
best_error: 9.115765496324206
best_error: 9.11576549442885
best_error: 9.11576548833933
best_error: 9.108401341397906
best_error: 9.108401337462087
best_error: 9.108401334654687
best_error: 9.104894892064756
best_error: 9.104894872365701
best_error: 9.096978168811871
best_error: 9.096978161545653
best_error: 9.059373868143657
best_error: 9.059373868126139
best_error: 9.059373868124316
best_error: 9.059373857591677
best_error: 9.03648909940182
best_error: 9.036489093876568
best_error: 9.036489091486217
best_error: 9.025714691600069
best_error: 9.025714682786145
best_error: 9.021292547516296
best_error: 9.021292466363382
best_error: 8.968570905061522
best_error: 8.96857082906264
best_error: 8.895001178677399
best_error: 8.895001125020483
best_error: 8.88865140246245
best_error: 8.888651387984952
best_error: 8.886595715291882
best_error: 8.886595715181405
best_error: 8.886595712259627
best_error: 8.886595710730786
best_error: 8.88632572761136
best_error: 8.88632572750046
best_error: 8.8863257245754
best_error: 8.886325723049595
best_error: 8.886123074374499
best_error: 8.88612307426328
best_error: 8.886123071335753
best_error: 8.886123069812234
best_error: 8.88595356895399
best_error: 8.885953568842506
best_error: 8.885953565912915
best_error: 8.885953564391304
best_error: 8.885848794529327
best_error: 8.88584879441768
best_error: 8.885848791486813
best_error: 8.885848789966381
best_error: 8.885724327185665
best_error: 8.885724327073817
best_error: 8.885724324141439
best_error: 8.885724322622412
best_error: 8.885672560825235
best_error: 8.88567256071331
best_error: 8.8856725577803
best_error: 8.885672556261852
best_error: 8.885641740820883
best_error: 8.885641740708909
best_error: 8.885641737775522
best_error: 8.885641736257423
best_error: 8.885605570616544
best_error: 8.885605570504513
best_error: 8.885605567570686
best_error: 8.885605566052993
best_error: 8.885592987435949
best_error: 8.885592987323893
best_error: 8.885592984389916
best_error: 8.885592982872366
best_error: 8.885583807974601
best_error: 8.885583807862533
best_error: 8.885583804928444
best_error: 8.885583803410997
best_error: 8.885575775794283
best_error: 8.885575775682204
best_error: 8.885575772748014
best_error: 8.88557577123066
best_error: 8.885571133483623
best_error: 8.885571133371535
best_error: 8.885571130437292
best_error: 8.885571128919988
best_error: 8.88556549280033
best_error: 8.885565492688233
best_error: 8.88556548975392
best_error: 8.88556548823668
best_error: 8.885563313643786
best_error: 8.885563313531687
best_error: 8.885563310597345
best_error: 8.88556330908013
best_error: 8.885562054338221
best_error: 8.88556205422612
best_error: 8.885562051291764
best_error: 8.885562049774562
best_error: 8.885560524278251
best_error: 8.885560524166147
best_error: 8.885560521231774
best_error: 8.885560519714588
best_error: 8.88556003391938
best_error: 8.885560033807275
best_error: 8.885560030872895
best_error: 8.885560029355716
best_error: 8.88555966002157
best_error: 8.885559659909465
best_error: 8.885559656975081
best_error: 8.885559655457904
best_error: 8.885559381324555
best_error: 8.885559381212452
best_error: 8.885559378278062
best_error: 8.88555937676089
best_error: 8.885559193958336
best_error: 8.88555919384623
best_error: 8.88555919091184
best_error: 8.88555918939467
best_error: 8.88555900001973
best_error: 8.885558999907627
best_error: 8.88555899697323
best_error: 8.885558995456062
best_error: 8.8855589056623
best_error: 8.885558905550193
best_error: 8.8855589026158
best_error: 8.885558901098634
best_error: 8.885558780037384
best_error: 8.885558779925278
best_error: 8.885558776990884
best_error: 8.885558775473717
best_error: 8.885558741518356
best_error: 8.88555874140625
best_error: 8.885558738471854
best_error: 8.885558736954689
best_error: 8.885558679274606
best_error: 8.885558679162498
best_error: 8.8855586762281
best_error: 8.885558674710936
best_error: 8.88555865774225
best_error: 8.88554781144537
best_error: 8.885547811332858
best_error: 8.885547808404311
best_error: 8.885547806883556
best_error: 8.8855047879865
best_error: 8.885504787873968
best_error: 8.885504784944487
best_error: 8.885504783424448
best_error: 8.885465757488621
best_error: 8.885465757376064
best_error: 8.885465754445734
best_error: 8.885465752926345
best_error: 8.885442465358095
best_error: 8.885442465245522
best_error: 8.885442462314687
best_error: 8.885442460795687
best_error: 8.885421758730427
best_error: 8.885421758617841
best_error: 8.885421755686558
best_error: 8.8854217541679
best_error: 8.885406517139359
best_error: 8.885406517026762
best_error: 8.885406514095152
best_error: 8.885406512576747
best_error: 8.885393847393873
best_error: 8.88539384728127
best_error: 8.885393844349379
best_error: 8.885393842831188
best_error: 8.885377545353677
best_error: 8.885377545241067
best_error: 8.885377542308824
best_error: 8.885377540790905
best_error: 8.885367197014174
best_error: 8.885367196901555
best_error: 8.885367193969088
best_error: 8.88536719245134
best_error: 8.885342666460055
best_error: 8.88534266634742
best_error: 8.885342663414423
best_error: 8.88534266189708
best_error: 8.885339750665162
best_error: 8.885339750552525
best_error: 8.885339747619465
best_error: 8.885339746102172
best_error: 8.885337663304998
best_error: 8.885337663192363
best_error: 8.885337660259257
best_error: 8.885337658742
best_error: 8.885332935038221
best_error: 8.885332934925582
best_error: 8.885332931992371
best_error: 8.885332930475196
best_error: 8.885330799866892
best_error: 8.88533079975425
best_error: 8.885330796820995
best_error: 8.885330795303851
best_error: 8.885330113716773
best_error: 8.88533011360413
best_error: 8.88533011067086
best_error: 8.88533010915373
best_error: 8.885330039937214
best_error: 8.885329820202415
best_error: 8.885329820089776
best_error: 8.885329817156496
best_error: 8.885329815639373
best_error: 8.885328188111139
best_error: 8.885328187998496
best_error: 8.88532818506518
best_error: 8.885328183548086
