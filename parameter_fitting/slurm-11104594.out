ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 78
days_switch 60
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 103.82460320891784
best_error: 103.82460306697288
best_error: 103.82460303653085
best_error: 18.779318453073735
best_error: 18.779318453069614
best_error: 18.77931844571095
best_error: 18.775084856271388
best_error: 18.77508484879255
best_error: 18.757462854142666
best_error: 18.75746284616898
best_error: 18.673669203536427
best_error: 18.673669192960183
best_error: 17.767563720822753
best_error: 17.767563667449885
best_error: 17.637273434998
best_error: 17.637273372807307
best_error: 16.527918027476396
best_error: 16.527917903831295
best_error: 15.267326255860297
best_error: 15.267326027476942
best_error: 14.03207572779454
best_error: 14.032075380828015
best_error: 11.94728028506539
best_error: 11.947280167986067
best_error: 11.87349861489978
best_error: 11.873498606079059
best_error: 11.87349859121505
best_error: 11.851737223840786
best_error: 11.85173720426522
best_error: 11.846451377861804
best_error: 11.846451362810315
best_error: 11.846451359925307
best_error: 11.82808602640074
best_error: 11.82808600951591
best_error: 11.801648258553247
best_error: 11.801648244890222
best_error: 11.801648241264456
best_error: 11.798457148864033
best_error: 11.798457135559067
best_error: 11.798457131583275
best_error: 11.798382227572265
best_error: 11.798382213966095
best_error: 11.798382210289521
best_error: 11.711222857252121
best_error: 11.711222845086995
best_error: 11.711222841342629
best_error: 11.435479505808829
best_error: 11.435479496463266
best_error: 11.435479495099214
best_error: 11.435479491837912
best_error: 11.254293584140292
best_error: 11.25429358306063
best_error: 11.25429356775233
best_error: 11.244272054107327
best_error: 11.244272053370002
best_error: 11.244272030609679
best_error: 11.207756352485045
best_error: 11.207756350342368
best_error: 11.207756342166531
best_error: 11.207756337363463
best_error: 11.183916682441046
best_error: 11.183916672914965
best_error: 11.1839166709844
best_error: 11.180380446015178
best_error: 11.180380434133628
best_error: 11.169797700832422
best_error: 11.169797689277576
best_error: 11.169797689245158
best_error: 10.872304806628264
best_error: 10.872304764902815
best_error: 10.598931662969026
best_error: 10.598931617688393
best_error: 10.499574438044334
best_error: 10.499574374713099
best_error: 10.310896460200572
best_error: 10.310896442484708
best_error: 10.299116798706388
best_error: 10.299116670837268
best_error: 10.297422466452327
best_error: 10.297422446877441
best_error: 10.29563909620315
best_error: 10.295638973055476
best_error: 10.295059751038828
best_error: 10.295059638512509
best_error: 10.295021319322304
best_error: 10.295021299808255
best_error: 10.295005741254736
best_error: 10.295005721741125
best_error: 10.293814444930401
best_error: 10.293814426293956
best_error: 10.293133860838843
best_error: 10.293133841748523
best_error: 10.29237812145528
best_error: 10.292378101697748
best_error: 10.291907118873022
best_error: 10.291907099117761
best_error: 10.2902350756632
best_error: 10.290235056176686
best_error: 10.28339451743478
best_error: 10.283394497418481
best_error: 10.270744687990922
best_error: 10.270744668089122
best_error: 10.267290453227192
best_error: 10.267290432782028
best_error: 10.264654686461427
best_error: 10.264654666388969
best_error: 10.260535587272715
best_error: 10.260535583548634
best_error: 10.260535541749105
best_error: 10.259993042220291
best_error: 10.259993023078998
best_error: 10.259960600943826
best_error: 10.259960597233052
best_error: 10.259960555310437
best_error: 10.259955028760956
best_error: 10.259955009619606
best_error: 10.259931297417086
best_error: 10.259931278275694
best_error: 10.259928418465613
best_error: 10.259928399324224
best_error: 10.259928392192679
best_error: 10.259928166486546
best_error: 10.2599281627764
best_error: 10.259928120847414
best_error: 10.259769922889031
best_error: 10.25976991959986
best_error: 10.259769871783156
best_error: 10.256713813860806
best_error: 10.25671379301138
best_error: 10.252086567345664
best_error: 10.252086423297772
best_error: 10.25027838922259
best_error: 10.250278369546754
best_error: 10.250245294764696
best_error: 10.250245154774333
best_error: 10.250190710920554
best_error: 10.250190691246871
best_error: 10.250175175485385
best_error: 10.25017503548605
best_error: 10.25016899434178
best_error: 10.250168974668636
best_error: 10.25015779937753
best_error: 10.250157659375965
best_error: 10.228683930368618
best_error: 10.228683916324112
best_error: 10.215205603288705
best_error: 10.215205590253966
best_error: 10.2129139579068
best_error: 10.212913944336595
best_error: 10.20963585462731
best_error: 10.209635839689819
best_error: 10.206329122622579
best_error: 10.206329103823624
best_error: 10.205945840287411
best_error: 10.205945821486335
best_error: 10.205254824855949
best_error: 10.205254808067439
best_error: 10.204945648424005
best_error: 10.204945631906064
best_error: 10.204672298705194
best_error: 10.204672282184063
best_error: 10.204570651665144
best_error: 10.204570635142822
best_error: 10.204568635211896
best_error: 10.204568633012439
best_error: 10.20456858401773
best_error: 10.204503538188852
best_error: 10.204503520829695
best_error: 10.204174238627836
best_error: 10.204174221281228
best_error: 10.200221680841466
best_error: 10.200221673069883
best_error: 10.18560495951163
best_error: 10.185604938795628
best_error: 10.163039493264677
best_error: 10.163039477561462
best_error: 10.162963591843386
best_error: 10.162963576131222
best_error: 10.162959658292394
best_error: 10.162959514804868
best_error: 10.158724233377324
best_error: 10.158724213819314
best_error: 10.154491900170823
best_error: 10.154491884374291
