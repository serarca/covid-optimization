ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.877956493655557
best_error: 10.87795649188463
best_error: 10.398364472143674
best_error: 10.398364453520358
best_error: 9.886460555098529
best_error: 9.886460507957434
best_error: 7.244134237557003
best_error: 7.244134035623567
best_error: 5.738812657507907
best_error: 5.738812576255262
best_error: 5.7388123785013665
best_error: 5.728765023074962
best_error: 5.728764965215793
best_error: 5.728764738708062
best_error: 5.72813752262764
best_error: 5.728137459882059
best_error: 5.728137238899711
best_error: 4.06475751054578
best_error: 4.064757420718292
best_error: 4.064757349317437
best_error: 3.827659173523051
best_error: 3.8276590889942796
best_error: 3.8276590389417002
best_error: 3.717728695333117
best_error: 3.7177286319043814
best_error: 3.517891193432665
best_error: 3.5178911517747684
best_error: 3.5178911434944284
best_error: 3.47060450054286
best_error: 3.4706044894840433
best_error: 3.3415845715017305
best_error: 3.341584565188593
best_error: 3.341584462618262
best_error: 3.3239732627939795
best_error: 3.323973261306066
best_error: 3.3239732314111636
best_error: 3.317765259879134
best_error: 3.317765212267138
best_error: 3.317303116733077
best_error: 3.3173031156710318
best_error: 3.317303111549824
best_error: 3.314048548958437
best_error: 3.314048547827877
best_error: 3.3140485437919134
best_error: 3.2900859869583163
best_error: 3.2900859841575545
best_error: 3.2900859817830033
best_error: 3.2729582807765114
best_error: 3.2729582544563627
best_error: 3.2729581775697674
best_error: 3.2156438845886983
best_error: 3.2156438754967183
best_error: 3.1990512471529184
best_error: 3.199051209585838
best_error: 3.199051126239049
best_error: 3.1455891636696967
best_error: 3.1455891347522935
best_error: 3.145589088500283
best_error: 3.127911342427429
best_error: 3.1279113396354554
best_error: 3.1246083937079967
best_error: 3.1246083912473464
best_error: 3.1220977979824944
best_error: 3.12209779504524
best_error: 3.122097786656913
best_error: 3.1197725939226864
best_error: 3.1197725916192183
best_error: 3.1197725832264425
best_error: 3.1120760370736638
best_error: 3.11207602940798
best_error: 3.1061189312589876
best_error: 3.1061189310886816
best_error: 3.105947397750526
best_error: 3.1059473976568146
best_error: 3.105816984043238
best_error: 3.1058169840282854
best_error: 3.1058169838139746
best_error: 3.105674751282858
best_error: 3.1056747510281477
best_error: 3.1055461490770364
best_error: 3.1055461488768783
best_error: 3.105383352831968
best_error: 3.105383352649625
best_error: 3.105311503417893
best_error: 3.105311503239387
best_error: 3.105257834032884
best_error: 3.105257833848959
best_error: 3.105200519944738
best_error: 3.105200519772281
best_error: 3.105144437773505
best_error: 3.1051444376252832
best_error: 3.1051327256016212
best_error: 3.1051327162126507
best_error: 3.10513264605205
best_error: 3.1050954556420667
best_error: 3.1050954555267136
best_error: 3.105089040394986
best_error: 3.1050890402792177
best_error: 3.1050872474687594
best_error: 3.105087247352869
best_error: 3.105086068809626
best_error: 3.10508606869366
best_error: 3.1050833821932753
best_error: 3.1050833820757795
best_error: 3.105082652010853
best_error: 3.1050826518930115
best_error: 3.1050821824864094
best_error: 3.105082173095735
best_error: 3.105082102926677
best_error: 3.1050165485205348
best_error: 3.1050165484548398
best_error: 3.1049594788773733
best_error: 3.104959469962857
best_error: 3.104959401133523
best_error: 3.104949195252041
best_error: 3.1049491951988877
best_error: 3.1049419412998
best_error: 3.1049419412450314
best_error: 3.104933828533503
best_error: 3.1049338284407475
best_error: 3.104505702429773
best_error: 3.104505691446464
best_error: 3.1045056292515314
best_error: 3.1043145786277515
best_error: 3.104314567828418
best_error: 3.104314503994459
best_error: 3.1036548589111366
best_error: 3.103654857633806
best_error: 3.1030696917153495
best_error: 3.1030696912031295
best_error: 3.1025658653439705
best_error: 3.1024955800738914
best_error: 3.10249558007186
best_error: 3.1024785621060578
best_error: 3.10247856204082
best_error: 3.1024643634340734
best_error: 3.1024643633662956
best_error: 3.102419199173484
best_error: 3.1024191990787946
best_error: 3.102416329672057
best_error: 3.1024163295772116
best_error: 3.102414079117384
best_error: 3.102414079013646
best_error: 3.1024076720394054
best_error: 3.102407671935288
best_error: 3.102402600104866
best_error: 3.10240259999915
best_error: 3.1024024728909585
best_error: 3.1024024727852235
best_error: 3.1024023866616446
best_error: 3.1024023865559056
best_error: 3.102402384467898
best_error: 3.102402384362155
best_error: 3.1024023812482673
best_error: 3.1024023811425243
best_error: 3.1024023707568213
best_error: 3.1024023694359117
best_error: 3.102402369366178
best_error: 3.102402369303101
