ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.681929290645614
best_error: 10.681929269843508
best_error: 10.609816388205877
best_error: 10.609816362619098
best_error: 9.462506807051485
best_error: 9.462506674666072
best_error: 6.49583846189767
best_error: 6.49583800853663
best_error: 4.802083814551437
best_error: 4.80208337568112
best_error: 4.188502287253302
best_error: 4.188502004774355
best_error: 4.0806453045764295
best_error: 4.080645057638903
best_error: 4.011431382086373
best_error: 4.011431152735939
best_error: 3.955981468295197
best_error: 3.9559812490176687
best_error: 3.9238288920877027
best_error: 3.9238286809064817
best_error: 3.9048876812408926
best_error: 3.904887474069322
best_error: 3.8902218513106055
best_error: 3.890221644450086
best_error: 3.882647285734987
best_error: 3.8826470781682634
best_error: 3.876284133236795
best_error: 3.8762839250989156
best_error: 3.873463852245475
best_error: 3.873463643712926
best_error: 3.871003908855136
best_error: 3.8710037012527376
best_error: 3.8695956914824707
best_error: 3.8695954836831925
best_error: 3.869128386206815
best_error: 3.8691281787588956
best_error: 3.8688282465914083
best_error: 3.8688280391015075
best_error: 3.8686175197937223
best_error: 3.8686173122743557
best_error: 3.8684949347117508
best_error: 3.8684947271752375
best_error: 3.868409440946145
best_error: 3.8684092333976814
best_error: 3.86835916248287
best_error: 3.8683589549273756
best_error: 3.868324450878995
best_error: 3.8683242433186495
best_error: 3.868303691279477
best_error: 3.868303483716219
best_error: 3.8682895838910865
best_error: 3.8682893763258663
best_error: 3.7795966645762844
best_error: 3.7795963954136775
best_error: 3.779567087988016
best_error: 3.779566817496316
best_error: 3.75666702316261
best_error: 3.7566667505124944
best_error: 3.7385184446653232
best_error: 3.7385181739365594
best_error: 3.737834454916412
best_error: 3.7378341840980354
best_error: 3.7373035938170753
best_error: 3.7373033229291526
best_error: 3.737281220336878
best_error: 3.737280947077582
best_error: 3.735630463277543
best_error: 3.7356301897993287
best_error: 3.734359380517997
best_error: 3.7343591068712962
best_error: 3.7342000085270954
best_error: 3.7341997348592955
best_error: 3.734145726274976
best_error: 3.734145452599962
best_error: 3.7340994140465726
best_error: 3.7340992529468586
best_error: 3.734078031485052
best_error: 3.7340777578010753
best_error: 3.734072827841702
best_error: 3.7340725541570428
best_error: 3.734070939814874
best_error: 3.7340706661299636
best_error: 3.734069645536923
best_error: 3.7340693718518505
best_error: 3.7340690488656776
best_error: 3.734068775180511
best_error: 3.7340686172656214
best_error: 3.7340683435803905
best_error: 3.73264525522036
best_error: 3.7326449812745848
best_error: 3.726991755254377
best_error: 3.7269914779097486
best_error: 3.7056977918134066
best_error: 3.7056975080588197
best_error: 3.634496985499509
best_error: 3.634496835080843
best_error: 3.6300980410634227
best_error: 3.6300976862902217
best_error: 3.595391530808311
best_error: 3.5953914049749187
best_error: 3.5951949535141736
best_error: 3.595194828381807
best_error: 3.5951112994644987
best_error: 3.5951111736707277
best_error: 3.540101709021112
best_error: 3.5401013765267795
best_error: 3.4287805757927776
best_error: 3.428780439089765
best_error: 3.4212236458309
best_error: 3.421223289050147
best_error: 3.30686518288754
best_error: 3.306864810349593
best_error: 3.301352774995748
best_error: 3.3013526465856824
best_error: 3.2978589298791374
best_error: 3.297858556823896
best_error: 3.2893023613852197
best_error: 3.2893022324826564
best_error: 3.2832402940660135
best_error: 3.2832399276722666
best_error: 3.2795117079152636
best_error: 3.2795115776428116
best_error: 3.2783456832397415
best_error: 3.278345321586725
best_error: 3.2750874873670144
best_error: 3.2750871280883898
best_error: 3.2750403593912587
best_error: 3.2750400030180336
best_error: 3.273236327356719
best_error: 3.273235972722314
best_error: 3.272954693654236
best_error: 3.272954562882321
best_error: 3.2726701559698927
best_error: 3.272669802217454
best_error: 3.2720011188451235
best_error: 3.2720009879783856
best_error: 3.271037150418327
best_error: 3.2710370199580088
best_error: 3.2709122715752565
best_error: 3.2709119178485127
best_error: 3.2674577088243177
best_error: 3.267457578908469
best_error: 3.2624595459582464
best_error: 3.262459420180009
best_error: 3.2620103069359905
best_error: 3.2620099245122276
best_error: 3.258993303629491
best_error: 3.258992917678627
best_error: 3.257317280258551
best_error: 3.257317155847196
best_error: 3.2560936714140194
best_error: 3.2560932837860026
best_error: 3.2559789167044784
best_error: 3.255978529045713
best_error: 3.2559668718709056
best_error: 3.2559667475570944
best_error: 3.255956725800486
best_error: 3.2559563381366945
best_error: 3.2559372982498402
best_error: 3.255936910581662
best_error: 3.255934385741339
best_error: 3.2559339980724964
best_error: 3.255933083948871
best_error: 3.2559326962797237
best_error: 3.2559324112405603
best_error: 3.255932411175461
best_error: 3.2559324109611403
best_error: 3.2559323187863134
best_error: 3.255932307406641
best_error: 3.255932307341536
best_error: 3.2559323071272352
best_error: 3.2559323006129075
best_error: 3.255932219089866
best_error: 3.2559322166804785
best_error: 3.2559322166153692
best_error: 3.255932216401066
best_error: 3.255932210902567
best_error: 3.2559322108374604
best_error: 3.25593221062315
best_error: 3.255932206574026
best_error: 3.255932206508918
best_error: 3.2559322062946237
best_error: 3.2559321989055627
