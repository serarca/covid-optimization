ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 86
days_switch 30
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 96.84060887239542
best_error: 96.84060873581372
best_error: 96.84060873321107
best_error: 96.84060865300083
best_error: 15.838628755183116
best_error: 15.838628755173627
best_error: 15.838628737964761
best_error: 15.81567445190952
best_error: 15.815674434134293
best_error: 15.717334797244174
best_error: 15.71733477736178
best_error: 15.168505285598044
best_error: 15.168505251146739
best_error: 14.37996130067858
best_error: 14.379961258547869
best_error: 13.323551344196932
best_error: 13.323551231453111
best_error: 12.414008703852899
best_error: 12.41400851357139
best_error: 11.251913853374434
best_error: 11.251913577412008
best_error: 10.445544103755633
best_error: 10.445544091497762
best_error: 10.445544077094402
best_error: 9.966041367232242
best_error: 9.96604103631102
best_error: 9.954911396825457
best_error: 9.954911352991058
best_error: 9.9516508169823
best_error: 9.951650718995039
best_error: 9.9109381227
best_error: 9.910938078602666
best_error: 9.768311510257771
best_error: 9.768311468646466
best_error: 9.4882623020771
best_error: 9.4882622731796
best_error: 9.48826226760437
best_error: 9.410900550975398
best_error: 9.410900526149957
best_error: 9.410900512518287
best_error: 9.26168545131688
best_error: 9.26168542975972
best_error: 9.26168542381183
best_error: 9.234148182724763
best_error: 9.234148182724761
best_error: 9.234148179452253
best_error: 9.23414815075904
best_error: 9.230209632525176
best_error: 9.230209617978229
best_error: 9.230209602959217
best_error: 9.132795553333578
best_error: 9.132795553333576
best_error: 9.132795550043232
best_error: 9.132795521942617
best_error: 8.727979239500891
best_error: 8.727979232744273
best_error: 8.727979210232194
best_error: 8.609093954488408
best_error: 8.609093917531476
best_error: 7.99908135684704
best_error: 7.999081334480957
best_error: 7.9932634091795345
best_error: 7.993263384896119
best_error: 7.965452576759705
best_error: 7.965452557968792
best_error: 7.923844905593662
best_error: 7.923844883842954
best_error: 7.887336803688182
best_error: 7.8873367855094045
best_error: 7.839843771644747
best_error: 7.839843766417079
best_error: 7.839843748810648
best_error: 7.819236566034819
best_error: 7.819236547094366
best_error: 7.788071712762866
best_error: 7.7880716958104
best_error: 7.763965523632731
best_error: 7.763965464834092
best_error: 7.755546520378483
best_error: 7.755546369178187
best_error: 7.755539088274934
best_error: 7.755539072924843
best_error: 7.752732297808201
best_error: 7.752732283110177
best_error: 7.737781386331709
best_error: 7.737781377856546
best_error: 7.737781362133411
best_error: 7.690425463149585
best_error: 7.690425456902143
best_error: 7.690425439969459
best_error: 7.6730164252075825
best_error: 7.673016126578647
best_error: 7.655942873188614
best_error: 7.655942720654641
best_error: 7.645589433574695
best_error: 7.645589421757899
best_error: 7.632318167172508
best_error: 7.632318155970059
best_error: 7.632252258962024
best_error: 7.632252101761716
best_error: 7.62396106567432
best_error: 7.623960883435623
best_error: 7.621261188531926
best_error: 7.621260976686738
best_error: 7.618072575448487
best_error: 7.618072361375032
best_error: 7.608414751668959
best_error: 7.6084147438724825
best_error: 7.6084147404031555
best_error: 7.5893566412048115
best_error: 7.589356632717148
best_error: 7.5893566299224915
best_error: 7.563385188996893
best_error: 7.563385175138686
best_error: 7.550579605369156
best_error: 7.550579590442656
best_error: 7.546847555558097
best_error: 7.546847539641835
best_error: 7.543113614125749
best_error: 7.54311359795373
best_error: 7.534550218633466
best_error: 7.534550201812443
best_error: 7.526070736477041
best_error: 7.526070580952071
best_error: 7.521583319502396
best_error: 7.521583302571134
best_error: 7.518889918057774
best_error: 7.518889767178896
best_error: 7.506511329985133
best_error: 7.506511169002217
best_error: 7.468372744041186
best_error: 7.468372539117249
best_error: 7.464948242669369
best_error: 7.46494804341806
best_error: 7.451552467841513
best_error: 7.451552281784798
best_error: 7.440506819274686
best_error: 7.440506799294327
best_error: 7.420058571865214
best_error: 7.420058305553329
best_error: 7.302980477277323
best_error: 7.302980430457808
best_error: 7.297911757117863
best_error: 7.29791158475181
best_error: 7.242204224992076
best_error: 7.242204129926638
best_error: 7.232336344234062
best_error: 7.23233634259561
best_error: 7.232336288566811
best_error: 7.224951583735365
best_error: 7.224951582403883
best_error: 7.224951525693687
best_error: 7.222301737005016
best_error: 7.222301734910497
best_error: 7.2223016858519244
best_error: 7.221867015318436
best_error: 7.22186700130675
best_error: 7.221726570572081
best_error: 7.221726568484517
best_error: 7.221726519290346
best_error: 7.2215337069178815
best_error: 7.221533704779009
best_error: 7.221533656081119
best_error: 7.22152024019946
best_error: 7.221520226134887
best_error: 7.221448122690754
best_error: 7.221448120538193
best_error: 7.221448072004856
best_error: 7.22144728576508
best_error: 7.2214472717032985
best_error: 7.221410973465654
best_error: 7.221410957561449
best_error: 7.220758100833949
best_error: 7.220758052511322
