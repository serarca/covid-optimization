ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.224276531929332
best_error: 9.22427598901482
best_error: 8.185296835236583
best_error: 8.185296578432599
best_error: 7.698555197632956
best_error: 7.6985546336719235
best_error: 6.311180986893788
best_error: 6.31118066521182
best_error: 6.201770101481026
best_error: 6.201769793707534
best_error: 6.134814985427466
best_error: 6.134814681562538
best_error: 6.092102441463769
best_error: 6.092102138277392
best_error: 6.06486646881901
best_error: 6.064866165612289
best_error: 6.0445471280102545
best_error: 6.044546825811068
best_error: 6.032955030987486
best_error: 6.032954729714916
best_error: 6.025194302549902
best_error: 6.025193999988179
best_error: 6.019631438174223
best_error: 6.019631134691058
best_error: 6.01305118293324
best_error: 6.013050878386082
best_error: 6.0110815349592475
best_error: 6.011081230094096
best_error: 6.009930663041304
best_error: 6.009930357990438
best_error: 6.009111704647234
best_error: 6.009111399464256
best_error: 6.008669245404889
best_error: 6.008668940150562
best_error: 6.008332616990884
best_error: 6.008332311682265
best_error: 6.008168750333869
best_error: 6.0081684449988355
best_error: 6.008060042734646
best_error: 6.0080597373820845
best_error: 6.007979237469955
best_error: 6.007978932104348
best_error: 6.007938412865036
best_error: 6.007938107492854
best_error: 6.007907043433454
best_error: 6.007906738056221
best_error: 6.007892148686514
best_error: 6.007891843306883
best_error: 6.0078802116007095
best_error: 6.007879906219157
best_error: 6.007876296218317
best_error: 6.007876054153195
best_error: 5.8576121804423495
best_error: 5.857611851367515
best_error: 5.4742683639501895
best_error: 5.474267875994737
best_error: 5.469141168019881
best_error: 5.469140658127333
best_error: 5.466929176754756
best_error: 5.466928665288625
best_error: 5.458390371824089
best_error: 5.458389848431075
best_error: 5.425276708599484
best_error: 5.425276166903394
best_error: 5.306078908869596
best_error: 5.306078227749289
best_error: 5.184136852320881
best_error: 5.184135991516318
best_error: 5.153273259980329
best_error: 5.153273143718666
best_error: 5.138362534390231
best_error: 5.138361725752182
best_error: 5.1075934753939425
best_error: 5.107593313777473
best_error: 5.099272522453192
best_error: 5.099271842730852
best_error: 5.094778528428844
best_error: 5.094777838475898
best_error: 5.093482074898175
best_error: 5.093481934727579
best_error: 5.0824800011357105
best_error: 5.082479317776912
best_error: 5.081227197276082
best_error: 5.0812265179098315
best_error: 5.080571059380172
best_error: 5.080570381263488
best_error: 5.074859781648388
best_error: 5.074859632390565
best_error: 5.072052439122205
best_error: 5.072051759734826
best_error: 5.0684917548429365
best_error: 5.068491607531129
best_error: 5.067982573013195
best_error: 5.06798189301885
best_error: 5.067930071799675
best_error: 5.067929391797493
best_error: 5.067920621030962
best_error: 5.067919941027367
best_error: 5.067919520354891
best_error: 5.067919373049149
best_error: 5.067919050837644
best_error: 5.067918370834173
best_error: 5.047256734869071
best_error: 5.047256104492435
best_error: 5.04507974390044
best_error: 5.045079111128459
best_error: 5.043557869003882
best_error: 5.043557701164903
best_error: 5.043389139369559
best_error: 5.043388495754751
best_error: 5.043316831485642
best_error: 5.043316661786308
best_error: 5.043293488540197
best_error: 5.043292847192743
best_error: 5.043053650468537
best_error: 5.043053573809338
best_error: 5.042568355134939
best_error: 5.042568187228646
best_error: 5.042528689677171
best_error: 5.042528046063655
best_error: 5.035952942878913
best_error: 5.035952773914849
best_error: 5.034007250237137
best_error: 5.03400660653025
best_error: 5.023724073721823
best_error: 5.0237238990040005
best_error: 5.02125869815673
best_error: 5.021258525562724
best_error: 5.017228535827057
best_error: 5.017228363489389
best_error: 5.016063493977711
best_error: 5.0160633216877795
best_error: 5.0100965200498635
best_error: 5.010096343180623
best_error: 5.005990059999862
best_error: 5.005989882309952
best_error: 5.001377352403164
best_error: 5.001376721256045
best_error: 4.982309903503595
best_error: 4.982309718747462
best_error: 4.975088450382002
best_error: 4.975087833142896
best_error: 4.9711326748875395
best_error: 4.971132479858964
best_error: 4.968876264417858
best_error: 4.968876069564994
best_error: 4.962417215641979
best_error: 4.962416593559082
best_error: 4.94826659968796
best_error: 4.948266407895769
best_error: 4.942211935404966
best_error: 4.942211743604534
best_error: 4.926740196479016
best_error: 4.926739567155653
best_error: 4.926236623138923
best_error: 4.926236443023145
best_error: 4.9199028819918595
best_error: 4.919902702575525
best_error: 4.904092857216135
best_error: 4.904092231346649
best_error: 4.897371988739446
best_error: 4.8973718022883865
best_error: 4.884388147210214
best_error: 4.884387962502938
best_error: 4.883480323004063
best_error: 4.883479712809535
best_error: 4.860757388251631
best_error: 4.8607572043721445
