ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 90
days_switch 5
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 99.14666369231588
best_error: 99.14666352434838
best_error: 99.14666345661661
best_error: 15.027183860643275
best_error: 15.027183860630258
best_error: 15.027183842437664
best_error: 15.00111574735584
best_error: 15.001115744779039
best_error: 15.001115736418287
best_error: 14.949684138478071
best_error: 14.949684135510743
best_error: 14.949684127471205
best_error: 14.668993617228237
best_error: 14.668993604371423
best_error: 14.597211252572937
best_error: 14.597211252561227
best_error: 14.597211252315814
best_error: 14.597211247544163
best_error: 14.504331825359635
best_error: 14.50433182534373
best_error: 14.504331825330999
best_error: 14.504331825136388
best_error: 14.504331824465918
best_error: 14.444224843833863
best_error: 14.444224843658873
best_error: 14.444224843385696
best_error: 14.253803260438374
best_error: 14.253803260293036
best_error: 14.253803260051214
best_error: 14.239620504240023
best_error: 14.23962050414999
best_error: 14.239620504006114
best_error: 14.215081391362137
best_error: 14.215081391291863
best_error: 14.215081391180972
best_error: 13.628619769289108
best_error: 13.628619769239792
best_error: 13.628619762270725
best_error: 13.628619757378157
best_error: 13.620143968664836
best_error: 13.620143968528327
best_error: 13.620143956864007
best_error: 13.476107456433722
best_error: 13.476107456423025
best_error: 13.476107450398999
best_error: 13.476107445977023
best_error: 13.197441069186652
best_error: 13.197441069140297
best_error: 13.197441069022798
best_error: 13.197441068840632
best_error: 13.062023108270688
best_error: 13.062023108004118
best_error: 13.062023107215502
best_error: 13.06202310457815
best_error: 13.025665424831972
best_error: 13.025665424627558
best_error: 13.025665424044735
best_error: 13.02566537303082
best_error: 12.843459083498372
best_error: 12.843459083481887
best_error: 12.843459060333364
best_error: 12.761580199197908
best_error: 12.761580199092275
best_error: 12.761580198818006
best_error: 12.761580184992832
best_error: 12.737937594296854
best_error: 12.737937594260616
best_error: 12.73793759418391
best_error: 12.728400318766404
best_error: 12.728400318734499
best_error: 12.728400318673177
best_error: 12.728400316651244
best_error: 12.721511090776854
best_error: 12.721511090753285
best_error: 12.721511090713214
best_error: 12.721511088676921
best_error: 12.718377955150613
best_error: 12.718377955140674
best_error: 12.718377955124925
best_error: 12.718377952993947
best_error: 12.717987097362906
best_error: 12.71798709734485
best_error: 12.71798709731798
best_error: 12.717987095254237
best_error: 12.717870057606115
best_error: 12.717870057589424
best_error: 12.717870057565651
best_error: 12.717596262432323
best_error: 12.717596262415828
best_error: 12.717596262392593
best_error: 12.717531814540477
best_error: 12.71753181453215
best_error: 12.71753181452003
best_error: 12.71753181409582
best_error: 12.71750922811109
best_error: 12.717509228102443
best_error: 12.717509228089844
best_error: 12.717509227758894
best_error: 12.71749261669488
best_error: 12.717492616686199
best_error: 12.71749261667347
best_error: 12.717492616342671
best_error: 12.717484835798643
best_error: 12.717484835789964
best_error: 12.717484835777167
best_error: 12.717484835446424
best_error: 12.717477104816055
best_error: 12.717477104807342
best_error: 12.717477104794476
best_error: 12.717477104463823
best_error: 12.717472841144424
best_error: 12.717472841135706
best_error: 12.717472841122813
best_error: 12.717472840792201
best_error: 12.717471508634642
best_error: 12.717471508625898
best_error: 12.717471508613006
best_error: 12.717471508282403
best_error: 12.717470742603219
best_error: 12.717470742594474
best_error: 12.717470742581574
best_error: 12.717470742250987
best_error: 12.717470237010003
best_error: 12.717470237001283
best_error: 12.717470236988369
best_error: 12.717470236657775
best_error: 12.717469856050135
best_error: 12.717469856041406
best_error: 12.717469856028499
best_error: 12.717469855697898
best_error: 12.717469643046526
best_error: 12.717469643037806
best_error: 12.717469643024893
best_error: 12.717469642694294
best_error: 12.717469483200126
best_error: 12.717469483191385
best_error: 12.71746948317847
best_error: 12.717469482847887
best_error: 12.717469393056074
best_error: 12.71746939304733
best_error: 12.717469393034424
best_error: 12.717469392703842
best_error: 12.717469333024477
best_error: 12.717469333015732
best_error: 12.717469333002828
best_error: 12.717469332672248
best_error: 12.717469291409627
best_error: 12.717469291400882
best_error: 12.717469291387962
best_error: 12.71746929105739
best_error: 12.7174692639921
best_error: 12.717469263983366
best_error: 12.717469263970457
best_error: 12.717469263639869
best_error: 12.717469242394072
best_error: 12.717469242385322
best_error: 12.717469242372415
best_error: 12.71746924204184
best_error: 12.717469229164971
best_error: 12.71746922915623
best_error: 12.717469229143308
best_error: 12.717469228812735
best_error: 12.717469218526618
best_error: 12.717469218517873
best_error: 12.717469218504972
best_error: 12.717469218174378
best_error: 12.717469213453597
best_error: 12.717469213444858
best_error: 12.717469213431933
best_error: 12.717469213101362
best_error: 12.71746921045151
best_error: 12.717469210442761
best_error: 12.717469210429853
best_error: 12.717469210099273
best_error: 12.71746920794424
best_error: 12.717469207935494
best_error: 12.717469207922592
best_error: 12.717464992287004
best_error: 12.71746499227821
best_error: 12.717464992265167
best_error: 12.717464991934703
best_error: 12.717463426435716
best_error: 12.7174634264269
best_error: 12.71746342641382
best_error: 12.717463426083372
best_error: 12.717462219058438
best_error: 12.717462219049615
best_error: 12.717462219036491
best_error: 12.717462218706096
best_error: 12.71746198801107
best_error: 12.71746198800225
best_error: 12.717461987989132
best_error: 12.71746198765872
best_error: 12.717461827937637
best_error: 12.717461827928792
best_error: 12.717461827915665
best_error: 12.717461827585268
best_error: 12.71746138478178
best_error: 12.717461384772944
best_error: 12.7174613847598
best_error: 12.717461384429413
best_error: 12.717461208651923
best_error: 12.717461208643092
best_error: 12.717461208629931
best_error: 12.717461208299554
best_error: 12.717461148004066
best_error: 12.717461147995236
best_error: 12.717461147982098
best_error: 12.717461147651711
best_error: 12.717461014248128
best_error: 12.71746101423931
best_error: 12.717461014226162
best_error: 12.717461013895774
best_error: 12.717461000283219
best_error: 12.717461000274387
best_error: 12.717461000261231
best_error: 12.717460999930857
best_error: 12.717460990742918
best_error: 12.717460990734091
best_error: 12.717460990720935
best_error: 12.717460990390551
best_error: 12.717460974273056
best_error: 12.71746097426422
best_error: 12.717460974251063
best_error: 12.717460973920682
best_error: 12.717460967729878
best_error: 12.717460967721054
best_error: 12.717460967707888
best_error: 12.717460967377516
best_error: 12.717460964557015
best_error: 12.71746096454818
best_error: 12.717460964535018
best_error: 12.717460964204651
best_error: 12.717460959649225
best_error: 12.717460959640391
best_error: 12.717460959627239
best_error: 12.717460959296861
best_error: 12.717460955197698
best_error: 12.717460955188855
best_error: 12.717460955175701
best_error: 12.717460954845325
best_error: 12.717460954734461
best_error: 12.717460954725631
best_error: 12.717460954712479
best_error: 12.7174609543821
best_error: 12.717460954158284
best_error: 12.717460954030706
