ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.547925345420383
best_error: 10.547925307346787
best_error: 10.547925283614024
best_error: 10.003943249717867
best_error: 10.003943191438374
best_error: 10.003943171345018
best_error: 9.035548887721175
best_error: 9.035548798962092
best_error: 8.902745520388674
best_error: 8.902745427489933
best_error: 8.2331417351861
best_error: 8.23314161392764
best_error: 8.231232635107487
best_error: 8.23123251302843
best_error: 8.19457136466856
best_error: 8.1945712441185
best_error: 7.8071457542949
best_error: 7.807145612508385
best_error: 7.156078730967075
best_error: 7.156078668356764
best_error: 7.156078651682302
best_error: 6.400654585177348
best_error: 6.400654518741073
best_error: 6.400654505516094
best_error: 6.019669913846604
best_error: 6.019669854344436
best_error: 6.01966983590574
best_error: 5.819649919542181
best_error: 5.819649853803064
best_error: 5.819649841186921
best_error: 5.67355611213001
best_error: 5.673556045571219
best_error: 5.673556034754635
best_error: 4.270660949554426
best_error: 4.27066087291068
best_error: 3.782053415371278
best_error: 3.7820528625974275
best_error: 3.649762758617753
best_error: 3.649762226838179
best_error: 3.520242542727365
best_error: 3.5202421000609276
best_error: 3.405258873664023
best_error: 3.405258787117585
best_error: 3.3952346826001354
best_error: 3.395234284231389
best_error: 3.3567718772541553
best_error: 3.35677147919373
best_error: 3.3408807953419704
best_error: 3.340880397579279
best_error: 3.334205131450037
best_error: 3.3342050581368277
best_error: 3.3323434617493084
best_error: 3.3323430630662885
best_error: 3.331947767698625
best_error: 3.3319473689727515
best_error: 3.3318123991160116
best_error: 3.3318120003754848
best_error: 3.3317422567190027
best_error: 3.3317421834399523
best_error: 3.286812289373236
best_error: 3.2868119352343776
best_error: 3.1654217335096027
best_error: 3.165421386340394
best_error: 3.028452373307381
best_error: 3.028452053906746
best_error: 2.9571705759711895
best_error: 2.9571701776940778
best_error: 2.9317998368168765
best_error: 2.931799514419776
best_error: 2.9287089499878967
best_error: 2.928708614430793
best_error: 2.159486167969772
best_error: 2.1594857671713745
best_error: 2.102343303592551
best_error: 2.1023428937178785
best_error: 2.06893944136801
best_error: 2.068939037483479
best_error: 2.0499076465074912
best_error: 2.049907245398818
best_error: 2.0385880725185115
best_error: 2.038587673633006
best_error: 2.031710844445761
best_error: 2.031710446044512
best_error: 2.0274763031715666
best_error: 2.027475904793181
best_error: 2.0248272789828596
best_error: 2.0248268799707487
best_error: 2.022673138677651
best_error: 2.0226727391509893
best_error: 2.0215865036715885
best_error: 2.0215861038856464
best_error: 2.0206912310101988
best_error: 2.020690831010733
best_error: 2.0202972336888436
best_error: 2.0202968336055234
best_error: 2.02000228709705
best_error: 2.0200018869509764
best_error: 2.019847644938574
best_error: 2.019847244759605
best_error: 2.019729623755935
best_error: 2.019729223551864
best_error: 2.019670162438109
best_error: 2.0196697622213726
best_error: 2.0196235280652424
best_error: 2.0196231278385923
best_error: 2.0196013560249035
best_error: 2.0196009557935364
best_error: 2.019583327342003
best_error: 2.0195829271068
best_error: 2.0195792512162547
best_error: 2.0195792511802617
best_error: 2.0195791310597384
best_error: 2.0195780962791647
best_error: 2.0195776960431218
best_error: 1.993798501153726
best_error: 1.9937980948312841
best_error: 1.9068766432189999
best_error: 1.9068762101201746
best_error: 1.6769185695491777
best_error: 1.676918056674595
best_error: 1.6498986645932248
best_error: 1.6498981619553144
best_error: 1.607269674557096
best_error: 1.60726918992941
best_error: 1.5828368187175323
best_error: 1.5828364811929192
best_error: 1.55118315682966
best_error: 1.5511827643812537
best_error: 1.5259280075758375
best_error: 1.5259280075335093
best_error: 1.525927890645429
best_error: 1.4802834792240949
best_error: 1.4802831175032094
best_error: 1.4797237989978282
best_error: 1.4797234372255894
best_error: 1.4793720210077448
best_error: 1.479371659203251
best_error: 1.4792260835700248
best_error: 1.4792257217521354
best_error: 1.4791929034573807
best_error: 1.4791925416364438
best_error: 1.4791844796854308
best_error: 1.4791844796435227
best_error: 1.4791843618013667
best_error: 1.4791753212391856
best_error: 1.4791749594166337
best_error: 1.4791741470849642
best_error: 1.4791741470430864
best_error: 1.4791740292010673
best_error: 1.4579910964037532
best_error: 1.4579907206451461
best_error: 1.441075434465697
best_error: 1.4410754344258578
best_error: 1.441075315949993
best_error: 1.439722611540167
best_error: 1.4397222045360234
best_error: 1.4380698149100954
best_error: 1.4380698148716111
best_error: 1.4380696963799757
best_error: 1.4375130947924002
best_error: 1.437513094753906
best_error: 1.4375129762861045
best_error: 1.4374372532912885
best_error: 1.437437253252817
best_error: 1.4374371348384636
best_error: 1.437265903486134
best_error: 1.4372659034476127
best_error: 1.4372657850822206
best_error: 1.437181685802126
best_error: 1.4371812667377781
best_error: 1.4371463399145912
best_error: 1.437146339876107
best_error: 1.4371462215124877
best_error: 1.4370785898634892
best_error: 1.437078589824957
best_error: 1.4370784714680875
best_error: 1.4368852026514132
best_error: 1.4368847846719257
best_error: 1.4366021544885017
best_error: 1.4366021544501844
best_error: 1.4366020361397678
best_error: 1.4365316965293398
best_error: 1.43653169649081
best_error: 1.4364208413787054
best_error: 1.4364208413401798
best_error: 1.4363827581804807
best_error: 1.436382758142042
best_error: 1.4363785243287177
best_error: 1.4363785242903224
best_error: 1.436378489536342
best_error: 1.4359548376560491
best_error: 1.4359548376176046
best_error: 1.4356564792855826
best_error: 1.4356564792471282
best_error: 1.4353057137487313
best_error: 1.435305294919542
best_error: 1.4344012334124083
best_error: 1.4344012333738851
best_error: 1.4344011150852203
best_error: 1.433990107320601
best_error: 1.433990107281995
best_error: 1.4339899889608123
best_error: 1.433228988602528
best_error: 1.4332285748961473
best_error: 1.4330386108850566
best_error: 1.4330386108464044
best_error: 1.4330384928231599
