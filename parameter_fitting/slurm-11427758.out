ParameterFittingRandomToPython.py:123: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  french_days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values-data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values - data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values - data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:148: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values - data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:148: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values - data[data['reg']==11][data['cl_age90']==0].rea.values
days_ahead 70
days_switch 15
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
best_error: 24.09078830881826
best_error: 24.090788305563645
best_error: 24.090788287889787
best_error: 24.090788245402614
best_error: 2.661562012162542
best_error: 2.6615619465176104
best_error: 2.569610332123182
best_error: 2.569610320678981
best_error: 2.5696103104310093
best_error: 2.5466560592860703
best_error: 2.546656044753039
best_error: 2.5466560389700863
best_error: 2.472483980045743
best_error: 2.4724838629675707
best_error: 2.4143724219450045
best_error: 2.4143722236510867
best_error: 2.218171521751414
best_error: 2.218171365058112
best_error: 2.1831822329755766
best_error: 2.183182230564627
best_error: 2.183182230274586
best_error: 2.1831822208602554
best_error: 2.1610800170707516
best_error: 2.1610799789796666
best_error: 2.126310292875004
best_error: 2.126310292122337
best_error: 2.1263102920633945
best_error: 2.126310290568374
best_error: 2.1263102790200916
best_error: 2.0812512500620106
best_error: 2.081251120747513
best_error: 2.0619999103905284
best_error: 2.0619998945303633
best_error: 2.0270793258307136
best_error: 2.027079308798164
best_error: 2.0227268186962553
best_error: 2.0227267262484867
best_error: 2.019710513617852
best_error: 2.0197104956277303
best_error: 2.0176791186687852
best_error: 2.017679054407638
best_error: 2.0026721612235003
best_error: 2.0026721596256407
best_error: 2.002672158611068
best_error: 2.0026721458390013
best_error: 1.9672132497124406
best_error: 1.9672132273820422
best_error: 1.9068564480734427
best_error: 1.9068564178549232
best_error: 1.803108723511469
best_error: 1.8031087202600387
best_error: 1.8031087181915395
best_error: 1.7855688576981352
best_error: 1.7855687950077546
best_error: 1.7731022964221186
best_error: 1.7731022958992266
best_error: 1.7731022876649933
best_error: 1.771444819156445
best_error: 1.771444808551433
best_error: 1.766311995652781
best_error: 1.766311969899945
best_error: 1.7573539768261943
best_error: 1.7573539340852233
best_error: 1.737845621342716
best_error: 1.7378455636275507
best_error: 1.6914527939287398
best_error: 1.691452793395677
best_error: 1.6914527912016117
best_error: 1.6788282842235114
best_error: 1.6788281724008962
best_error: 1.6571920546619565
best_error: 1.6571920327520575
best_error: 1.6455156219770566
best_error: 1.6455143345826724
best_error: 1.6431090728119089
best_error: 1.6431088863044467
best_error: 1.6431054100898173
best_error: 1.6227430366307496
best_error: 1.622742877938545
best_error: 1.6181030613222618
best_error: 1.6181030597221766
best_error: 1.612080601777439
best_error: 1.612080557439757
best_error: 1.585014952605328
best_error: 1.5850149074706572
best_error: 1.5713303423389746
best_error: 1.5713299620232413
best_error: 1.569399569941564
best_error: 1.5693993340210832
best_error: 1.540761255723819
best_error: 1.5407608089274845
best_error: 1.4023215077571334
best_error: 1.4023212816805184
best_error: 1.3949976625168083
best_error: 1.3949974477907716
best_error: 1.3949552187990037
best_error: 1.3949550040648706
best_error: 1.3512681851168233
best_error: 1.351268085493419
best_error: 1.330100740058179
best_error: 1.330100679315452
best_error: 1.330075174983463
best_error: 1.330075114247199
best_error: 1.3264121799291713
best_error: 1.326412130009596
best_error: 1.3245204932271477
best_error: 1.324520301847587
best_error: 1.324506805651882
best_error: 1.3178489397069169
best_error: 1.3178489200401413
best_error: 1.3152951421481982
best_error: 1.315295072513646
best_error: 1.3150996219880327
best_error: 1.3150995575639197
best_error: 1.31236657113895
best_error: 1.3123665419155075
best_error: 1.3077826600095757
best_error: 1.3077826510632875
best_error: 1.3076203192258236
best_error: 1.3076203128346853
best_error: 1.307035340749946
best_error: 1.3070353406283446
best_error: 1.3070353397684433
best_error: 1.307035338065199
best_error: 1.30643380306407
best_error: 1.3064338029476728
best_error: 1.3064338020345536
best_error: 1.3064338003846843
best_error: 1.3026741524158603
best_error: 1.3026741523931777
best_error: 1.3026741505212867
best_error: 1.3026741497462349
best_error: 1.3020350029990464
best_error: 1.3020350004323364
best_error: 1.3020350003297079
best_error: 1.3014135744268387
best_error: 1.3014135681973968
best_error: 1.3009090569933832
best_error: 1.3009090545276956
best_error: 1.3009090544508366
best_error: 1.2999377442564946
best_error: 1.2999377415824092
best_error: 1.298514781240099
best_error: 1.2985147812337232
best_error: 1.298514779199906
best_error: 1.2985147788994502
best_error: 1.2900012536943963
best_error: 1.2900012496765998
best_error: 1.2898935087452514
best_error: 1.2898935008105352
best_error: 1.2898647091302538
best_error: 1.2898647017305536
best_error: 1.2897566060874863
best_error: 1.289756598210264
best_error: 1.2894026896521873
best_error: 1.2894026868202075
best_error: 1.2891320245428355
best_error: 1.289132024357587
best_error: 1.2888167680234937
best_error: 1.2888167679024003
best_error: 1.2887077634256767
best_error: 1.2887077632600283
best_error: 1.2886932266142972
best_error: 1.2886932266121511
best_error: 1.2886932264481288
best_error: 1.288693021865689
best_error: 1.2886930218589783
best_error: 1.288693021708299
best_error: 1.2886924367518182
best_error: 1.288692436746141
best_error: 1.288692436586027
best_error: 1.2886924088621612
best_error: 1.2886924088574891
best_error: 1.2886924087048317
best_error: 1.2886923877771548
best_error: 1.2886923877731673
best_error: 1.2886923876198213
best_error: 1.2886923747260106
best_error: 1.2886923747213688
best_error: 1.288692374568631
best_error: 1.2886923669187527
best_error: 1.2886923669130996
best_error: 1.2886923667529582
best_error: 1.2886923438355062
best_error: 1.2886923438308586
best_error: 1.288692343677798
best_error: 1.2886923057679667
best_error: 1.2886923057640296
best_error: 1.2886923056105481
best_error: 1.2886921050731457
best_error: 1.2886921050692124
best_error: 1.2886921049157578
best_error: 1.2886919060264972
best_error: 1.2886919058769515
best_error: 1.2886917550052066
best_error: 1.2886917550030297
best_error: 1.288691754855835
best_error: 1.2886916803627653
best_error: 1.2886916803606219
best_error: 1.2886916802133266
best_error: 1.288691474653361
best_error: 1.2886914745203706
best_error: 1.2886913614535473
best_error: 1.288691361320612
best_error: 1.2886913363243033
best_error: 1.2886913361830352
best_error: 1.2886912615608075
best_error: 1.288691261419501
best_error: 1.288691207973909
best_error: 1.2886912078328112
best_error: 1.2886911941844386
best_error: 1.2886911940514298
best_error: 1.2886905811198366
best_error: 1.2886905809867952
best_error: 1.2886863174708216
best_error: 1.2886863173049128
best_error: 1.288680682174901
best_error: 1.2886806820086008
best_error: 1.2886600810765603
best_error: 1.288660080892943
best_error: 1.288538827744913
best_error: 1.2885388236032502
best_error: 1.2884115897226278
best_error: 1.2884115857694847
best_error: 1.287979991998572
best_error: 1.2879799872540634
best_error: 1.2871342006990523
best_error: 1.2871342003907262
best_error: 1.2871342000092547
best_error: 1.2868402460095192
best_error: 1.286840245983162
best_error: 1.2868402452838725
best_error: 1.2858512015798576
best_error: 1.2858512008890788
best_error: 1.285465697240592
best_error: 1.2854656971867628
best_error: 1.2854656966546918
best_error: 1.285211566201098
best_error: 1.2852115641445545
best_error: 1.2847870912426504
best_error: 1.2847870772669086
best_error: 1.2836590510377672
best_error: 1.283659023331368
best_error: 1.2822758831489822
best_error: 1.2822757972468344
best_error: 1.2822724750749317
best_error: 1.2786846403331713
best_error: 1.2786846398582514
best_error: 1.2786846395180471
best_error: 1.268980915821856
best_error: 1.2689809152315406
best_error: 1.2689809146217363
best_error: 1.256931155145172
best_error: 1.2569310535854703
best_error: 1.2569268415990493
best_error: 1.2569152421052379
best_error: 1.2569151410147628
best_error: 1.2569109598981671
best_error: 1.249774976807854
best_error: 1.2497749373748537
best_error: 1.2323607810059467
best_error: 1.2323606285982844
best_error: 1.2323514678200695
best_error: 1.2323422212425361
best_error: 1.230121230904612
best_error: 1.2301212292521462
best_error: 1.2301212292300379
best_error: 1.2276418071340915
best_error: 1.2276417397020014
best_error: 1.2235877427100947
best_error: 1.2235876082039414
best_error: 1.2235807771936102
best_error: 1.2235697547804678
best_error: 1.2188964478979962
best_error: 1.2188964373298887
best_error: 1.2174380198717392
best_error: 1.2174380155926752
best_error: 1.2173852223862054
best_error: 1.2173852202131297
best_error: 1.217372060792088
best_error: 1.2173720557911631
best_error: 1.2173701776204948
best_error: 1.2173701721190273
best_error: 1.217369201429119
best_error: 1.217369195297112
best_error: 1.2173628958283105
best_error: 1.217362888737274
best_error: 1.2173507278662816
best_error: 1.2173507166227229
best_error: 1.2173345347090838
best_error: 1.217334523726357
best_error: 1.2172726349095606
best_error: 1.2172726251571313
best_error: 1.2170650219611021
best_error: 1.2170650166023735
best_error: 1.2168526261183905
best_error: 1.216852626039277
best_error: 1.2168526257566439
best_error: 1.2168466532696733
best_error: 1.216846653196548
best_error: 1.216846652892806
