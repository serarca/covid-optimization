ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 88
days_switch 75
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 97.31332042025255
best_error: 97.31332031695293
best_error: 97.31332028807395
best_error: 14.481456718886664
best_error: 14.481456718874705
best_error: 14.481456693925615
best_error: 14.348776182320902
best_error: 14.348776182307876
best_error: 14.348776152938596
best_error: 13.401165596311898
best_error: 13.401165596211655
best_error: 13.401165516455542
best_error: 13.168173925081595
best_error: 13.168173924922122
best_error: 13.168173830494087
best_error: 12.873979265473928
best_error: 12.87397926521495
best_error: 12.873979150987378
best_error: 12.167130029298367
best_error: 12.167130027913938
best_error: 12.16713000166556
best_error: 12.130502163600656
best_error: 12.130502161617633
best_error: 12.13050216120579
best_error: 12.130502126362028
best_error: 12.11402807099275
best_error: 12.114028063981689
best_error: 12.026851919768218
best_error: 12.026851912589226
best_error: 11.999842543847272
best_error: 11.999842534094066
best_error: 11.989569105350158
best_error: 11.989569095099341
best_error: 11.98073731720635
best_error: 11.980737306521126
best_error: 11.97848082989115
best_error: 11.97848081944899
best_error: 11.78821752771687
best_error: 11.788217516754738
best_error: 11.760818703997787
best_error: 11.760818692716025
best_error: 11.732910620793824
best_error: 11.732910609215033
best_error: 11.705429967089279
best_error: 11.705429955660946
best_error: 11.397934590470323
best_error: 11.397934590470246
best_error: 11.397934589016232
best_error: 11.397934576069247
best_error: 10.872109547426705
best_error: 10.872109534301618
best_error: 10.872109522324127
best_error: 10.156285101867132
best_error: 10.156285049942548
best_error: 9.57227843713336
best_error: 9.57227838971426
best_error: 9.480093557955282
best_error: 9.48009355795328
best_error: 9.48009354896595
best_error: 9.480093541080443
best_error: 9.378339896266441
best_error: 9.378339889418763
best_error: 9.378339887638242
best_error: 9.378339875626443
best_error: 9.068140636191266
best_error: 9.06814063618418
best_error: 9.068140624539742
best_error: 9.068140617105868
best_error: 8.844187049962311
best_error: 8.84418704994069
best_error: 8.844187035770933
best_error: 8.844187031330476
best_error: 8.677501829996292
best_error: 8.677501774637042
best_error: 8.29131516422402
best_error: 8.29131510047517
best_error: 8.206894080840879
best_error: 8.206894044165397
best_error: 8.125956838203962
best_error: 8.12595678800751
best_error: 8.04609438826689
best_error: 8.04609382203537
best_error: 7.903369505136707
best_error: 7.903369230064584
best_error: 7.462171534558635
best_error: 7.462171400444824
best_error: 7.261473087156435
best_error: 7.2614730592004015
best_error: 7.013910415731688
best_error: 7.013910379434208
best_error: 7.010836442411372
best_error: 7.010836404547777
best_error: 7.009594549629535
best_error: 7.009594511721106
best_error: 7.009308245889954
best_error: 7.009308207978897
best_error: 7.002915250785112
best_error: 7.002915105606004
best_error: 6.812580803610984
best_error: 6.812580509509418
best_error: 6.491435404682036
best_error: 6.49143517828582
best_error: 6.461561294216237
best_error: 6.461561270824356
best_error: 6.459321732834879
best_error: 6.45932170587724
best_error: 6.425918543289519
best_error: 6.4259185316556415
best_error: 6.410894880462267
best_error: 6.410894806274605
best_error: 6.41013051180629
best_error: 6.4101305014797845
best_error: 6.407762390280658
best_error: 6.407762379629041
best_error: 6.406888963771492
best_error: 6.406888921181101
best_error: 6.404396119633065
best_error: 6.4043960753097435
best_error: 6.403124538389756
best_error: 6.403124492280707
best_error: 6.402457937931022
best_error: 6.402457891854385
best_error: 6.402385929604786
best_error: 6.402385883531658
best_error: 6.402384488889215
best_error: 6.402384354226673
best_error: 6.310387043141196
best_error: 6.310386892695505
best_error: 6.301960148689099
best_error: 6.3019600744659705
best_error: 6.2851743895507495
best_error: 6.285174322541837
best_error: 6.28196422155568
best_error: 6.281964103957174
best_error: 6.271500556888866
best_error: 6.271500438035781
best_error: 6.26753256730302
best_error: 6.267532499883152
best_error: 6.263822575997629
best_error: 6.263822365061082
best_error: 6.231752391227006
best_error: 6.231752356343356
best_error: 6.231752291871965
best_error: 6.231150361662384
best_error: 6.231150234283557
best_error: 6.209100275125217
best_error: 6.209100239162444
best_error: 6.209100187550543
best_error: 6.178551585860479
best_error: 6.178551577543309
best_error: 6.178551367431209
best_error: 6.173868973240633
best_error: 6.173868874820748
best_error: 6.169226369144481
best_error: 6.169226270816633
best_error: 6.16698416577007
best_error: 6.166983462449354
best_error: 6.1599157228237615
best_error: 6.15991565463807
best_error: 6.157446916102357
best_error: 6.15744684812358
best_error: 6.157103039979493
best_error: 6.157102820971964
best_error: 6.15679169602596
best_error: 6.156791465283769
best_error: 6.156748905663333
best_error: 6.156748674899084
best_error: 6.1567228389243125
best_error: 6.156722608146622
best_error: 6.156695319150057
best_error: 6.156695088358199
best_error: 6.15668329894464
best_error: 6.156683068146586
best_error: 6.156675797092216
best_error: 6.156675566290298
best_error: 6.156668090029423
best_error: 6.156667859223545
best_error: 6.1566645982812735
best_error: 6.156664367473583
