ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.761616715021155
best_error: 9.761616682767867
best_error: 9.761616649905411
best_error: 7.745238436500037
best_error: 7.74523823374682
best_error: 3.1325250741829986
best_error: 3.132524669659765
best_error: 3.103244435745129
best_error: 3.103244434708608
best_error: 3.0270431747507436
best_error: 3.027042787365131
best_error: 2.9949529951632377
best_error: 2.9949529941460136
best_error: 2.9822164559002324
best_error: 2.9822160721348228
best_error: 2.9819125578141916
best_error: 2.9819121740229546
best_error: 2.981742792610709
best_error: 2.9817424088050304
best_error: 2.981692790188711
best_error: 2.9816927891732226
best_error: 2.939169849038535
best_error: 2.9391694783152156
best_error: 2.893499108698011
best_error: 2.89349879383855
best_error: 2.8852759117619504
best_error: 2.8852755951641074
best_error: 2.8533842023446807
best_error: 2.853383881504816
best_error: 2.7361670141556305
best_error: 2.7361666767135873
best_error: 2.7029307572915906
best_error: 2.7029303968457645
best_error: 2.5275939456060543
best_error: 2.527593546576864
best_error: 2.410040692255591
best_error: 2.410040260499403
best_error: 2.3267150403816457
best_error: 2.3267150392811757
best_error: 2.3267149796360314
best_error: 2.2966645872118434
best_error: 2.2966641771491236
best_error: 2.2905760835055835
best_error: 2.2905756731851725
best_error: 2.287088014164677
best_error: 2.28708760456317
best_error: 2.28509991029422
best_error: 2.2850995004076298
best_error: 2.2839945256881338
best_error: 2.28399411634289
best_error: 2.283392414885092
best_error: 2.2833920065299527
best_error: 2.283081415141713
best_error: 2.283081006744291
best_error: 2.2828573388566635
best_error: 2.282856930428773
best_error: 2.2827597477772006
best_error: 2.282759339336054
best_error: 2.2827336667730584
best_error: 2.2827332583283635
best_error: 2.2827180495455064
best_error: 2.282717641098693
best_error: 2.2827168030478413
best_error: 2.282716394600842
best_error: 2.2827158649977655
best_error: 2.2827157199224435
best_error: 2.282715712229467
best_error: 2.282715695760701
best_error: 2.2827156603883965
best_error: 2.2827156345567072
best_error: 2.282715632273188
best_error: 2.282715596941454
best_error: 2.2790114476828314
best_error: 2.2790114465878566
best_error: 2.2790113874326625
best_error: 2.265519694734002
best_error: 2.2655193019080375
best_error: 2.2526028881368574
best_error: 2.2526025437195063
best_error: 2.2515249207993264
best_error: 2.2515245691876613
best_error: 2.251457629896996
best_error: 2.2514572758613927
best_error: 2.251381307529235
best_error: 2.251380953411771
best_error: 2.251102277951909
best_error: 2.251101922886325
best_error: 2.249305347598926
best_error: 2.249304984623401
best_error: 2.24869807062083
best_error: 2.2486977055485076
best_error: 2.2481752408442937
best_error: 2.2481748755272593
best_error: 2.247894678975829
best_error: 2.2478943135337492
best_error: 2.2476475035852244
best_error: 2.247647137300069
best_error: 2.2475426249014774
best_error: 2.24754225857144
best_error: 2.247474104396708
best_error: 2.2474737380376455
best_error: 2.247432499437144
best_error: 2.247432133060541
best_error: 2.2474056249674943
best_error: 2.247405258579594
best_error: 2.247374486328509
best_error: 2.2473741199281614
best_error: 2.247369142544246
best_error: 2.2473687761417542
best_error: 2.2473665888401406
best_error: 2.247366222436637
best_error: 2.247364838530161
best_error: 2.247364472125957
best_error: 2.247363962142116
best_error: 2.247363595737558
best_error: 2.247362971430171
best_error: 2.2473626050252076
best_error: 2.2463884867151367
best_error: 2.246388122334256
best_error: 2.245671642568766
best_error: 2.2456712875331064
best_error: 2.244971411977728
best_error: 2.244971056835478
best_error: 2.2445379591032912
best_error: 2.244537603895373
best_error: 2.2442690547691795
best_error: 2.2442686995206236
best_error: 2.2441018481658284
best_error: 2.244101492892052
best_error: 2.2439976635736603
best_error: 2.2439973093440693
best_error: 2.243932347112154
best_error: 2.243931992872707
best_error: 2.2438906870644675
best_error: 2.243890332818761
best_error: 2.243863667894219
best_error: 2.243863313644429
best_error: 2.2438398971164375
best_error: 2.2438395428626623
best_error: 2.2438246275031495
best_error: 2.2438242732468305
best_error: 2.2438145786287285
best_error: 2.2438142243707144
best_error: 2.243807756606898
best_error: 2.2438074023477577
best_error: 2.2438029850209062
best_error: 2.243802630760954
best_error: 2.2438004943633447
best_error: 2.2438001401029743
best_error: 2.2437984253395653
best_error: 2.2437980710788574
best_error: 2.2437960821836653
best_error: 2.2437957279226204
best_error: 2.2437955216868897
best_error: 2.243795472273624
best_error: 2.2425944372580187
best_error: 2.242594436941565
best_error: 2.242594377669189
best_error: 2.2381008261213555
best_error: 2.238100825446535
best_error: 2.2374020787550295
best_error: 2.2374017366946988
best_error: 2.2357053447994177
best_error: 2.2357050026289222
best_error: 2.2356431256277407
best_error: 2.235642783454942
best_error: 2.235620577629583
best_error: 2.2356202354559676
best_error: 2.2356108510735315
best_error: 2.23561050889957
best_error: 2.2356062404986456
best_error: 2.235605898324505
best_error: 2.235603964825053
best_error: 2.2356036226508387
best_error: 2.2356026308737262
best_error: 2.235602288699379
best_error: 2.2356019051466163
best_error: 2.235601870513757
best_error: 2.2356018586000816
best_error: 2.2356018392575527
best_error: 2.2356018046247
best_error: 2.2356017927110177
best_error: 2.2356017841060174
best_error: 2.235601778625055
best_error: 2.2356017781740096
best_error: 2.23503625383892
best_error: 2.2350362535436443
best_error: 2.2347741239783643
best_error: 2.234773779742362
best_error: 2.234371515883868
best_error: 2.2343711715360426
best_error: 2.2343635872889234
best_error: 2.234363242939698
best_error: 2.234351461613584
best_error: 2.234351461384809
best_error: 2.2343514022234228
best_error: 2.2343507783910717
best_error: 2.2343504340397073
best_error: 2.2343498332716996
best_error: 2.2343497856997314
best_error: 2.2343496083117556
best_error: 2.234349573954174
best_error: 2.234349540609167
best_error: 2.234349540381328
best_error: 2.234349523436709
best_error: 2.2343495210827315
