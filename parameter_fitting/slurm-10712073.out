ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.222375520821597
best_error: 10.222375454146341
best_error: 9.117013895761982
best_error: 9.11701374764489
best_error: 6.197757839111089
best_error: 6.197757476836317
best_error: 5.107515763083965
best_error: 5.107515410833596
best_error: 4.633899096541574
best_error: 4.633898774659194
best_error: 4.419092203286486
best_error: 4.419091878558076
best_error: 4.2811950581113525
best_error: 4.2811947303888385
best_error: 4.243686757711679
best_error: 4.243686431116544
best_error: 4.232873946052438
best_error: 4.232873618099594
best_error: 4.231141619263487
best_error: 4.2311412910934605
best_error: 4.230183504545785
best_error: 4.2301831762556565
best_error: 4.229508360354311
best_error: 4.229508031978278
best_error: 4.229267809105087
best_error: 4.229267480698438
best_error: 4.229111780548056
best_error: 4.229111452121558
best_error: 4.229041200911592
best_error: 4.229040872476106
best_error: 4.228989347837467
best_error: 4.228989019395382
best_error: 4.228988295156957
best_error: 4.228988178133502
best_error: 4.2289855752272
best_error: 4.228985246784641
best_error: 4.228980759321454
best_error: 4.228980430878286
best_error: 4.228980091600515
best_error: 4.228979763157257
best_error: 4.228979649618557
best_error: 4.228979462981269
best_error: 4.228979454047034
best_error: 4.228979346620034
best_error: 4.22897934624116
best_error: 4.2289793016707495
best_error: 4.228978598117637
best_error: 4.228978597738775
best_error: 4.228978553168337
best_error: 4.228975604108196
best_error: 4.22897560372933
best_error: 4.228975559158816
best_error: 4.228965674026113
best_error: 4.228965557002651
best_error: 4.228888216947358
best_error: 4.228888099923169
best_error: 4.228578468892836
best_error: 4.228578351866088
best_error: 4.227340761190142
best_error: 4.227340644152998
best_error: 4.2224105047539116
best_error: 4.222410387675458
best_error: 4.203221756362286
best_error: 4.2032216406288105
best_error: 4.135972165580039
best_error: 4.135972055754704
best_error: 4.125121116851104
best_error: 4.125120752361086
best_error: 3.8048679424531433
best_error: 3.8048678496965325
best_error: 3.7285772781996736
best_error: 3.728577200418939
best_error: 3.6900446647664467
best_error: 3.6900440781561192
best_error: 3.6830693441051907
best_error: 3.6830693007104953
best_error: 3.6693290062359005
best_error: 3.6693284008141798
best_error: 3.66549112491745
best_error: 3.6654910770407865
best_error: 3.6639801531404643
best_error: 3.6639795407114724
best_error: 3.661748520621145
best_error: 3.66174847282062
best_error: 3.6615991748940857
best_error: 3.661598561961135
best_error: 3.6596140364634895
best_error: 3.659613986265355
best_error: 3.6561046043406646
best_error: 3.6561045478872556
best_error: 3.6559119554372304
best_error: 3.655911375928442
best_error: 3.647216449905594
best_error: 3.647215898422367
best_error: 3.6024023732975383
best_error: 3.602402311347798
best_error: 3.6024022826755835
best_error: 3.602376624485727
best_error: 3.602376058558563
best_error: 3.5576948446584646
best_error: 3.557694321907367
best_error: 3.3888347739711877
best_error: 3.3888343641464065
best_error: 3.3526802420611936
best_error: 3.3526798339516164
best_error: 3.3178042600896394
best_error: 3.3178038575285442
best_error: 3.290833916310733
best_error: 3.290833516970543
best_error: 3.276457411026299
best_error: 3.2764570130185753
best_error: 3.2685675960322307
best_error: 3.2685671991641616
best_error: 3.264253006040378
best_error: 3.2642526093105992
best_error: 3.2618897676161414
best_error: 3.2618893706825345
best_error: 3.2605965095156604
best_error: 3.2605961124706804
best_error: 3.2604433467559955
best_error: 3.2604429496956104
best_error: 3.260427955905082
best_error: 3.2604275588431593
best_error: 3.2604174514120094
best_error: 3.2604170543490296
best_error: 3.2604126343040827
best_error: 3.2604122372406223
best_error: 3.260409015878361
best_error: 3.2604086188145374
best_error: 3.2604082688087153
best_error: 3.2604082644706187
best_error: 3.2604082528350906
best_error: 3.260408241776953
best_error: 3.260408240265614
best_error: 3.26040823790082
best_error: 3.2598051280130402
best_error: 3.259804724634481
best_error: 3.259662838874158
best_error: 3.259662437162474
best_error: 3.2596327074255296
best_error: 3.2596323045858746
best_error: 3.2596043444022644
best_error: 3.2596039422200502
best_error: 3.25949478007624
best_error: 3.2594943779353773
best_error: 3.2593842754649063
best_error: 3.2593838736868115
best_error: 3.258942900812687
best_error: 3.2589425001381684
best_error: 3.258665426989312
best_error: 3.2586650264134773
best_error: 3.258498138991163
best_error: 3.2584977384735385
best_error: 3.2582316760697507
best_error: 3.2582312756428875
best_error: 3.25813872971207
best_error: 3.2581383293163158
best_error: 3.2580981543342338
best_error: 3.258097753951974
best_error: 3.2579640421255456
best_error: 3.257963641746695
best_error: 3.2579604797541215
best_error: 3.2579604482973847
best_error: 3.2579603937280415
best_error: 3.257957222388452
best_error: 3.2579568220097683
best_error: 3.25794235685907
best_error: 3.257941956480745
best_error: 3.257940429179097
best_error: 3.2579400288008165
best_error: 3.257939612985991
best_error: 3.257939212607724
best_error: 3.2579390851586885
best_error: 3.2579386847804246
best_error: 3.257938319416737
best_error: 3.2579381022714404
best_error: 3.2579380897598593
best_error: 3.2579380884052793
best_error: 3.257938087042862
best_error: 3.257938083822353
best_error: 3.2579380757653094
best_error: 3.257867765627469
best_error: 3.257867365107128
best_error: 3.2576041499287802
best_error: 3.2576037475780035
best_error: 3.2575767456930453
best_error: 3.257576340243813
best_error: 3.257522604154775
best_error: 3.257522200190568
best_error: 3.255608023811596
best_error: 3.255607619622249
best_error: 3.2555311416912813
best_error: 3.2555307374929257
best_error: 3.255524998972505
best_error: 3.2555249669925317
best_error: 3.2555249127756865
best_error: 3.2543689139968057
best_error: 3.254368502894328
best_error: 3.2533890253978517
best_error: 3.253388611165891
best_error: 3.25332796758158
best_error: 3.2533275516056777
best_error: 3.2529900043446265
best_error: 3.2529899716612745
best_error: 3.252989917620935
best_error: 3.252537985904606
best_error: 3.252537569828691
best_error: 3.2524550489584616
best_error: 3.2524550162762456
best_error: 3.25245496224123
best_error: 3.2524523466448327
best_error: 3.252451928139299
best_error: 3.252015768277349
best_error: 3.2520153496596524
best_error: 3.2518163132612776
best_error: 3.2518158938395034
best_error: 3.2516880559839554
best_error: 3.251687636532064
best_error: 3.2516817137415552
best_error: 3.25168168210421
best_error: 3.251681626923353
best_error: 3.251675802887476
best_error: 3.251675383438119
best_error: 3.251668625207129
best_error: 3.251668600558971
best_error: 3.2516683049938973
best_error: 3.2516682803458012
best_error: 3.2516682661029996
best_error: 3.2516682344618903
