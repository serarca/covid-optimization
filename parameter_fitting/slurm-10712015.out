ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 15.562877103851402
best_error: 15.56287689307173
best_error: 12.935251630606105
best_error: 12.935251627397658
best_error: 12.93525161634782
best_error: 12.875851358821155
best_error: 12.875851355205548
best_error: 12.87585135114578
best_error: 12.548408134781674
best_error: 12.548408128739277
best_error: 12.548408123055959
best_error: 12.522066510716355
best_error: 12.522066403356224
best_error: 12.135461929339039
best_error: 12.135461919929096
best_error: 12.135461912610749
best_error: 11.336986645217383
best_error: 11.336986634787587
best_error: 11.000329244121605
best_error: 11.000329220099934
best_error: 10.044435404054438
best_error: 10.044435281635518
best_error: 9.789866215320771
best_error: 9.78986606278627
best_error: 8.751958184985568
best_error: 8.751957920684706
best_error: 7.589298984162939
best_error: 7.589298604786249
best_error: 5.970616394555627
best_error: 5.970616055984787
best_error: 5.438490447647054
best_error: 5.43849014966179
best_error: 5.245857731202568
best_error: 5.245857455698562
best_error: 5.1857154273249835
best_error: 5.185715151239297
best_error: 5.143724410998033
best_error: 5.143724132996888
best_error: 5.122155319885017
best_error: 5.122155038813038
best_error: 5.106002203117579
best_error: 5.106001919758689
best_error: 5.098513877363423
best_error: 5.098513592948067
best_error: 5.092596197703585
best_error: 5.092595912454985
best_error: 5.09252817261258
best_error: 5.092528066002797
best_error: 5.092474296384461
best_error: 5.092474011118721
best_error: 5.092463868385682
best_error: 5.092463583118464
best_error: 5.092460673759589
best_error: 5.0924603884919275
best_error: 5.0924589999226475
best_error: 5.092458714654749
best_error: 5.092458028309732
best_error: 5.092457743041711
best_error: 5.092457469622238
best_error: 5.092457184354124
best_error: 5.0924571233494325
best_error: 5.092456838081269
best_error: 5.092454451069611
best_error: 5.092454165801147
best_error: 5.0924445167812955
best_error: 5.09244423151177
best_error: 5.09240478031845
best_error: 5.092404495044616
best_error: 5.0922458455126804
best_error: 5.092245560221597
best_error: 5.091610283017282
best_error: 5.091609997657253
best_error: 5.089071380477463
best_error: 5.089071094793469
best_error: 5.0789939053269695
best_error: 5.078993618547003
best_error: 5.040261677082045
best_error: 5.04026138580787
best_error: 4.738575067441263
best_error: 4.738574719927631
best_error: 4.680868632596521
best_error: 4.680868177719978
best_error: 4.6276532498582
best_error: 4.627652850268165
best_error: 4.598165085106737
best_error: 4.598164695944864
best_error: 4.555084191634242
best_error: 4.555083804221392
best_error: 4.537389839550636
best_error: 4.5373894502183845
best_error: 4.532435908598591
best_error: 4.532435521554067
best_error: 4.529235168244455
best_error: 4.529234782139023
best_error: 4.526964319552766
best_error: 4.526963933107058
best_error: 4.52543138165179
best_error: 4.525430996046621
best_error: 4.5247282011484735
best_error: 4.524727815437922
best_error: 4.524203426493928
best_error: 4.524203040704764
best_error: 4.524104667963707
best_error: 4.5241042821597315
best_error: 4.52408335076599
best_error: 4.52408296495882
best_error: 4.524070863374501
best_error: 4.524070477565448
best_error: 4.524064511279448
best_error: 4.524064125469471
best_error: 4.524060287340604
best_error: 4.524059901529971
best_error: 4.524058333743646
best_error: 4.524057947932727
best_error: 4.524056891502799
best_error: 4.524056505691673
best_error: 4.507410590173017
best_error: 4.50741018653815
best_error: 4.479765141124463
best_error: 4.479764719184729
best_error: 4.47797255658832
best_error: 4.4779721339272776
best_error: 4.477886445838892
best_error: 4.477886341747052
best_error: 4.477745267910846
best_error: 4.477744845158255
best_error: 4.477145738219981
best_error: 4.47714531522585
best_error: 4.477092258939145
best_error: 4.477091835923737
best_error: 4.477046355758637
best_error: 4.477045932724975
best_error: 4.477009409583683
best_error: 4.4770089865353215
best_error: 4.476986184463754
best_error: 4.476985761406155
best_error: 4.476974866205029
best_error: 4.476974443142925
best_error: 4.476973421252278
best_error: 4.476972998189595
best_error: 4.476972271401008
best_error: 4.476971848337884
best_error: 4.476971242295747
best_error: 4.476970819232211
best_error: 4.476970357581133
best_error: 4.476969934517255
best_error: 4.476969764699606
best_error: 4.476969341635479
best_error: 4.476969165745144
best_error: 4.476848608663336
best_error: 4.476848184264601
best_error: 4.476843249219934
best_error: 4.476842824781395
best_error: 4.476595803882024
best_error: 4.47659537874947
best_error: 4.474301133845493
best_error: 4.474300705432734
best_error: 4.466265674877767
best_error: 4.4662652461338235
best_error: 4.464278206813736
best_error: 4.464277778241257
best_error: 4.46333159145952
best_error: 4.4633311635544235
best_error: 4.463086423816268
best_error: 4.463085995880315
best_error: 4.462901101912056
best_error: 4.4629006739527615
best_error: 4.462811207938657
best_error: 4.462810779968015
best_error: 4.462740421342641
best_error: 4.462739993363106
best_error: 4.462708653605318
best_error: 4.462708225621787
best_error: 4.462698248660699
best_error: 4.462697820675853
best_error: 4.46269636453852
best_error: 4.4626959365534535
best_error: 4.462695509919062
best_error: 4.462695081933879
best_error: 4.462694816570361
best_error: 4.462694388585091
best_error: 4.462694093114182
best_error: 4.462694089037469
best_error: 4.462693963585364
best_error: 4.445939805892077
best_error: 4.445939357579725
best_error: 4.438817704367628
best_error: 4.438817261901462
best_error: 4.4382370869070655
best_error: 4.438236644324714
best_error: 4.437858024610582
best_error: 4.437857582357612
best_error: 4.437645144743271
best_error: 4.437644702593007
best_error: 4.437492118150267
best_error: 4.43749167596903
best_error: 4.437320936530763
best_error: 4.437320494314915
best_error: 4.437099181018585
best_error: 4.43709873875789
best_error: 4.437062360528683
best_error: 4.437062258407938
best_error: 4.4368999276031165
best_error: 4.4368994853021455
best_error: 4.436866874448482
best_error: 4.43686643214153
best_error: 4.436846322356266
best_error: 4.436845880045594
best_error: 4.43684435241244
best_error: 4.436843910101406
best_error: 4.436841823914788
best_error: 4.4368413816033
best_error: 4.436840812124095
best_error: 4.436840369812421
best_error: 4.436840167379327
best_error: 4.436839725067556
best_error: 4.436839314393408
best_error: 4.436839052976866
best_error: 4.436838813550899
