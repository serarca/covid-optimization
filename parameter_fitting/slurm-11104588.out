ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 78
days_switch 40
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 100.65230240442379
best_error: 100.65230225350307
best_error: 100.65230223377581
best_error: 18.821857640860397
best_error: 18.821857640856543
best_error: 18.821857633562043
best_error: 18.817835062452524
best_error: 18.817835055040867
best_error: 18.8011052047234
best_error: 18.801105196832186
best_error: 18.722116378841335
best_error: 18.72211636852122
best_error: 18.023586812044083
best_error: 18.023586773179062
best_error: 17.952775843633724
best_error: 17.95277580037739
best_error: 16.630779232091562
best_error: 16.63077908635767
best_error: 13.767608445780878
best_error: 13.767608014933316
best_error: 11.72287668870927
best_error: 11.72287628265169
best_error: 11.253051121681974
best_error: 11.253051104391567
best_error: 11.25305110165095
best_error: 11.143431226029616
best_error: 11.143431105326178
best_error: 11.111416859892824
best_error: 11.111416846637196
best_error: 11.111416841159429
best_error: 11.105385217059755
best_error: 11.105385145590374
best_error: 11.101924130940718
best_error: 11.1019240606771
best_error: 11.100748178103089
best_error: 11.10074816537617
best_error: 11.100748159483736
best_error: 11.100589082047346
best_error: 11.100589011973899
best_error: 11.100121994165388
best_error: 11.100121981445131
best_error: 11.100121975552534
best_error: 11.09310182488254
best_error: 11.093101812182516
best_error: 11.093101806341448
best_error: 11.065783672250866
best_error: 11.065783659634642
best_error: 11.065783653992886
best_error: 10.979928448255714
best_error: 10.97992843843654
best_error: 10.979928431063922
best_error: 10.901718723861315
best_error: 10.901718719192392
best_error: 10.90171870287319
best_error: 10.894167110280172
best_error: 10.894167105682637
best_error: 10.894167087878735
best_error: 10.865394188489358
best_error: 10.86539418473249
best_error: 10.865394152745855
best_error: 10.771307455517478
best_error: 10.771307454851483
best_error: 10.771307370668755
best_error: 10.475661475218677
best_error: 10.475661299933577
best_error: 10.413396440883155
best_error: 10.413396432423534
best_error: 10.413396413774782
best_error: 10.288222491522225
best_error: 10.288222484147738
best_error: 10.288222466109454
best_error: 10.28131924251642
best_error: 10.28131923302546
best_error: 10.281319219937279
best_error: 10.280616909827602
best_error: 10.280616895299385
best_error: 10.264863198948175
best_error: 10.264863180086154
best_error: 10.20191793823287
best_error: 10.201917677970329
best_error: 10.169309562733972
best_error: 10.169309545100296
best_error: 10.154733583604434
best_error: 10.154733569134702
best_error: 10.108600780837595
best_error: 10.108600629828615
best_error: 10.094847825845106
best_error: 10.094847725907142
best_error: 10.093587179009248
best_error: 10.09358707895121
best_error: 10.093571290338701
best_error: 10.093571276604358
best_error: 10.092185741025306
best_error: 10.092185633079573
best_error: 10.087862973604162
best_error: 10.087862854995564
best_error: 10.076450196118099
best_error: 10.076450181937066
best_error: 10.074665839083295
best_error: 10.074665824782695
best_error: 10.068749562532993
best_error: 10.068749547240095
best_error: 10.054400246386914
best_error: 10.054400158148045
best_error: 10.046773683522982
best_error: 10.046773663665476
best_error: 10.026506481395327
best_error: 10.026506463219091
best_error: 10.012584395843385
best_error: 10.012584380145821
best_error: 10.009955250081287
best_error: 10.00995508496239
best_error: 10.00803603753245
best_error: 10.008036022546467
best_error: 10.004625596510985
best_error: 10.004625583029389
best_error: 9.996036935367028
best_error: 9.996036923475002
best_error: 9.978588127501416
best_error: 9.978588116217953
best_error: 9.97599294089584
best_error: 9.975992930104022
best_error: 9.964743356993997
best_error: 9.964743106718576
best_error: 9.963166329896014
best_error: 9.963166097070069
best_error: 9.961349555152914
best_error: 9.961349545963504
best_error: 9.961349542592847
best_error: 9.939689409172818
best_error: 9.939689395148456
best_error: 9.868742284817314
best_error: 9.868742270269571
best_error: 9.813278703104809
best_error: 9.813278684997403
best_error: 9.794518994432412
best_error: 9.794518973048168
best_error: 9.77529000286445
best_error: 9.775289982561151
best_error: 9.736874522985435
best_error: 9.736874513781832
best_error: 9.698142057205752
best_error: 9.69814204755031
best_error: 9.691478207297044
best_error: 9.691478012656432
best_error: 9.69016301713183
best_error: 9.690163007681925
best_error: 9.686309900612608
best_error: 9.686309891273758
best_error: 9.680005393922139
best_error: 9.68000538003194
best_error: 9.680005194627999
best_error: 9.67947043623156
best_error: 9.679470431672351
