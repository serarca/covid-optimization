ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.276139706854298
best_error: 10.276139701924198
best_error: 9.972889748766558
best_error: 9.972889727585759
best_error: 6.434905758446583
best_error: 6.434905381476311
best_error: 4.935208232647727
best_error: 4.935207710719363
best_error: 3.5591946702408466
best_error: 3.5591942348613115
best_error: 3.3776146191084777
best_error: 3.377614499613272
best_error: 3.223613923796358
best_error: 3.2236135045760568
best_error: 3.202518479224807
best_error: 3.2025180590908398
best_error: 3.1984321827470596
best_error: 3.198431762272585
best_error: 3.1983284499496873
best_error: 3.1983283541382903
best_error: 3.198318086456763
best_error: 3.198317665972768
best_error: 3.1982593200113945
best_error: 3.1982592242013617
best_error: 3.1982589725559554
best_error: 3.198089004143159
best_error: 3.1980885836555517
best_error: 3.1980636270603027
best_error: 3.1980635312636547
best_error: 3.198009269527075
best_error: 3.1980091737335643
best_error: 3.197847237061222
best_error: 3.197846816573677
best_error: 3.196768586092789
best_error: 3.1967681688042306
best_error: 3.192485351183578
best_error: 3.192484934373403
best_error: 3.1754241583875267
best_error: 3.1754237426735523
best_error: 3.1212976917708453
best_error: 3.121297332679101
best_error: 3.0184095706267087
best_error: 3.018409256572582
best_error: 3.0136294274891293
best_error: 3.013629192072554
best_error: 2.9910251126970486
best_error: 2.9910248321925734
best_error: 2.989294383630374
best_error: 2.9892941162032285
best_error: 2.9878501796485235
best_error: 2.98784991399167
best_error: 2.9822184893523733
best_error: 2.9822182248715388
best_error: 2.9647145947996236
best_error: 2.964714342872412
best_error: 2.9080774000861203
best_error: 2.9080771547636193
best_error: 2.838016846027979
best_error: 2.8380165849990924
best_error: 2.5773375450955487
best_error: 2.5773372017244087
best_error: 2.5462224045570405
best_error: 2.546222020623163
best_error: 2.5342662155822477
best_error: 2.534265825968747
best_error: 2.4889111386926546
best_error: 2.4889107374607935
best_error: 2.4729653848431834
best_error: 2.472964988411469
best_error: 2.4427393407693234
best_error: 2.4427389408866365
best_error: 2.4351632978878524
best_error: 2.4351628964772924
best_error: 2.4308105968990397
best_error: 2.4308101946156926
best_error: 2.427981366347809
best_error: 2.427980963327829
best_error: 2.4261957662408413
best_error: 2.4261953628635533
best_error: 2.4252869602176306
best_error: 2.425286556658726
best_error: 2.4247212146923283
best_error: 2.424720811020645
best_error: 2.4243285389384406
best_error: 2.4243281351885337
best_error: 2.424125509762863
best_error: 2.4241251059725255
best_error: 2.423978056814869
best_error: 2.4239776529951613
best_error: 2.423906797410518
best_error: 2.4239063935766314
best_error: 2.4238521518339695
best_error: 2.4238517479891994
best_error: 2.423827892543442
best_error: 2.4238274886938314
best_error: 2.423822325501747
best_error: 2.4238219216510277
best_error: 2.4238203328743726
best_error: 2.423819929023262
best_error: 2.4238190827904837
best_error: 2.4238186789391305
best_error: 2.423818357148134
best_error: 2.4238179532966253
best_error: 2.423817889246344
best_error: 2.4238174853947574
best_error: 2.4238172217384193
best_error: 2.4238170460553876
best_error: 2.423816920899462
best_error: 2.423816871805699
best_error: 2.423816864174142
best_error: 2.388244178451534
best_error: 2.3882440949942154
best_error: 2.3624962976501287
best_error: 2.3624962229406075
best_error: 2.3578770243170615
best_error: 2.357876953455593
best_error: 2.356709121237894
best_error: 2.35670905138608
best_error: 2.3549439661503833
best_error: 2.354943898929548
best_error: 2.3492777106834017
best_error: 2.349277649493292
best_error: 2.335449549258456
best_error: 2.335449492118248
best_error: 2.3297324406993773
best_error: 2.3297323791439855
best_error: 2.3253622717326436
best_error: 2.325362203893463
best_error: 2.3244148470289696
best_error: 2.324414780637178
best_error: 2.3243931169482357
best_error: 2.3243930506893076
best_error: 2.3243658849907156
best_error: 2.324365818761695
best_error: 2.2918949646383835
best_error: 2.291894693235183
best_error: 2.1982141653235754
best_error: 2.1982138719384565
best_error: 2.168509645871122
best_error: 2.1685095990753673
best_error: 2.1526749639194955
best_error: 2.152674722898599
best_error: 2.119558814433012
best_error: 2.1195585415400853
best_error: 2.1104060457669203
best_error: 2.110406000819875
best_error: 2.090196362197182
best_error: 2.0901960915573654
best_error: 2.0735913369147942
best_error: 2.0735910841738177
best_error: 2.0198792637765326
best_error: 2.0198790037503387
best_error: 2.0142373042572617
best_error: 2.01423704378187
best_error: 2.013003812093627
best_error: 2.0130035504395964
best_error: 2.0083140901311056
best_error: 2.0083138254175235
best_error: 2.007292134834704
best_error: 2.0072918698131827
best_error: 2.0065666408426877
best_error: 2.006566375602685
best_error: 2.0061050393147863
best_error: 2.0061047739358364
best_error: 2.0058430609585765
best_error: 2.005842795500784
best_error: 2.0057157003749566
best_error: 2.0057154348788346
best_error: 2.0056724621905624
best_error: 2.005672196683962
best_error: 2.005637948871435
best_error: 2.0056376833564626
best_error: 2.0056226312521117
best_error: 2.0056223657334273
best_error: 2.0056213385007418
best_error: 2.005621072981734
best_error: 2.0056203804833923
best_error: 2.005620114964158
best_error: 2.005619591691624
best_error: 2.0056193261721913
best_error: 2.005619128580994
best_error: 2.00561905804404
best_error: 2.0056189767755264
best_error: 2.0056189761186918
best_error: 2.005618965011495
best_error: 2.0056189646050555
best_error: 2.0056189622175085
