ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 80
days_switch 80
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 106.16363145665835
best_error: 106.16363133592185
best_error: 106.16363129031018
best_error: 18.115508195808147
best_error: 18.115508195802686
best_error: 18.11550818602254
best_error: 18.10339315957505
best_error: 18.10339314946546
best_error: 18.050651074213043
best_error: 18.050651062618286
best_error: 17.73255757754011
best_error: 17.732557554503586
best_error: 17.23218316723714
best_error: 17.232183119120474
best_error: 16.39841131509866
best_error: 16.398411216909242
best_error: 15.707113307650662
best_error: 15.707113188677734
best_error: 12.866424249619747
best_error: 12.866424235417233
best_error: 12.866424221876105
best_error: 12.854527917253268
best_error: 12.854527888854806
best_error: 12.85452788217786
best_error: 12.734654963428312
best_error: 12.734654958910873
best_error: 12.734654930524286
best_error: 12.392641964444765
best_error: 12.392641958508332
best_error: 12.392641945970869
best_error: 12.299910410562056
best_error: 12.299910390260145
best_error: 11.493618163128737
best_error: 11.493618148530347
best_error: 11.09985715673708
best_error: 11.099856914392113
best_error: 11.000032523657525
best_error: 11.000032519165181
best_error: 11.000032513366023
best_error: 10.987421746563314
best_error: 10.987421743870119
best_error: 10.987421733608887
best_error: 10.977064970958232
best_error: 10.977064970001694
best_error: 10.977064956109178
best_error: 10.97297270938575
best_error: 10.972972708918723
best_error: 10.972972693988048
best_error: 10.970071797056054
best_error: 10.970071797055956
best_error: 10.970071780336715
best_error: 10.968242482155933
best_error: 10.968242482155826
best_error: 10.968242464765114
best_error: 10.967415212006703
best_error: 10.967415210737887
best_error: 10.967415193928803
best_error: 10.966686383882145
best_error: 10.96668637721193
best_error: 10.96668636511734
best_error: 10.966390340018759
best_error: 10.966390332978305
best_error: 10.966390321273419
best_error: 10.966257041501187
best_error: 10.966257034448459
best_error: 10.966257022760798
best_error: 10.966195243467826
best_error: 10.966195236409405
best_error: 10.966195224729736
best_error: 10.966159433306457
best_error: 10.966159426244719
best_error: 10.966159414569487
best_error: 10.96614076086281
best_error: 10.966140753799339
best_error: 10.966140742126424
best_error: 10.966131109051046
best_error: 10.966131101649202
best_error: 10.966131090322422
best_error: 10.966130137571687
best_error: 10.966130130169732
best_error: 10.966130118843086
best_error: 10.966129967336265
best_error: 10.96612976148217
best_error: 10.928515905670867
best_error: 10.928515701006193
best_error: 10.913641450762206
best_error: 10.91364144443181
best_error: 10.913641443373688
best_error: 10.913641442439431
best_error: 10.912084559736435
best_error: 10.912084553420609
best_error: 10.912084552335973
best_error: 10.912084551422357
best_error: 10.911993966399047
best_error: 10.911993783508075
best_error: 10.911843846626137
best_error: 10.911843840260135
best_error: 10.91184383918473
best_error: 10.911843838305197
best_error: 10.910048543788427
best_error: 10.910048537228738
best_error: 10.9100485362383
best_error: 10.910048535463012
best_error: 10.89563153776185
best_error: 10.895631526111128
best_error: 10.87781825165586
best_error: 10.877818244561393
best_error: 10.877818243934524
best_error: 10.87781824321165
best_error: 10.874332385750241
best_error: 10.874332378696643
best_error: 10.874332378055202
best_error: 10.874332377283551
best_error: 10.810562543221117
best_error: 10.810562536610707
best_error: 10.810562534523523
best_error: 10.409827684253237
best_error: 10.409827684253168
best_error: 10.4098276699741
best_error: 10.407833810447848
best_error: 10.407833810447787
best_error: 10.40783379739465
best_error: 10.407619062597604
best_error: 10.407619062485676
best_error: 10.40761905021325
best_error: 10.407257335827875
best_error: 10.407257335288003
best_error: 10.407257324145396
best_error: 10.40718292508126
best_error: 10.407182924531874
best_error: 10.407182913363823
best_error: 10.407182362955163
best_error: 10.407182361692264
best_error: 10.407182352622707
best_error: 10.407169380378157
best_error: 10.407169379117619
best_error: 10.407169370027525
best_error: 10.40716161425216
best_error: 10.407161612993008
best_error: 10.407161603890863
best_error: 10.407154793450095
best_error: 10.407154792165377
best_error: 10.40715478312439
best_error: 10.355176650772894
best_error: 10.355176633460282
best_error: 10.35517663119633
best_error: 10.193337231000802
best_error: 10.193337195657037
best_error: 10.038700390228719
best_error: 10.03870031606818
best_error: 9.984894962872001
best_error: 9.984894894351326
best_error: 9.971668699794222
best_error: 9.971668690848874
best_error: 9.971668687485257
best_error: 9.96159616552246
best_error: 9.961596157068728
best_error: 9.961596153770229
best_error: 9.956431229991551
best_error: 9.956431221274999
best_error: 9.956431217796325
best_error: 9.954211001379953
best_error: 9.954210993201364
best_error: 9.954210989917108
best_error: 9.953561327925136
best_error: 9.953561289722991
best_error: 9.953561275049502
best_error: 9.923849407000498
best_error: 9.923849225347004
best_error: 9.913822761881743
best_error: 9.913822560849656
best_error: 9.913496567339084
best_error: 9.913496554072495
best_error: 9.913496552449125
best_error: 9.913290408523666
best_error: 9.91329020741237
best_error: 9.91324250488272
best_error: 9.913242491620055
best_error: 9.91324248999788
best_error: 9.912764216957552
best_error: 9.912764204262526
best_error: 9.912764202894332
best_error: 9.911910343904035
best_error: 9.911910126875291
best_error: 9.911708700587074
best_error: 9.91170867511021
best_error: 9.89092325348783
best_error: 9.890923251518188
best_error: 9.890923240219962
best_error: 9.888972125426266
best_error: 9.888971822433737
best_error: 9.888465788449352
best_error: 9.88846578654479
best_error: 9.887701221054675
best_error: 9.887700923148564
best_error: 9.886971009732893
best_error: 9.886970711709958
best_error: 9.88683060538198
best_error: 9.886830603438902
best_error: 9.882739925307966
best_error: 9.882739924499251
best_error: 9.882739913292554
best_error: 9.881016440883709
best_error: 9.881016440133733
best_error: 9.881016428888366
best_error: 9.88024567011599
best_error: 9.880245669423983
best_error: 9.880245658190745
best_error: 9.880080309653078
best_error: 9.880080129938895
best_error: 9.87716422717238
best_error: 9.877164227172297
best_error: 9.877164216978613
best_error: 9.876456247890337
best_error: 9.876456217754706
best_error: 9.876456206139679
best_error: 9.873037540052675
best_error: 9.873037509837305
best_error: 9.873037497999524
best_error: 9.864510298096247
best_error: 9.864510269452543
best_error: 9.864510258967865
