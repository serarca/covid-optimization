ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.238801909708055
best_error: 11.23880190430636
best_error: 10.970263369707123
best_error: 10.970263334427573
best_error: 7.6470315138587
best_error: 7.647031184884318
best_error: 6.669423909902184
best_error: 6.669423723660694
best_error: 6.592733691453486
best_error: 6.592733691453455
best_error: 6.592733688966791
best_error: 6.5870752865918805
best_error: 6.587075286591849
best_error: 6.58707528379441
best_error: 6.585114248285213
best_error: 6.585114248285178
best_error: 6.585114245343642
best_error: 6.58370317451423
best_error: 6.583703174514194
best_error: 6.5837031714937835
best_error: 6.583001491070689
best_error: 6.583001421678351
best_error: 6.582773577601584
best_error: 6.582773577601553
best_error: 6.58277357457668
best_error: 6.5827579846616775
best_error: 6.582757915806456
best_error: 6.582730895316158
best_error: 6.582730895316118
best_error: 6.582730892291143
best_error: 6.582672149212348
best_error: 6.582672149212316
best_error: 6.582672146185521
best_error: 6.582562039081795
best_error: 6.5825619702154174
best_error: 6.582200617043301
best_error: 6.5822005481565045
best_error: 6.58073542876371
best_error: 6.5807353596766145
best_error: 6.574550567167115
best_error: 6.574550498108465
best_error: 6.544372841503183
best_error: 6.544372775272167
best_error: 6.465997791527895
best_error: 6.46599779152789
best_error: 6.449314351531181
best_error: 6.449314351531163
best_error: 6.4480768197168405
best_error: 6.448076819716826
best_error: 6.448013029345949
best_error: 6.448013029345917
best_error: 6.448013024217444
best_error: 6.447851455865522
best_error: 6.447851455865509
best_error: 6.447724444091423
best_error: 6.447724444091412
best_error: 6.4477062572588695
best_error: 6.447706257258858
best_error: 6.447705214074672
best_error: 6.44770521407465
best_error: 6.447705209103998
best_error: 6.4477048607209895
best_error: 6.447704860720963
best_error: 6.447704855750269
best_error: 6.447381194970743
best_error: 6.4473811949707125
best_error: 6.447381189816613
best_error: 6.447197911103293
best_error: 6.447197911103264
best_error: 6.447197905933285
best_error: 6.446476131583862
best_error: 6.446476131583834
best_error: 6.446476126219734
best_error: 6.4437614546114
best_error: 6.443761454611372
best_error: 6.443761448904382
best_error: 6.429493035643169
best_error: 6.429493035643138
best_error: 6.429493026253093
best_error: 6.428828355128692
best_error: 6.428828355128658
best_error: 6.428828345576415
best_error: 6.4283901954506195
best_error: 6.4283901954505875
best_error: 6.428390185831686
best_error: 6.428107030790736
best_error: 6.428107030790706
best_error: 6.42810702108755
best_error: 6.427909490467103
best_error: 6.4279094904670675
best_error: 6.427909480753553
best_error: 6.427752676407776
best_error: 6.427752676407742
best_error: 6.427752666649712
best_error: 6.42774675824681
best_error: 6.427746701749851
best_error: 6.3996925746230895
best_error: 6.399692574623055
best_error: 6.399692564377542
best_error: 6.3725853228211164
best_error: 6.3725853228210845
best_error: 6.372585317802579
best_error: 6.371955401582028
best_error: 6.371955401582001
best_error: 6.371955396503236
best_error: 6.369752692346652
best_error: 6.369752692346628
best_error: 6.369752686279364
best_error: 6.367388133837562
best_error: 6.367388133837532
best_error: 6.367388123539235
best_error: 6.355527421680366
best_error: 6.355527421680337
best_error: 6.355527411580438
best_error: 6.311132977853355
best_error: 6.3111329778533305
best_error: 6.311132970624391
best_error: 6.301341069338311
best_error: 6.30134106933829
best_error: 6.149816792307378
best_error: 6.149816792307369
best_error: 5.6769743398276145
best_error: 5.188071784122674
best_error: 5.18807178412266
best_error: 5.188071783568651
best_error: 5.17893464183374
best_error: 5.178934641833723
best_error: 5.178934641211986
best_error: 5.173423159922018
best_error: 5.173423159922
best_error: 5.173423159100919
best_error: 5.173224314597105
best_error: 5.173224238559083
best_error: 5.1692644067107
best_error: 5.169264406710684
best_error: 5.169264405464017
best_error: 5.146771259211885
best_error: 5.1467712592118575
best_error: 5.146771258494665
best_error: 5.146771256222019
best_error: 5.131274208672062
best_error: 5.131274208672047
best_error: 5.1100362398577
best_error: 5.110036239857673
best_error: 5.110036237798807
best_error: 5.110036234231224
best_error: 5.107930260733222
best_error: 5.107930260733193
best_error: 5.088625048688615
best_error: 5.088625011688989
best_error: 5.088624983196896
best_error: 5.006906679075813
best_error: 5.006906627229584
best_error: 5.006906529582837
best_error: 4.962278797389915
best_error: 4.962278797389861
best_error: 4.962278719247806
best_error: 4.940071107685415
best_error: 4.940071039429226
best_error: 4.940071031067566
best_error: 4.847581060072472
best_error: 4.847581060072447
best_error: 4.847581059688647
best_error: 4.842729632194196
best_error: 4.842729632194165
best_error: 4.84272962915668
best_error: 4.838972029698705
best_error: 4.838972029698678
best_error: 4.838972023543655
best_error: 4.838451399878979
best_error: 4.838451399878948
best_error: 4.838451393341117
best_error: 4.838278659569398
best_error: 4.838278659569369
best_error: 4.838278652979324
best_error: 4.838260120829636
best_error: 4.838260056026095
best_error: 4.838252620224752
best_error: 4.838252620224717
best_error: 4.838252613633104
best_error: 4.838252490190536
best_error: 4.838252490190514
best_error: 4.838252483598888
best_error: 4.838252458323048
best_error: 4.838252458323025
best_error: 4.838252443425185
best_error: 4.83825244203681
