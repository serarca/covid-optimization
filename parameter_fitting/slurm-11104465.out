ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 68
days_switch 45
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 102.23782174516413
best_error: 102.23782153439856
best_error: 20.431495692151593
best_error: 20.431495692150555
best_error: 20.431495690225432
best_error: 20.43129941965239
best_error: 20.431299417720567
best_error: 20.43050854233637
best_error: 20.430508540381634
best_error: 20.42724946552741
best_error: 20.42724946347683
best_error: 20.41247016810065
best_error: 20.41247016558783
best_error: 20.3011643203114
best_error: 20.301164313182447
best_error: 20.298190945594996
best_error: 20.29819093831738
best_error: 16.295319367458138
best_error: 16.295319299527357
best_error: 14.089318073984103
best_error: 14.089318038684402
best_error: 13.9897164092961
best_error: 13.989716400311696
best_error: 13.989716400270066
best_error: 13.98836051481721
best_error: 13.98836050611963
best_error: 13.98836050558435
best_error: 13.983973730156261
best_error: 13.983973725902683
best_error: 13.983973691005318
best_error: 13.981301592828533
best_error: 13.981301587175004
best_error: 13.981301573068354
best_error: 13.9759263614663
best_error: 13.975926353265306
best_error: 13.975926352059126
best_error: 13.960104799573639
best_error: 13.960104790515384
best_error: 13.960104790508352
best_error: 13.948476142793073
best_error: 13.94847613276567
best_error: 13.945856147145337
best_error: 13.945856137082654
best_error: 13.9455423358466
best_error: 13.945542325785127
best_error: 13.945539886341177
best_error: 13.94553985386067
best_error: 13.89907633697627
best_error: 13.899076327883721
best_error: 13.899076327790052
best_error: 13.898147463727872
best_error: 13.898147454639219
best_error: 13.89814745453711
best_error: 13.897954847925092
best_error: 13.897954838837244
best_error: 13.897954838733389
best_error: 13.897919460777041
best_error: 13.897919429593587
best_error: 13.867697679488101
best_error: 13.867697671256849
best_error: 13.867697670303997
best_error: 13.841150129268943
best_error: 13.841150122965722
best_error: 13.841150120103418
best_error: 13.84021070925202
best_error: 13.840210703393279
best_error: 13.840210700092275
best_error: 13.832478265844626
best_error: 13.832478260033703
best_error: 13.832478259475298
best_error: 13.832478256661723
best_error: 13.80752803805593
best_error: 13.807528009899976
best_error: 13.70783783812032
best_error: 13.707837809802829
best_error: 13.630592072680503
best_error: 13.630592068301361
best_error: 13.630592066785816
best_error: 13.630592062661833
best_error: 13.615129430882822
best_error: 13.615129426503696
best_error: 13.615129424994928
best_error: 13.615129420855464
best_error: 13.552976859345371
best_error: 13.552976854966406
best_error: 13.552976853462361
best_error: 13.55297684928333
best_error: 13.48332528949408
best_error: 13.48332528438527
best_error: 13.483325279374707
best_error: 13.448495190993818
best_error: 13.448495185884054
best_error: 13.448495180874971
best_error: 13.309161624431983
best_error: 13.309161615728474
best_error: 13.309161614315215
best_error: 12.752010068062553
best_error: 12.752009994848557
best_error: 12.401243583571539
best_error: 12.40124357695645
best_error: 12.392448343908711
best_error: 12.39244833736902
best_error: 12.349221011911052
best_error: 12.34922100643243
best_error: 12.334748960383706
best_error: 12.33474884662983
best_error: 12.32956439658954
best_error: 12.329564379275
best_error: 12.32956400930702
best_error: 12.329354300338284
best_error: 12.329354188268885
best_error: 12.329294094617813
best_error: 12.329294077301766
best_error: 12.329293707309157
best_error: 12.329040495257274
best_error: 12.32904038318096
best_error: 12.328790815755386
best_error: 12.328790703805357
best_error: 12.328736777514568
best_error: 12.328736665563344
best_error: 12.328709972371637
best_error: 12.328709860649589
best_error: 12.328698941050295
best_error: 12.328698829011737
best_error: 12.328690151868004
best_error: 12.328690039829224
best_error: 12.32868911399634
best_error: 12.328689001957533
best_error: 12.328688848328477
best_error: 12.328688810103182
best_error: 12.328688807119459
best_error: 12.326601907204635
best_error: 12.32660190493378
best_error: 12.326601796945146
best_error: 12.323356553540016
best_error: 12.323356532247994
best_error: 12.323356531975445
best_error: 12.32256978137379
best_error: 12.322569778989891
best_error: 12.322569672693716
best_error: 12.322558529925201
best_error: 12.322558527541267
best_error: 12.322558421244455
best_error: 12.32255509705358
best_error: 12.322555075774504
best_error: 12.322555075502116
best_error: 12.322553464125113
best_error: 12.322553461741167
best_error: 12.322553355444072
best_error: 12.322553351803798
best_error: 12.322553349419852
best_error: 12.322553347634877
best_error: 12.322553347110876
best_error: 12.322380468760908
best_error: 12.32238046641868
best_error: 12.322380359412135
best_error: 12.32237705691158
best_error: 12.32237705456939
best_error: 12.322376947562471
best_error: 12.32236340987211
best_error: 12.322363407530078
best_error: 12.322363300521667
best_error: 12.322308827439453
best_error: 12.322308825098048
best_error: 12.322308718083677
best_error: 12.322264685242194
best_error: 12.322264682901306
best_error: 12.322264575882102
best_error: 12.322202553337895
best_error: 12.322202550997325
best_error: 12.32220244397434
best_error: 12.322146240873439
best_error: 12.322146238533156
best_error: 12.322146131506733
best_error: 12.322116797248713
best_error: 12.322116794908576
best_error: 12.322116687880364
best_error: 12.322090171245813
best_error: 12.322090168905813
best_error: 12.322090061875976
best_error: 12.322076478406647
best_error: 12.322076476066714
best_error: 12.322076369036042
best_error: 12.32206409268042
best_error: 12.32206409034056
best_error: 12.322063983309128
best_error: 12.322057633390076
best_error: 12.322057631050244
best_error: 12.322057524018426
best_error: 12.32205180192008
best_error: 12.322051799580272
best_error: 12.322051692548099
best_error: 12.322048714945387
best_error: 12.322048712605596
best_error: 12.322048605573233
best_error: 12.32204593868801
best_error: 12.322045936348239
best_error: 12.322045829315703
best_error: 12.322044423508801
best_error: 12.322044421169037
best_error: 12.322044314136413
best_error: 12.322043071747736
best_error: 12.322043069407979
best_error: 12.32204296237527
best_error: 12.321782513676826
best_error: 12.321782511334641
best_error: 12.321782404288273
best_error: 12.321718136641158
best_error: 12.321718115370032
best_error: 12.321642421530793
best_error: 12.321642419169102
best_error: 12.321642312451063
best_error: 12.32155454506896
best_error: 12.32155454270704
best_error: 12.321554435984062
best_error: 12.321533221469878
best_error: 12.321533219107895
best_error: 12.321533112383719
best_error: 12.321530430195232
best_error: 12.32153040894613
best_error: 12.32152950945557
best_error: 12.321529507093576
best_error: 12.321529400369194
best_error: 12.32152649660221
best_error: 12.321526494240207
best_error: 12.321526387515654
best_error: 12.321526044477896
best_error: 12.321526042115893
best_error: 12.321525935391312
best_error: 12.321525931913385
best_error: 12.32152592955138
