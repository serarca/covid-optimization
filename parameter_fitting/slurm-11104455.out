ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 68
days_switch 5
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.91644357810219
best_error: 101.91644337004116
best_error: 20.41202576841312
best_error: 20.412025768411986
best_error: 20.412025766436596
best_error: 20.411709068404136
best_error: 20.411709066422855
best_error: 20.4104352744613
best_error: 20.410435272460784
best_error: 20.405225132179147
best_error: 20.40522513009843
best_error: 20.382418126920548
best_error: 20.38241812448366
best_error: 20.229522270824713
best_error: 20.22952226381268
best_error: 20.22749560882832
best_error: 20.22749560171509
best_error: 20.041638804371456
best_error: 20.04163878313509
best_error: 19.158461755663573
best_error: 19.158461617216208
best_error: 18.632860689002896
best_error: 18.632860473164435
best_error: 17.926249760280058
best_error: 17.926249439599122
best_error: 14.928944830919985
best_error: 14.92894432653423
best_error: 14.762323169092465
best_error: 14.762323165854218
best_error: 14.762323142586105
best_error: 14.755369236681336
best_error: 14.755369233407647
best_error: 14.75536921038615
best_error: 14.72705907603839
best_error: 14.727059072589267
best_error: 14.727059050714143
best_error: 14.710965824662146
best_error: 14.710965818976813
best_error: 14.710965815917692
best_error: 14.688238807903302
best_error: 14.688238800375746
best_error: 14.68823879884869
best_error: 14.683453272158987
best_error: 14.683453264039724
best_error: 14.683453263056606
best_error: 14.683041603662339
best_error: 14.683041595546936
best_error: 14.68304159455677
best_error: 14.68297964941387
best_error: 14.682979609771088
best_error: 14.59536931756482
best_error: 14.595369280182139
best_error: 14.272977448536054
best_error: 14.272977418626672
best_error: 13.941742593225339
best_error: 13.941742454935442
best_error: 13.903640877716509
best_error: 13.903640870648854
best_error: 13.90364086222177
best_error: 13.85341068956117
best_error: 13.85341068230036
best_error: 13.853410677652406
best_error: 13.85341067742447
best_error: 13.806191812803753
best_error: 13.806191806298271
best_error: 13.806191802097066
best_error: 13.806191801014545
best_error: 13.759553323653101
best_error: 13.759553317320101
best_error: 13.759553315275387
best_error: 13.759553312086824
best_error: 13.726422130606414
best_error: 13.726422123327495
best_error: 13.726422118846564
best_error: 13.72420659808464
best_error: 13.7242065708488
best_error: 13.708499686278437
best_error: 13.708499679127524
best_error: 13.708499674510325
best_error: 13.706980256078324
best_error: 13.706980229006318
best_error: 13.704215962944026
best_error: 13.704215955836524
best_error: 13.704215951173914
best_error: 13.70272979158926
best_error: 13.702729764547255
best_error: 13.685617377581345
best_error: 13.685617351420536
best_error: 13.684148459395074
best_error: 13.684148433274913
best_error: 13.683418170370288
best_error: 13.683418144259601
best_error: 13.683125753037402
best_error: 13.683125726930495
best_error: 13.683086353476323
best_error: 13.68308632736989
best_error: 13.683054746110722
best_error: 13.683054720004673
best_error: 13.683052334757072
best_error: 13.683052308651057
best_error: 13.683051033247061
best_error: 13.683051007141085
best_error: 13.683049005006666
best_error: 13.683048978900691
best_error: 13.683048881956738
best_error: 13.683048855850796
best_error: 13.683048842043435
best_error: 13.683048836190281
best_error: 13.683048835868675
best_error: 13.683048830441674
best_error: 13.683015934988843
best_error: 13.683015929137156
best_error: 13.683015928815855
best_error: 13.683015923388718
best_error: 13.683003424568945
best_error: 13.683003418717467
best_error: 13.683003418396133
best_error: 13.68300341296896
best_error: 13.682953388045828
best_error: 13.682953382195205
best_error: 13.68295338187373
best_error: 13.682953376446406
best_error: 13.682923052652765
best_error: 13.682923046802655
best_error: 13.6829230464811
best_error: 13.682923041053684
best_error: 13.682906304624254
best_error: 13.68290629877443
best_error: 13.682906298452828
best_error: 13.682906293025368
best_error: 13.682897051654638
best_error: 13.682897045804967
best_error: 13.682897045483344
best_error: 13.682897040055858
best_error: 13.68289193683172
best_error: 13.682891930982139
best_error: 13.6828919306605
best_error: 13.682891925233
best_error: 13.682889108515319
best_error: 13.682889102665788
best_error: 13.682889102344134
best_error: 13.682889096916629
best_error: 13.682886693209035
best_error: 13.682886687359538
best_error: 13.682886687037882
best_error: 13.682886681610363
best_error: 13.682885581102363
best_error: 13.68288557525288
best_error: 13.682885574931218
best_error: 13.682885569503693
best_error: 13.682885050986009
best_error: 13.682885045136537
best_error: 13.682885044814872
best_error: 13.682885039387347
best_error: 13.682884902017861
best_error: 13.682884793615182
best_error: 13.68251667114909
best_error: 13.682516665300923
best_error: 13.682516664976262
best_error: 13.682516659548028
best_error: 13.682481913482894
best_error: 13.682481907634852
best_error: 13.682481907309908
best_error: 13.682481901881605
best_error: 13.682481026644531
best_error: 13.682481020796494
best_error: 13.682481020471538
best_error: 13.682481015043233
best_error: 13.68246836984903
best_error: 13.682468343748244
best_error: 13.682325508387489
best_error: 13.682325482288043
best_error: 13.681902687498745
best_error: 13.681902681335671
best_error: 13.681902681231087
best_error: 13.681902675899593
best_error: 13.68186510346398
best_error: 13.681865097301053
best_error: 13.681865097196365
best_error: 13.681865091864925
best_error: 13.681714774736651
best_error: 13.681714768574322
best_error: 13.681714768469217
best_error: 13.68171476313798
best_error: 13.68111357840407
best_error: 13.681113572244142
best_error: 13.681113572137349
best_error: 13.681113566806934
best_error: 13.678710689603024
best_error: 13.678710683452632
best_error: 13.678710683339151
best_error: 13.678710678012019
best_error: 13.669158934903681
best_error: 13.66915892882401
best_error: 13.669158928578007
best_error: 13.66915892333715
best_error: 13.637098565920567
best_error: 13.637098562276671
best_error: 13.63709852291178
best_error: 13.633904783539721
best_error: 13.633904782185278
best_error: 13.633904703544518
best_error: 13.629665410181172
best_error: 13.629665408821277
best_error: 13.629665330144
best_error: 13.61274700015955
best_error: 13.612746998546484
best_error: 13.612746923800092
best_error: 13.546003602039578
best_error: 13.546003599650977
best_error: 13.546003535486637
best_error: 13.292256124695749
best_error: 13.29225612002012
best_error: 13.292256089658931
best_error: 12.915088947741152
best_error: 12.91508889093813
best_error: 12.906194270018972
best_error: 12.90619427001897
best_error: 12.906194264335735
best_error: 12.906194260993043
best_error: 12.859027563430224
best_error: 12.859027557666936
best_error: 12.859027554702443
best_error: 12.721677736110518
best_error: 12.721677685957824
best_error: 12.716296025952225
best_error: 12.716295975279928
best_error: 12.714289379627479
best_error: 12.714289328761701
best_error: 12.713394367058578
best_error: 12.713394320895997
best_error: 12.71297166963387
best_error: 12.712971623691622
best_error: 12.712751436722511
best_error: 12.71275139105104
best_error: 12.712619084361055
best_error: 12.71261903867658
best_error: 12.712555114028085
best_error: 12.712555068337327
best_error: 12.712523230361745
best_error: 12.71252318466786
best_error: 12.712507073308196
best_error: 12.712507027612723
best_error: 12.712498768922478
best_error: 12.712498723226187
best_error: 12.712494468457773
best_error: 12.712494422761058
best_error: 12.712493342139624
best_error: 12.712493335931944
best_error: 12.712493335525174
best_error: 12.71249207540276
best_error: 12.712492029705931
best_error: 12.712491884967081
best_error: 12.712491839270243
best_error: 12.712491797736176
best_error: 12.712491752039337
best_error: 12.712491719285344
best_error: 12.712491673588502
best_error: 12.712491666427708
best_error: 12.712491632754286
best_error: 12.712491627355531
best_error: 12.712491626555437
best_error: 12.712491625825132
best_error: 12.712491620426377
best_error: 12.712491619626281
best_error: 12.71249161604044
best_error: 12.673363531174708
best_error: 12.67336346059816
best_error: 12.661726253590054
best_error: 12.661726237105729
best_error: 12.661725893300112
best_error: 12.658133565036387
best_error: 12.658133548617709
best_error: 12.658133205687667
best_error: 12.657359215131699
best_error: 12.657359211889682
best_error: 12.657359139732474
best_error: 12.655669425325174
best_error: 12.655669422082896
best_error: 12.6556693499026
best_error: 12.654386760064574
best_error: 12.654386756642719
best_error: 12.654386689418038
best_error: 12.6538831727153
best_error: 12.653883169270824
best_error: 12.653883102618678
best_error: 12.653852719144595
best_error: 12.653852696347057
best_error: 12.653852696032915
best_error: 12.653849982201773
best_error: 12.653849978757293
best_error: 12.653849912104802
best_error: 12.653782422415832
best_error: 12.653782418971351
best_error: 12.653782352318139
best_error: 12.653775809132366
best_error: 12.653775805687882
best_error: 12.6537757390346
best_error: 12.653771793140113
best_error: 12.653771789695629
best_error: 12.653771723042308
best_error: 12.653769197098677
best_error: 12.653769193654197
best_error: 12.653769127000846
best_error: 12.653767658522371
best_error: 12.653767655077884
best_error: 12.65376758842452
best_error: 12.653766699634199
best_error: 12.653766696189717
best_error: 12.65376662953634
best_error: 12.653766028858632
best_error: 12.653766025414146
best_error: 12.653765958760763
best_error: 12.653765667106942
best_error: 12.653765663662462
best_error: 12.653765597009073
best_error: 12.653765407271077
best_error: 12.653765403826595
best_error: 12.653765337173205
best_error: 12.653765272760618
best_error: 12.653765269316137
best_error: 12.653765202662747
best_error: 12.653765172756
best_error: 12.65376516931152
best_error: 12.653765102658125
best_error: 12.653765053746948
best_error: 12.653765052956851
best_error: 12.653039555792088
best_error: 12.65303953300993
best_error: 12.653039532695342
best_error: 12.65231591371136
best_error: 12.652315890938372
best_error: 12.652315890623964
best_error: 12.652280416126047
best_error: 12.652280412971358
best_error: 12.65228034449234
best_error: 12.652253268148531
best_error: 12.652253245376349
best_error: 12.652253245061956
best_error: 12.652237570242034
best_error: 12.652237567087587
best_error: 12.652237498603492
best_error: 12.65223735227269
best_error: 12.652237329500677
best_error: 12.65223732918631
best_error: 12.652236339192374
best_error: 12.65223631642039
best_error: 12.652236316106015
best_error: 12.652236270242428
best_error: 12.65223624747044
best_error: 12.65223624715606
best_error: 12.652236241591908
best_error: 12.652236241277542
best_error: 12.652236237988673
best_error: 12.652236237674312
