ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 66
days_switch 35
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.63620469838278
best_error: 101.63620452981503
best_error: 101.63620449797
best_error: 20.573188069433254
best_error: 20.5731880694325
best_error: 20.57318806795241
best_error: 20.57299527904676
best_error: 20.572995277560402
best_error: 20.572216917384416
best_error: 20.57221691587571
best_error: 20.568983935728497
best_error: 20.568983934125555
best_error: 20.553821308976822
best_error: 20.553821306904254
best_error: 20.41315589471067
best_error: 20.413155886201793
best_error: 20.40678908008916
best_error: 20.406789071181848
best_error: 20.08532849941471
best_error: 20.085328460408554
best_error: 16.296496414540456
best_error: 16.29649587219697
best_error: 14.44963177171191
best_error: 14.449631767294774
best_error: 14.449631752638478
best_error: 14.449075465281823
best_error: 14.449075460424417
best_error: 14.449075452561836
best_error: 14.447474940897468
best_error: 14.447474935533787
best_error: 14.447474935489964
best_error: 14.447474931534256
best_error: 14.443340944125765
best_error: 14.443340938503532
best_error: 14.443340934888571
best_error: 14.440816517764986
best_error: 14.440816511972269
best_error: 14.440816508596189
best_error: 14.439463042728512
best_error: 14.439463036916454
best_error: 14.439463033582335
best_error: 14.43884808805399
best_error: 14.438848082215564
best_error: 14.438848078898395
best_error: 14.4385743516451
best_error: 14.438574345805725
best_error: 14.438574342486245
best_error: 14.438553066754167
best_error: 14.438553060914717
best_error: 14.438553057595062
best_error: 14.438536790645305
best_error: 14.4385367848058
best_error: 14.438536781486002
best_error: 14.43852735366514
best_error: 14.438527347825602
best_error: 14.438527344505728
best_error: 14.438520270264252
best_error: 14.438520264424687
best_error: 14.438520261104749
best_error: 14.438515948103387
best_error: 14.438515942263813
best_error: 14.438515938943835
best_error: 14.438512820260495
best_error: 14.438512814420902
best_error: 14.438512811100903
best_error: 14.438510199552963
best_error: 14.43851019371336
best_error: 14.438510190393341
best_error: 14.438508936272719
best_error: 14.438508930433116
best_error: 14.43850892711308
best_error: 14.438507613271305
best_error: 14.438507607431697
best_error: 14.438507604111653
best_error: 14.438507126333944
best_error: 14.438507120494336
best_error: 14.438507117174286
best_error: 14.438506836300153
best_error: 14.438506830460545
best_error: 14.438506827140493
best_error: 14.43850656683248
best_error: 14.43850656099287
best_error: 14.438506557672813
best_error: 14.438506443596783
best_error: 14.438506437757177
best_error: 14.43850643443712
best_error: 14.43850635972286
best_error: 14.438506353883245
best_error: 14.438506350563195
best_error: 14.438506304947603
best_error: 14.438506299107988
best_error: 14.438506295787935
best_error: 14.4385062589445
best_error: 14.438506253104885
best_error: 14.43850624978483
best_error: 14.438506234909031
best_error: 14.43850622906942
best_error: 14.43850622574936
best_error: 14.43850610527926
best_error: 14.438506077662382
best_error: 14.42737038697437
best_error: 14.42737035955357
best_error: 14.395282643435248
best_error: 14.39528264220339
best_error: 14.395282582712058
best_error: 14.391840306253302
best_error: 14.3918402811792
best_error: 14.387800232678138
best_error: 14.387800230393559
best_error: 14.387800187483485
best_error: 14.386232644703691
best_error: 14.386232620488922
best_error: 14.386134312081738
best_error: 14.386134309773936
best_error: 14.38613426725157
best_error: 14.385169895285031
best_error: 14.385169892991165
best_error: 14.385169850275357
best_error: 14.385116807776907
best_error: 14.3851168054838
best_error: 14.38511676275739
best_error: 14.385115241081275
best_error: 14.385115216883223
best_error: 14.385106522232913
best_error: 14.385106519939955
best_error: 14.385106477211494
best_error: 14.385106021746047
best_error: 14.385105997548163
best_error: 14.385104808488158
best_error: 14.385104806195226
best_error: 14.385104763466419
best_error: 14.385104357267906
best_error: 14.385104354974983
best_error: 14.385104352181088
best_error: 14.385104348453096
best_error: 14.385104330492965
best_error: 14.38395633482655
best_error: 14.383956332549301
best_error: 14.383956289610174
best_error: 14.379317116893876
best_error: 14.379317114249483
best_error: 14.379317072182733
best_error: 14.378699937870822
best_error: 14.378699913930182
best_error: 14.376017181699723
best_error: 14.376017157943359
best_error: 14.376017157324954
best_error: 14.36413127588526
best_error: 14.36413124880896
best_error: 14.364131248136854
best_error: 14.323904793539127
best_error: 14.323904763026027
best_error: 14.285204348098375
best_error: 14.285204341867711
best_error: 14.285204338642863
best_error: 14.208372148255428
best_error: 14.208372142367274
best_error: 14.20837213902559
best_error: 14.201892796500513
best_error: 14.201892780618987
best_error: 14.201892491251396
best_error: 14.196781106244543
best_error: 14.196781103310615
best_error: 14.196781100376333
best_error: 14.196781097041248
best_error: 14.033741805391646
best_error: 14.033741800068585
best_error: 14.033741796721277
best_error: 13.905958674104113
best_error: 13.905958668682338
best_error: 13.905958665350845
best_error: 13.762411393932222
best_error: 13.762411389420606
best_error: 13.762411384915481
best_error: 13.482773544338585
best_error: 13.4827735386079
best_error: 13.238254957060164
best_error: 13.23825495543749
best_error: 13.238254815883419
best_error: 13.23555315412484
best_error: 13.235553149067226
best_error: 13.18142026789509
best_error: 13.181420262628158
best_error: 13.167094516782182
best_error: 13.16709450998528
best_error: 13.085534587845173
best_error: 13.085534586507851
best_error: 13.085534452329298
best_error: 13.08402123123851
best_error: 13.084021224556713
best_error: 13.023858848691585
best_error: 13.023858841864264
best_error: 13.005671408142687
best_error: 13.005671387125787
best_error: 13.005670979162115
best_error: 12.992665555857421
best_error: 12.992665549458472
best_error: 12.984584917187124
best_error: 12.984584799705804
best_error: 12.983059953951884
best_error: 12.983059841588059
best_error: 12.97807259477745
best_error: 12.978072499957674
best_error: 12.971233662454438
best_error: 12.971233569373814
best_error: 12.969072293404508
best_error: 12.96907220180578
best_error: 12.968361676941342
best_error: 12.968361585302741
best_error: 12.967963268554985
best_error: 12.967963177227848
best_error: 12.967948214334815
best_error: 12.967948123006806
best_error: 12.967946249721384
best_error: 12.967946158393257
best_error: 12.967945142591859
best_error: 12.967945051263667
best_error: 12.967944709025577
best_error: 12.967944702318015
best_error: 12.967944698792788
best_error: 12.967944692085226
best_error: 12.96794468744351
