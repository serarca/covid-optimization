ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 78
days_switch 5
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 99.21508227350587
best_error: 99.21508219660538
best_error: 99.21508210375814
best_error: 18.825026903403874
best_error: 18.82502690339996
best_error: 18.825026897063704
best_error: 18.807848087688598
best_error: 18.8078480809897
best_error: 18.728962214820555
best_error: 18.72896220604664
best_error: 17.026954688051887
best_error: 17.026954494522766
best_error: 14.766937280032371
best_error: 14.766936967429604
best_error: 13.806662048245313
best_error: 13.806661858416625
best_error: 13.502964550600463
best_error: 13.50296455040342
best_error: 13.502964549500483
best_error: 13.50296387886246
best_error: 13.289002539923594
best_error: 13.2890025025812
best_error: 13.289002360887837
best_error: 11.595597110385073
best_error: 11.595596390468064
best_error: 11.592756678840116
best_error: 11.592755958610207
best_error: 11.008393487350114
best_error: 11.008393476979585
best_error: 11.00839347291586
best_error: 11.008393468010151
best_error: 10.99859730386844
best_error: 10.998597291233134
best_error: 10.99859728489636
best_error: 10.980465952234853
best_error: 10.98046593965186
best_error: 10.980465933432011
best_error: 10.964669325186723
best_error: 10.964669041835934
best_error: 10.948221633385794
best_error: 10.948221622197723
best_error: 10.948221614868922
best_error: 10.933182672399203
best_error: 10.933182661739872
best_error: 10.933182653965087
best_error: 10.931701800365154
best_error: 10.931701789753705
best_error: 10.931701781938845
best_error: 10.931144217544674
best_error: 10.931144207000152
best_error: 10.931144199121245
best_error: 10.93111055985044
best_error: 10.931110279137384
best_error: 10.931106967718215
best_error: 10.93110695717408
best_error: 10.931106949294954
best_error: 10.93110682057323
best_error: 10.93066981830038
best_error: 10.930669807327428
best_error: 10.930669799804367
best_error: 10.93065667022999
best_error: 10.930656659182759
best_error: 10.930656651713477
best_error: 10.930654207152724
best_error: 10.930654196096304
best_error: 10.930654188628884
best_error: 10.930652221743475
best_error: 10.93065221067881
best_error: 10.93065220321305
best_error: 10.930650621453259
best_error: 10.930650610381175
best_error: 10.930650602916922
best_error: 10.930649331579104
best_error: 10.930649320500374
best_error: 10.930649313037465
best_error: 10.93064873430891
best_error: 10.930648723192188
best_error: 10.930648715762533
best_error: 10.927215980018971
best_error: 10.92721596888616
best_error: 10.927215961456824
best_error: 10.92064533716583
best_error: 10.920645326029124
best_error: 10.920645318572504
best_error: 10.919102065494426
best_error: 10.91910202508452
best_error: 10.918480823139546
best_error: 10.918480782743284
best_error: 10.911350719045187
best_error: 10.911350708303313
best_error: 10.911350700497955
best_error: 10.909904437431294
best_error: 10.909904165303843
best_error: 10.907991469981592
best_error: 10.907991459110303
best_error: 10.90799145141612
best_error: 10.90513654905224
best_error: 10.905136537950952
best_error: 10.905136530484636
best_error: 10.904089865059081
best_error: 10.904089854250108
best_error: 10.904089846460455
best_error: 10.900943389238183
best_error: 10.900943348756748
best_error: 10.897950676869096
best_error: 10.897950665598447
best_error: 10.89795065824482
best_error: 10.889138479010839
best_error: 10.88913846771673
best_error: 10.889138460326437
best_error: 10.853449631702539
best_error: 10.853449620382966
best_error: 10.853449612769905
best_error: 10.705551754358622
best_error: 10.70555174122163
best_error: 10.705551734312895
best_error: 10.492127757313554
best_error: 10.492127716666541
best_error: 10.490687082567423
best_error: 10.49068704194663
best_error: 10.484998022694711
best_error: 10.484997982177383
best_error: 10.4761247671996
best_error: 10.47612475293521
best_error: 10.476124745274833
best_error: 10.473591754244211
best_error: 10.473591740006318
best_error: 10.473591732320882
best_error: 10.466478440404487
best_error: 10.46647842625265
best_error: 10.466478418465567
best_error: 10.38814788014599
best_error: 10.388147840151285
best_error: 10.282811360219668
best_error: 10.282811311959973
best_error: 10.137033155730874
best_error: 10.137033131903703
best_error: 10.118104620321645
best_error: 10.118104597196082
best_error: 10.115677387881359
best_error: 10.115677387093514
best_error: 10.115677364631534
best_error: 10.11231934611413
best_error: 10.112319344864677
best_error: 10.112319329118503
best_error: 10.112182892350683
best_error: 10.11218289110096
best_error: 10.112182875354321
best_error: 10.11214499397127
best_error: 10.11214497082192
best_error: 10.112112696908042
best_error: 10.112112695658181
best_error: 10.112112679911306
best_error: 10.112112406686808
best_error: 10.11211238353794
best_error: 10.111631105773633
best_error: 10.111631104521432
best_error: 10.111631088752933
best_error: 10.111490949837723
best_error: 10.111490948585278
best_error: 10.111490932816332
best_error: 10.111479380124837
best_error: 10.111479378872378
best_error: 10.111479363103395
best_error: 10.111477376033589
best_error: 10.111477374781124
best_error: 10.111477359012131
best_error: 10.11147631116201
best_error: 10.111476309909541
best_error: 10.111476294140546
best_error: 10.111475863212839
best_error: 10.111475861960368
best_error: 10.111475846191372
best_error: 10.11147567621745
best_error: 10.111475653070853
best_error: 10.110388811377451
best_error: 10.110388810147654
best_error: 10.110388794026045
best_error: 10.106156098741451
best_error: 10.106156075560742
best_error: 10.106002388620647
best_error: 10.106002365438224
best_error: 10.033254413320693
best_error: 10.033254390761254
best_error: 9.92163410207519
best_error: 9.921634082037231
best_error: 9.909505143539505
best_error: 9.909505122359475
best_error: 9.906332989488096
best_error: 9.906332968464406
best_error: 9.899488968989239
best_error: 9.899488948385438
best_error: 9.896290422516989
best_error: 9.896290422159955
best_error: 9.896290397096
best_error: 9.896285897719881
best_error: 9.89628587728178
best_error: 9.896189710496463
best_error: 9.89618971013821
best_error: 9.896189685084972
best_error: 9.864356452502523
best_error: 9.864356433055555
best_error: 9.760419861391242
best_error: 9.760419845310683
best_error: 9.700892009891621
best_error: 9.700891995218234
best_error: 9.700273844236232
best_error: 9.700273841091528
best_error: 9.700273835521012
best_error: 9.69796183520051
best_error: 9.697961832075386
best_error: 9.697961826492735
best_error: 9.697874594346436
best_error: 9.697874594346434
best_error: 9.697874591221547
best_error: 9.69787458563895
best_error: 9.697863246360015
best_error: 9.697863222907232
best_error: 9.69786322182313
best_error: 9.686525703536564
best_error: 9.686525700601695
best_error: 9.686525694818528
best_error: 9.68218878413898
best_error: 9.682188781277533
best_error: 9.682188775416822
best_error: 9.681229516868497
best_error: 9.681229514016957
best_error: 9.681229508145666
best_error: 9.68068233164658
best_error: 9.68068232880069
best_error: 9.680682322923358
best_error: 9.680359650929812
best_error: 9.680359648087276
best_error: 9.680359642206332
best_error: 9.680172649077216
best_error: 9.680172646236615
best_error: 9.680172640353613
best_error: 9.680062081130405
best_error: 9.680062078290938
best_error: 9.680062072406722
best_error: 9.679996430693375
best_error: 9.679996427854588
best_error: 9.679996421969644
best_error: 9.679957291767948
best_error: 9.679957288929561
best_error: 9.679957283044187
best_error: 9.679921083611973
best_error: 9.679921079586421
best_error: 9.67992097926125
best_error: 9.679892558941308
best_error: 9.679892556103464
best_error: 9.679892550217552
best_error: 9.67988848183022
best_error: 9.679888477804534
best_error: 9.679888377477795
