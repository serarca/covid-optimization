ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 76
days_switch 45
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.62116211114629
best_error: 101.6211620303522
best_error: 101.6211619343704
best_error: 19.313239288183397
best_error: 19.31323928818052
best_error: 19.313239282239294
best_error: 19.303347456416194
best_error: 19.30334745641318
best_error: 19.303347450128896
best_error: 19.257206758589156
best_error: 19.25720675858474
best_error: 19.257206750479995
best_error: 18.70718608274823
best_error: 18.707186082336275
best_error: 18.70718602881372
best_error: 18.51054064747099
best_error: 18.51054064672711
best_error: 18.51054057193604
best_error: 17.872477826408996
best_error: 17.87247782421732
best_error: 17.87247767407853
best_error: 16.544946298822566
best_error: 16.544946292817293
best_error: 16.544945990105898
best_error: 14.235845087192242
best_error: 14.23584508054493
best_error: 14.235844966995602
best_error: 14.16776329362639
best_error: 14.167763289997762
best_error: 14.167763285186382
best_error: 14.16776285973857
best_error: 14.138211807452432
best_error: 14.138211803438633
best_error: 14.138211796354728
best_error: 14.138211788952548
best_error: 13.889623383146983
best_error: 13.889623378027448
best_error: 13.889623370417654
best_error: 13.889623364380595
best_error: 13.09199334285004
best_error: 13.091993340613843
best_error: 13.09199333473321
best_error: 13.091993321514096
best_error: 12.776577473354173
best_error: 12.776577459883152
best_error: 12.77657745050654
best_error: 12.211749182301201
best_error: 12.211749178858739
best_error: 12.211749175998026
best_error: 12.211749162037881
best_error: 11.978664306887799
best_error: 11.978664300657023
best_error: 11.97866428674463
best_error: 11.763359019245893
best_error: 11.763358997079244
best_error: 11.655918876782458
best_error: 11.65591876594876
best_error: 11.604164011247878
best_error: 11.604163999023136
best_error: 11.604163994638043
best_error: 11.570875612784928
best_error: 11.570875601930155
best_error: 11.570875596975911
best_error: 11.538768033808472
best_error: 11.538768029741643
best_error: 11.538768024367759
best_error: 11.538768017019233
best_error: 11.538589356833988
best_error: 11.538589102982732
best_error: 11.527469611475933
best_error: 11.527469601627521
best_error: 11.527469596073361
best_error: 11.513281122051225
best_error: 11.513281114825531
best_error: 11.513281107051087
best_error: 11.454288649697865
best_error: 11.454288644432532
best_error: 11.454288644050298
best_error: 11.454288637545632
best_error: 11.454288635161127
best_error: 11.152873591768008
best_error: 11.152873407816463
best_error: 10.8470731462975
best_error: 10.847072899588648
best_error: 10.720407149148457
best_error: 10.720407136560217
best_error: 10.720407131259972
best_error: 10.66545861951133
best_error: 10.665458600071963
best_error: 10.656969700029027
best_error: 10.656969683481087
best_error: 10.654869483257048
best_error: 10.654869467873537
best_error: 10.650705271517507
best_error: 10.650705256267152
best_error: 10.645751200089869
best_error: 10.645751065971796
best_error: 10.635701578929599
best_error: 10.635701466121755
best_error: 10.633906717046374
best_error: 10.633906608357687
best_error: 10.6336261005752
best_error: 10.633625991866534
best_error: 10.633616104559742
best_error: 10.633616087474419
best_error: 10.633534360144449
best_error: 10.633534245233562
best_error: 10.631493094638417
best_error: 10.631492973568454
best_error: 10.63108067383375
best_error: 10.631080659002548
best_error: 10.627515222734383
best_error: 10.627515206987526
best_error: 10.62482920799693
best_error: 10.624829191583085
best_error: 10.622053688961042
best_error: 10.622053598884216
best_error: 10.621150937177468
best_error: 10.621150919477707
best_error: 10.61923599107101
best_error: 10.619235972652277
best_error: 10.615903349311521
best_error: 10.61590333149357
best_error: 10.614931024111478
best_error: 10.61493089636003
best_error: 10.613278247404338
best_error: 10.613278232425944
best_error: 10.611647744220704
best_error: 10.611647644951072
best_error: 10.611607571015094
best_error: 10.611607554604765
best_error: 10.611186687858499
best_error: 10.611186672243573
best_error: 10.610791575087326
best_error: 10.610791462686825
best_error: 10.610745142026232
best_error: 10.61074512618816
best_error: 10.610670940316654
best_error: 10.610670924137352
best_error: 10.60667852113728
best_error: 10.606678503928926
best_error: 10.601501627471357
best_error: 10.601501610349477
best_error: 10.598185677274987
best_error: 10.598185660131271
best_error: 10.568855956844976
best_error: 10.56885593944889
best_error: 10.56878191511893
best_error: 10.56878189770275
best_error: 10.504861814088862
best_error: 10.504861798698897
best_error: 10.500299597276587
best_error: 10.500299514756792
best_error: 10.500212060788314
best_error: 10.500212045571608
best_error: 10.499978736932311
best_error: 10.49997865438537
best_error: 10.499555510164175
best_error: 10.499555494809742
