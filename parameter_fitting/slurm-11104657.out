ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 84
days_switch 15
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 97.33865101216296
best_error: 97.33865093877856
best_error: 97.3386508885865
best_error: 97.33865086435992
best_error: 97.33865084061763
best_error: 18.69245514147366
best_error: 18.692454945341268
best_error: 18.692453579606607
best_error: 16.80956483839172
best_error: 16.809564838304215
best_error: 16.809564821062725
best_error: 16.775616759868786
best_error: 16.775616759777193
best_error: 16.775616741382894
best_error: 16.61846625768332
best_error: 16.618466257598534
best_error: 16.61846623286349
best_error: 14.813249367885495
best_error: 14.813249173966382
best_error: 13.790043037268422
best_error: 13.79004270713385
best_error: 13.207088152958098
best_error: 13.20708774464385
best_error: 12.375818440645062
best_error: 12.375817927603146
best_error: 11.396104350713228
best_error: 11.396103819985862
best_error: 10.733976160251586
best_error: 10.7339757509179
best_error: 10.07797225544328
best_error: 10.077972023229659
best_error: 9.994962409861671
best_error: 9.994962389751205
best_error: 9.948666433914607
best_error: 9.948666414816945
best_error: 9.946865747693417
best_error: 9.946865556893266
best_error: 9.945600945444736
best_error: 9.945600926418084
best_error: 9.945135095262051
best_error: 9.945134904258886
best_error: 9.944626693059671
best_error: 9.944626674221894
best_error: 9.944617439765295
best_error: 9.944617249010808
best_error: 9.944390342546013
best_error: 9.944390323712724
best_error: 9.944386752621874
best_error: 9.944386561839988
best_error: 9.944383190199696
best_error: 9.944383171366589
best_error: 9.944379119873139
best_error: 9.944379119873
best_error: 9.944379115717062
best_error: 9.944379109704563
best_error: 9.944379104236434
best_error: 9.944262213805223
best_error: 9.944262018831754
best_error: 9.910302001931246
best_error: 9.910301794899997
best_error: 9.817364330684253
best_error: 9.817364312983946
best_error: 9.743620273077205
best_error: 9.743620254534598
best_error: 9.32873879557132
best_error: 9.32873878090425
best_error: 9.328738780069632
best_error: 9.328738778509582
best_error: 9.211100964746496
best_error: 9.211100885396926
best_error: 8.608514190714027
best_error: 8.608514128629697
best_error: 8.529128324961265
best_error: 8.529128288976468
best_error: 8.492526424711528
best_error: 8.49252640462524
best_error: 8.475355441772857
best_error: 8.475355422066485
best_error: 8.452739792954063
best_error: 8.452739772677734
best_error: 8.450331461623584
best_error: 8.45033142208975
best_error: 8.362642077762978
best_error: 8.362641992162036
best_error: 8.289292876579879
best_error: 8.289292855275987
best_error: 8.212150429036633
best_error: 8.212150035855176
best_error: 8.12379709007023
best_error: 8.123797073890724
best_error: 8.09634325241378
best_error: 8.09634321689104
best_error: 8.090623492330106
best_error: 8.090623384992773
best_error: 8.07067127657548
best_error: 8.07067116019906
best_error: 8.066428594395532
best_error: 8.066428558472639
best_error: 8.061303563220715
best_error: 8.061303527462208
best_error: 8.057949552223231
best_error: 8.057949414152322
best_error: 8.048825619444182
best_error: 8.048825526788228
best_error: 8.045388689819827
best_error: 8.045388606414381
best_error: 8.042176468782554
best_error: 8.042176389708022
best_error: 8.041925875173188
best_error: 8.041925834728133
best_error: 8.040408740544658
best_error: 8.04040867103035
best_error: 8.040135568991277
best_error: 8.040135528745282
best_error: 8.035084394630946
best_error: 8.035084354429284
best_error: 8.020481596932607
best_error: 8.020481556607844
best_error: 7.998573425476665
best_error: 7.998573392415897
best_error: 7.996721452313691
best_error: 7.996721419444227
best_error: 7.9666111906794335
best_error: 7.966611159387169
best_error: 7.951032375552588
best_error: 7.951032341769655
best_error: 7.90754577534034
best_error: 7.9075457407601295
best_error: 7.784936374680146
best_error: 7.784936334934146
best_error: 7.664231363439596
best_error: 7.664231343676558
best_error: 7.66011555675847
best_error: 7.660115518515542
best_error: 7.6227415231490525
best_error: 7.622741495023743
best_error: 7.562880885607943
best_error: 7.562880861891205
best_error: 7.480763195825106
best_error: 7.480762952677664
best_error: 7.457517521190231
best_error: 7.457517320025621
best_error: 7.457074879625242
best_error: 7.4570748683740415
best_error: 7.457074864840543
best_error: 7.402094757398882
best_error: 7.402094755226142
best_error: 7.402094743974409
best_error: 7.3807120053684585
best_error: 7.3807119965872445
best_error: 7.380711990097407
best_error: 7.379867994169131
best_error: 7.379867921788957
best_error: 7.369223264199924
best_error: 7.369223259833536
best_error: 7.369223258759611
best_error: 7.369223253109961
best_error: 7.35512984448723
best_error: 7.355129842115467
best_error: 7.355129839955685
best_error: 7.355129834148488
best_error: 7.289493463612589
best_error: 7.289493455677864
best_error: 7.289493445565872
best_error: 7.275656726418634
best_error: 7.275656715654902
best_error: 7.275656704794006
best_error: 7.209918175251837
best_error: 7.20991816130591
best_error: 7.209918152667939
best_error: 7.162114029784394
best_error: 7.162114023638326
best_error: 7.162114023486947
best_error: 7.162114010925827
