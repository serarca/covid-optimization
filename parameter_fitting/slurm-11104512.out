ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 72
days_switch 35
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.95013022431391
best_error: 101.95013004948524
best_error: 101.95013003709022
best_error: 20.02520782798459
best_error: 20.02520782798288
best_error: 20.02520782464034
best_error: 20.024483660574514
best_error: 20.024483657209732
best_error: 20.02154226609897
best_error: 20.0215422626503
best_error: 20.009015857554857
best_error: 20.009015853739974
best_error: 19.943067701997634
best_error: 19.943067696045397
best_error: 16.95714106671263
best_error: 16.957140730323843
best_error: 14.658984682383945
best_error: 14.658984078523638
best_error: 14.478155693795497
best_error: 14.478155636219366
best_error: 13.617928051494866
best_error: 13.617927487829464
best_error: 13.182358948711293
best_error: 13.182358910943705
best_error: 13.026474954856267
best_error: 13.026474943121434
best_error: 13.02647494273047
best_error: 13.019832641182774
best_error: 13.019832630227372
best_error: 13.01983262920275
best_error: 13.014653513268506
best_error: 13.014653502831742
best_error: 13.014653501401847
best_error: 13.01184628262029
best_error: 13.011846272318792
best_error: 13.011846270810171
best_error: 13.010324337113472
best_error: 13.010324326930292
best_error: 13.010324325334572
best_error: 13.009418301827289
best_error: 13.0094182918939
best_error: 13.009418290068579
best_error: 13.00734120987358
best_error: 13.00734120079212
best_error: 13.007341198154215
best_error: 13.006577786063506
best_error: 13.006577527235336
best_error: 13.003070613786111
best_error: 13.003070604279088
best_error: 13.003070602051888
best_error: 12.987345075675258
best_error: 12.987345065680493
best_error: 12.987345063856338
best_error: 12.930753852078087
best_error: 12.930753841011459
best_error: 12.930753839910466
best_error: 12.907906903395073
best_error: 12.907906891548413
best_error: 12.907906890880426
best_error: 12.900635069950589
best_error: 12.9006350575647
best_error: 12.900635057249225
best_error: 12.896717438686771
best_error: 12.896717426246505
best_error: 12.896717425910893
best_error: 12.895526062381755
best_error: 12.895526049910334
best_error: 12.895526049583056
best_error: 12.895061147091642
best_error: 12.895061134619045
best_error: 12.895061134284006
best_error: 12.894883504926934
best_error: 12.894883492304775
best_error: 12.894883492115916
best_error: 12.894588620396377
best_error: 12.894588607774825
best_error: 12.894588607581305
best_error: 12.894549568262759
best_error: 12.89454955564129
best_error: 12.89454955544715
best_error: 12.894546012309881
best_error: 12.894545978999286
best_error: 12.880697372096385
best_error: 12.880697359584438
best_error: 12.880697359245563
best_error: 12.795384376903396
best_error: 12.79538434505869
best_error: 12.786853314683801
best_error: 12.78685328332002
best_error: 12.78070539707991
best_error: 12.780705385390844
best_error: 12.780705383951178
best_error: 12.76937249968205
best_error: 12.769372487992698
best_error: 12.769372486546974
best_error: 12.72851115676519
best_error: 12.72851097637908
best_error: 12.70970959877399
best_error: 12.70970942531129
best_error: 12.68435412731684
best_error: 12.684354120065992
best_error: 12.68435396422067
best_error: 12.657913594499849
best_error: 12.657913582432606
best_error: 12.657913580996365
best_error: 12.65687481673184
best_error: 12.656874809801725
best_error: 12.656874659093514
best_error: 12.656420208162636
best_error: 12.656420196109993
best_error: 12.656420194659848
best_error: 12.65580861109326
best_error: 12.655808607113965
best_error: 12.655808597597492
best_error: 12.65536112178914
best_error: 12.655361117812266
best_error: 12.655361108299113
best_error: 12.655211641964698
best_error: 12.655211637988625
best_error: 12.655211628476579
best_error: 12.6551995075678
best_error: 12.655199503591795
best_error: 12.655199494079842
best_error: 12.655198846658315
best_error: 12.655198839739153
best_error: 12.655198689188856
best_error: 12.655197468738347
best_error: 12.655197464762356
best_error: 12.655197455250416
best_error: 12.655196916493423
best_error: 12.655196909574261
best_error: 12.655196759023912
best_error: 12.655196607023157
best_error: 12.655196595009631
best_error: 12.655196593535226
best_error: 12.653598111421717
best_error: 12.653598099417138
best_error: 12.653598097947512
best_error: 12.45688807989379
best_error: 12.456888035042152
best_error: 12.419568231170132
best_error: 12.419568220446857
best_error: 12.284370571515662
best_error: 12.284370560644403
best_error: 12.284370560559779
best_error: 12.243507196029359
best_error: 12.243507191037665
best_error: 12.243507183278414
best_error: 12.054624495891257
best_error: 12.054624490313177
best_error: 12.054624482766426
best_error: 12.021458279533867
best_error: 12.021458272429111
best_error: 12.02145826696276
best_error: 12.006983916135358
best_error: 12.006983901615438
best_error: 11.965213756868208
best_error: 11.965213751110657
best_error: 11.965213743444245
best_error: 11.91020375416963
best_error: 11.910203748987433
best_error: 11.910203740364539
best_error: 11.90553083357575
best_error: 11.905530833575748
best_error: 11.905530829637737
best_error: 11.905530819845449
best_error: 11.896918136038511
best_error: 11.896918130973408
best_error: 11.896918122177379
best_error: 11.733467587758364
best_error: 11.733467581567748
best_error: 11.733467574308317
best_error: 11.683152101106675
best_error: 11.683152079198056
best_error: 11.683151643882201
best_error: 11.500007833837842
best_error: 11.5000078178611
best_error: 11.500007473507473
best_error: 11.395885060718914
best_error: 11.395885056357336
best_error: 11.381196718423475
best_error: 11.38119671519338
best_error: 11.381196609060819
best_error: 11.381141526247339
best_error: 11.381141522016938
best_error: 11.377065378557647
best_error: 11.377065377169384
best_error: 11.377065374360496
best_error: 11.376285612548095
best_error: 11.376285607728743
best_error: 11.376285462821379
best_error: 11.374561197121498
best_error: 11.374561192291413
best_error: 11.374561047158668
best_error: 11.374481419891321
best_error: 11.374481415060675
best_error: 11.37448126991547
best_error: 11.374445058815066
best_error: 11.374445053984168
best_error: 11.374444908833286
best_error: 11.374432282503935
best_error: 11.374432268481339
best_error: 11.374431932207182
best_error: 11.374427402841574
best_error: 11.374427398010555
best_error: 11.374427252856897
best_error: 11.374380648011984
best_error: 11.37438064318064
best_error: 11.374380498019605
best_error: 11.37437560789558
best_error: 11.374375603064198
best_error: 11.374375457902374
best_error: 11.374372875536974
best_error: 11.374372870705574
best_error: 11.374372725543324
best_error: 11.374370043904452
best_error: 11.374370039073032
best_error: 11.374369893910327
best_error: 11.374367810363724
best_error: 11.374367805532291
best_error: 11.374367660369233
best_error: 11.374367268604713
best_error: 11.374367263773275
best_error: 11.374367118610134
best_error: 11.374367044077266
best_error: 11.374367039245822
best_error: 11.37436689408265
best_error: 11.37436679351952
best_error: 11.374366788688075
best_error: 11.374366643524864
best_error: 11.374366557465903
best_error: 11.374366508169755
best_error: 11.374366462890453
best_error: 11.374366441226481
best_error: 11.374366365021945
