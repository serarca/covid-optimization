ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 72
days_switch 15
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.68260439768065
best_error: 101.68260431717667
best_error: 101.68260421068045
best_error: 20.03778693739371
best_error: 20.037786937391957
best_error: 20.037786933761033
best_error: 20.033963451859826
best_error: 20.033963448127487
best_error: 20.017553950097927
best_error: 20.017553945901778
best_error: 19.919355132906542
best_error: 19.919355123946648
best_error: 19.67592048522
best_error: 19.675920451607624
best_error: 18.60071997282109
best_error: 18.600719794483275
best_error: 16.953586003925285
best_error: 16.95358562595029
best_error: 15.482044018412397
best_error: 15.482043816118207
best_error: 14.994062440072131
best_error: 14.994062332939642
best_error: 14.49824075313185
best_error: 14.498240739282004
best_error: 14.498240732761882
best_error: 14.293343268846186
best_error: 14.293343266674547
best_error: 14.29334326255139
best_error: 14.29334325814719
best_error: 14.29334324741507
best_error: 13.884690946574004
best_error: 13.88469092750755
best_error: 13.884690922563548
best_error: 13.343868727443883
best_error: 13.343868676643885
best_error: 13.278026353404243
best_error: 13.278026350035796
best_error: 13.278026349694642
best_error: 13.27802634659771
best_error: 13.27802633363703
best_error: 13.261643216168462
best_error: 13.261643191320669
best_error: 13.199015051305832
best_error: 13.199015001372622
best_error: 13.175215257651889
best_error: 13.175215240294254
best_error: 13.175215239012672
best_error: 13.13027453117628
best_error: 13.13027451585841
best_error: 13.130274513584887
best_error: 13.092029491828441
best_error: 13.092029478390707
best_error: 13.092029475117542
best_error: 13.064735908710983
best_error: 13.064735897992545
best_error: 13.064735892581712
best_error: 13.057055305760976
best_error: 13.057055083899847
best_error: 13.026439782687584
best_error: 13.026439778161834
best_error: 13.026439757050586
best_error: 13.004396374951114
best_error: 13.004396367601643
best_error: 13.004396367395195
best_error: 13.004396363126897
best_error: 13.004396359764808
best_error: 12.963179834527365
best_error: 12.963179796806362
best_error: 12.951106090628048
best_error: 12.951106077094419
best_error: 12.951106074410058
best_error: 12.946433550071138
best_error: 12.94643353543931
best_error: 12.946433533676004
best_error: 12.913748057348295
best_error: 12.913748019767302
best_error: 12.715468966435896
best_error: 12.715468951963295
best_error: 12.715468949332385
best_error: 12.70631151315801
best_error: 12.706311476176312
best_error: 12.681678954587161
best_error: 12.681678918101056
best_error: 12.53419493988886
best_error: 12.534194931563528
best_error: 12.534194931414977
best_error: 12.534194924164506
best_error: 12.36242460674694
best_error: 12.362424600354897
best_error: 12.362424565847892
best_error: 12.205061106147125
best_error: 12.20506109835111
best_error: 12.205061083765402
best_error: 12.13997051595786
best_error: 12.139970489776667
best_error: 11.923528238627963
best_error: 11.923528220704647
best_error: 11.83265545848382
best_error: 11.83265544923076
best_error: 11.83265543360593
best_error: 11.817401977245353
best_error: 11.817401968812359
best_error: 11.817401951405337
best_error: 11.812573689310305
best_error: 11.812573681314515
best_error: 11.812573663538819
best_error: 11.809998526975903
best_error: 11.809998519068504
best_error: 11.809998501225152
best_error: 11.809649226738062
best_error: 11.809649218834384
best_error: 11.809649200995004
best_error: 11.809567649706185
best_error: 11.809567641803369
best_error: 11.809567623964925
best_error: 11.809567298932219
best_error: 11.809567057240807
best_error: 11.809545012526913
best_error: 11.809545004624349
best_error: 11.809544986786092
best_error: 11.80954150297207
best_error: 11.80954149506955
best_error: 11.809541477231315
best_error: 11.809540664162796
best_error: 11.809540540203368
best_error: 11.799765054541165
best_error: 11.799764813805552
best_error: 11.747329308623215
best_error: 11.747329292202272
best_error: 11.74142988671905
best_error: 11.741429869230945
best_error: 11.739038319192636
best_error: 11.739038301654183
best_error: 11.738482031469294
best_error: 11.738482013750737
best_error: 11.738374302303535
best_error: 11.738374284583436
best_error: 11.738373545645805
best_error: 11.738373463401217
best_error: 11.736744536426572
best_error: 11.736744518463471
best_error: 11.732657035325909
best_error: 11.732657017476171
best_error: 11.70995735408488
best_error: 11.709957334434907
best_error: 11.700044931408716
best_error: 11.700044912078367
best_error: 11.685874020109917
best_error: 11.685874001117831
best_error: 11.600318629517318
best_error: 11.600318627681334
best_error: 11.600318625185077
best_error: 11.568040938342348
best_error: 11.568040936417251
best_error: 11.568040933965083
best_error: 11.557594375652448
best_error: 11.55759437042826
best_error: 11.556428477063273
best_error: 11.556428477063271
best_error: 11.556428472966012
best_error: 11.556428471927028
best_error: 11.555528942685836
best_error: 11.555528939168884
best_error: 11.555528937536446
best_error: 11.555043174160959
best_error: 11.555043170641252
best_error: 11.555043169004321
best_error: 11.554708501804956
best_error: 11.554708498351905
best_error: 11.554708496643272
best_error: 11.554464995803153
best_error: 11.554464992348684
best_error: 11.554464990637783
best_error: 11.554284104527678
best_error: 11.554284101106322
best_error: 11.554284099359537
best_error: 11.554164106630148
best_error: 11.554164103208084
best_error: 11.55416410146017
best_error: 11.55406505674253
best_error: 11.554065053320071
best_error: 11.55406505157158
best_error: 11.554030572444537
best_error: 11.554030569021942
best_error: 11.55403056727324
best_error: 11.55401738605576
best_error: 11.554017382633113
best_error: 11.55401738088434
best_error: 11.553995984524903
best_error: 11.553995935770104
best_error: 11.551694508932401
best_error: 11.55169444152464
best_error: 11.5469130121842
best_error: 11.546913012184199
best_error: 11.546913006950085
best_error: 11.518990017894073
best_error: 11.518990012659156
best_error: 11.51172850042695
best_error: 11.511728493386979
best_error: 11.51172832534241
best_error: 11.505510626829501
best_error: 11.5055106268295
best_error: 11.5055106210565
best_error: 11.50494611603676
best_error: 11.504946116036757
best_error: 11.50494611026533
