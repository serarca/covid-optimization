ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 92
days_switch 40
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 98.42659648789723
best_error: 98.42659632265239
best_error: 98.42659626816143
best_error: 15.53662207403954
best_error: 15.536622064629878
best_error: 15.530168627997949
best_error: 15.530168625730337
best_error: 15.528706570272945
best_error: 15.528706567983962
best_error: 15.522883634734429
best_error: 15.522883632808043
best_error: 15.511547902004459
best_error: 15.51154790192087
best_error: 15.511547901655518
best_error: 15.504562408043618
best_error: 15.504562407967793
best_error: 15.504562407600819
best_error: 15.480008455182123
best_error: 15.480008453459597
best_error: 14.648507416831647
best_error: 14.648507396492281
best_error: 13.758952617302675
best_error: 13.75895259068407
best_error: 13.681194466869002
best_error: 13.681194466854114
best_error: 13.68119446670644
best_error: 13.679815528836446
best_error: 13.679815528590016
best_error: 13.679798085902618
best_error: 13.679798085664418
best_error: 13.67974668400793
best_error: 13.679746683993262
best_error: 13.679746683822886
best_error: 13.679723677410259
best_error: 13.679723677088814
best_error: 13.679633568773097
best_error: 13.679633568444837
best_error: 13.679273235161302
best_error: 13.679273235146434
best_error: 13.67927323497711
best_error: 13.677906041408743
best_error: 13.677906041393046
best_error: 13.677906041231925
best_error: 13.672801601154642
best_error: 13.672801601134738
best_error: 13.672801600986496
best_error: 13.669809651557289
best_error: 13.669809651530866
best_error: 13.669809651390974
best_error: 13.669030183235884
best_error: 13.669030183045141
best_error: 13.667252514366536
best_error: 13.66725251434288
best_error: 13.667252514342787
best_error: 13.666985037888184
best_error: 13.666985037795822
best_error: 13.666948424408083
best_error: 13.666948424354743
best_error: 13.666921747942606
best_error: 13.666921747763597
best_error: 13.666919428741155
best_error: 13.666919427865926
best_error: 13.666888959828222
best_error: 13.666888958942822
best_error: 13.666803625629642
best_error: 13.666803625281945
best_error: 13.665095137038453
best_error: 13.66509513703677
best_error: 13.66509513624155
best_error: 13.650802668688577
best_error: 13.650802668672144
best_error: 13.650802667817548
best_error: 13.65080266676631
best_error: 13.388041984557663
best_error: 13.388041984425262
best_error: 13.388041974579126
best_error: 13.353968345443828
best_error: 13.353968334670352
best_error: 13.340449151818829
best_error: 13.3404491466728
best_error: 13.340449137838208
best_error: 13.326305299898545
best_error: 13.326305299037308
best_error: 13.326305297169496
best_error: 13.31973293757992
best_error: 13.31973293757962
best_error: 13.31973293281591
best_error: 13.319531195090079
best_error: 13.319531195089771
best_error: 13.319531190320498
best_error: 13.318978566850472
best_error: 13.31897856685013
best_error: 13.3189785616182
best_error: 13.250043182012346
best_error: 13.250043181702646
best_error: 13.250043181198073
best_error: 13.2408810247228
best_error: 13.240881024185908
best_error: 13.24088101749315
best_error: 13.240875342633446
best_error: 13.24087534186202
best_error: 13.2408753326368
best_error: 13.240874947316913
best_error: 13.24087494677917
best_error: 13.240874940087522
best_error: 13.240871809133896
best_error: 13.240871808595701
best_error: 13.240871801904666
best_error: 13.240871788820709
best_error: 13.240871788049638
best_error: 13.240871778822326
best_error: 13.221078337552084
best_error: 13.221078335905277
best_error: 13.221078334575374
best_error: 13.221078322769902
best_error: 13.219997085904998
best_error: 13.219997084267845
best_error: 13.219997082418649
best_error: 13.219997073927143
best_error: 12.729351362184095
best_error: 12.729351361641287
best_error: 12.729351341081955
best_error: 12.72935133839142
best_error: 12.716721906455549
best_error: 12.716721901420593
best_error: 12.716721867693991
best_error: 12.690072992239392
best_error: 12.690072990844532
best_error: 12.690072974137463
best_error: 12.682917775414264
best_error: 12.682917774303187
best_error: 12.682917757594339
best_error: 12.656779563502788
best_error: 12.656779556974648
best_error: 12.656779501885422
best_error: 12.596341788458254
best_error: 12.596341786072188
best_error: 12.596341762919396
best_error: 12.583904722369555
best_error: 12.58390472236951
best_error: 12.583904722344279
best_error: 12.583904708930618
best_error: 12.578738539646208
best_error: 12.578738539646176
best_error: 12.57873853962222
best_error: 12.578738525827971
best_error: 12.570081688365052
best_error: 12.57008168836501
best_error: 12.570081688339991
best_error: 12.570081675046069
best_error: 12.54811526886603
best_error: 12.548115268866
best_error: 12.54811526883363
best_error: 12.548115255009973
best_error: 12.480927000666526
best_error: 12.480927000454962
best_error: 12.480926989799466
best_error: 12.393793220264785
best_error: 12.393793220264612
best_error: 12.393793220090132
best_error: 12.393793212627132
best_error: 12.381311272150906
best_error: 12.381311266224493
best_error: 12.381311214726601
best_error: 12.366001696178564
best_error: 12.366001695656852
best_error: 12.366001675812097
best_error: 12.364982969009503
best_error: 12.36498296337845
best_error: 12.36498291131127
best_error: 12.36498024641451
best_error: 12.364980240783467
best_error: 12.364980188718144
best_error: 12.364976401738367
best_error: 12.36497639610733
best_error: 12.364976344044678
best_error: 12.364975581396088
best_error: 12.364975575765069
best_error: 12.364975523702967
best_error: 12.364974965360267
best_error: 12.364974959729263
best_error: 12.364974907667579
best_error: 12.364974478105095
best_error: 12.364974472474081
best_error: 12.364974420412757
best_error: 12.36497413147752
best_error: 12.364974125846468
best_error: 12.364974073794896
best_error: 12.363424298179797
best_error: 12.36342428688691
best_error: 11.066132631675282
best_error: 11.066132609852746
best_error: 11.06613201540598
best_error: 11.013072631385512
best_error: 11.013072608867327
best_error: 11.013072585278133
best_error: 10.981858044448035
best_error: 10.981858026685842
best_error: 10.956416912821073
best_error: 10.956416893835906
best_error: 10.951683535500099
best_error: 10.951683515828364
