ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.483634666663608
best_error: 11.483634663566306
best_error: 10.700890311167004
best_error: 10.700890212492737
best_error: 9.578876993957156
best_error: 9.578876753875726
best_error: 7.2225800866689225
best_error: 7.222580086668922
best_error: 7.1113454899906445
best_error: 7.111345489990643
best_error: 7.111345482652115
best_error: 7.105639266281439
best_error: 7.10563920207948
best_error: 7.103160517653054
best_error: 7.103160517653049
best_error: 7.1031605094972345
best_error: 7.102986470690439
best_error: 7.102986406747779
best_error: 7.10288414808597
best_error: 7.102884148085967
best_error: 7.102884139912206
best_error: 7.102773168880761
best_error: 7.102773104917082
best_error: 7.102754015841306
best_error: 7.102754015841302
best_error: 7.102754007649007
best_error: 7.102753890947573
best_error: 7.102753826982019
best_error: 7.095195833030809
best_error: 7.095195833030805
best_error: 7.0951958245364155
best_error: 7.064437738013993
best_error: 7.0644377380139876
best_error: 7.064437728579138
best_error: 6.9300038237984065
best_error: 6.930003823798401
best_error: 6.930003811452677
best_error: 6.904486274654428
best_error: 6.90062411320545
best_error: 6.89660648223933
best_error: 6.882720020509171
best_error: 6.88272002050917
best_error: 6.87965388086168
best_error: 6.879653880861677
best_error: 6.878268777514899
best_error: 6.878217776152195
best_error: 6.878050799481118
best_error: 6.878044786882304
best_error: 6.878044786882302
best_error: 6.878039479302522
best_error: 6.878039479302521
best_error: 6.8780359613807915
best_error: 6.878035961380789
best_error: 6.878033576264061
best_error: 6.878033576264059
best_error: 6.878031896208699
best_error: 6.878031896208698
best_error: 6.878030632085604
best_error: 6.878030632085602
best_error: 6.878029544771723
best_error: 6.878029544771719
best_error: 6.8780282651181945
best_error: 6.878028265118192
best_error: 6.878025924623228
best_error: 6.878025924623225
best_error: 6.7510998942084655
best_error: 6.751099894208457
best_error: 6.751099871507118
best_error: 6.733434928221584
best_error: 6.733434928221577
best_error: 6.733434901096871
best_error: 6.703625438042185
best_error: 6.703625373818838
best_error: 6.703625364960253
best_error: 6.649863743284589
best_error: 6.649863680955685
best_error: 6.6498636644145295
best_error: 6.3686285475999656
best_error: 6.368628547599957
best_error: 6.3686284930422
best_error: 5.725259558221758
best_error: 5.725259339709853
best_error: 5.710613047379247
best_error: 5.710613047379244
best_error: 5.4434431314964895
best_error: 5.443443084518427
best_error: 5.443443015279786
best_error: 5.433722068699135
best_error: 5.433722068699129
best_error: 5.433722029249058
best_error: 5.4051411375239695
best_error: 5.405141096420452
best_error: 5.399613922137727
best_error: 5.399613886121125
best_error: 5.396106643744485
best_error: 5.396106611552311
best_error: 5.393995604413177
best_error: 5.3939955753073585
best_error: 5.392440023589252
best_error: 5.392439996862398
best_error: 5.3919974754366615
best_error: 5.391997475436656
best_error: 5.3917168414817835
best_error: 5.391716815636676
best_error: 5.3916729699966925
best_error: 5.391672944144254
best_error: 5.391664230908519
best_error: 5.391664205054626
best_error: 5.391658820809963
best_error: 5.391658794955163
best_error: 5.391656786827683
best_error: 5.391656786827677
best_error: 5.391656763584284
best_error: 5.391656722373275
best_error: 5.391656696518125
best_error: 5.391634524886491
best_error: 5.39163452003112
best_error: 5.391634516293455
best_error: 5.391545914241196
best_error: 5.3915459142411875
best_error: 5.391194976403307
best_error: 5.391194976403301
best_error: 5.389820017315326
best_error: 5.389820017315318
best_error: 5.384761331648074
best_error: 5.384761331648066
best_error: 5.3654699714623675
best_error: 5.3654699714623595
best_error: 5.365465415153748
best_error: 5.365465415153738
best_error: 5.365462548467175
best_error: 5.365462548467168
best_error: 5.365460750663161
best_error: 5.36546075066315
best_error: 5.365459858673333
best_error: 5.365459858673324
best_error: 5.365459253148019
best_error: 5.365459253148012
best_error: 5.3654588221869
best_error: 5.36545882218689
best_error: 5.365458488554975
best_error: 5.365458488554965
best_error: 5.365458186103711
best_error: 5.365458186103702
best_error: 5.365458017921943
best_error: 5.3654580179219336
best_error: 5.365457877126738
best_error: 5.365457877126728
best_error: 5.365457745528661
best_error: 5.3654577455286505
best_error: 5.365457627386184
best_error: 5.365457627386175
best_error: 5.365457553743004
best_error: 5.365457553742995
best_error: 5.365457532254777
best_error: 5.365457532254769
best_error: 5.3654575137616
best_error: 5.365457513761592
best_error: 5.365457342102505
best_error: 5.365457342102497
best_error: 5.365457176336486
best_error: 5.365457176336479
best_error: 5.3654565132742515
best_error: 5.365456513274242
best_error: 5.365453861054675
best_error: 5.365453861054665
best_error: 5.36544325264634
best_error: 5.365443252646331
best_error: 5.365400826532296
best_error: 5.365400826532288
best_error: 5.3652318244767425
best_error: 5.365231824476735
best_error: 5.364568417098772
best_error: 5.3645684170987655
best_error: 5.362044200324848
best_error: 5.362044200324842
best_error: 5.354483131865957
best_error: 5.354483131865953
best_error: 5.352188425174129
best_error: 5.35218842517412
best_error: 5.352188425174073
best_error: 5.351831139033317
best_error: 5.351831139033308
best_error: 5.351831139033273
best_error: 5.3518257167898025
best_error: 5.351825716789795
best_error: 5.35182571678977
best_error: 5.35174367495922
best_error: 5.351743674959211
best_error: 5.351743674959182
best_error: 5.351449476111387
best_error: 5.351449476111379
best_error: 5.351449476111343
best_error: 5.349127747655299
best_error: 5.349127747655292
best_error: 5.349127747655238
best_error: 5.349019436788607
best_error: 5.349019436788599
best_error: 5.349019436788552
best_error: 5.348945790589926
best_error: 5.348945790589915
best_error: 5.348945790589864
best_error: 5.348836839581379
best_error: 5.348836839581373
best_error: 5.3488368395813195
best_error: 5.3487134426395935
best_error: 5.348713442639585
best_error: 5.348713442639531
best_error: 5.34859020552926
best_error: 5.34859020552925
best_error: 5.3485902055292
best_error: 5.348587078337482
best_error: 5.348587078337473
best_error: 5.34858707833742
best_error: 5.348584181033441
best_error: 5.3485841810334325
best_error: 5.348584181033377
best_error: 5.3485839754066244
best_error: 5.348583975406616
best_error: 5.348583975406563
best_error: 5.3485838678060595
best_error: 5.348583867806051
best_error: 5.348583867806003
best_error: 5.348583851382542
best_error: 5.348583851382534
best_error: 5.3485838513824815
best_error: 5.348583826011959
best_error: 5.348583826011951
best_error: 5.348583826011897
best_error: 5.3485838253002
best_error: 5.348583784191537
