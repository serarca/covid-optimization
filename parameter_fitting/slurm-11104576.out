ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 76
days_switch 95
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 110.53342669694757
best_error: 110.53342657344653
best_error: 110.53342652046702
best_error: 19.26363187778359
best_error: 19.263631877780234
best_error: 19.263631871795184
best_error: 19.2593379576573
best_error: 19.25933795155163
best_error: 19.24128887482273
best_error: 19.241288868209136
best_error: 19.15124074647208
best_error: 19.151240736956915
best_error: 17.23537612878081
best_error: 17.235375980514295
best_error: 16.75574468172957
best_error: 16.75574449521101
best_error: 16.260361767703944
best_error: 16.260361620539296
best_error: 15.965142614791942
best_error: 15.965142450902011
best_error: 15.650075792054357
best_error: 15.650075609463645
best_error: 14.543342223685448
best_error: 14.5433420499063
best_error: 14.126950963731453
best_error: 14.126950857006094
best_error: 14.030656956891855
best_error: 14.03065688332266
best_error: 13.981188888644748
best_error: 13.981188861543552
best_error: 13.943544064158763
best_error: 13.943544047036013
best_error: 13.8242906833569
best_error: 13.824290670209376
best_error: 13.783420939781056
best_error: 13.783420924104172
best_error: 13.558758504900762
best_error: 13.55875849308611
best_error: 13.240720495110846
best_error: 13.2407202130041
best_error: 13.041373585185674
best_error: 13.041373573234438
best_error: 13.041373573218408
best_error: 12.942504141308756
best_error: 12.942504134402416
best_error: 12.942504129040517
best_error: 12.919750011176358
best_error: 12.9197500053282
best_error: 12.919749998372106
best_error: 12.917535195058074
best_error: 12.91753518966564
best_error: 12.917535182368281
best_error: 12.917427367052401
best_error: 12.917427192672806
best_error: 12.859189163595426
best_error: 12.859189161029146
best_error: 12.859189151032524
best_error: 12.824945682096232
best_error: 12.82494568073666
best_error: 12.824945670139888
best_error: 12.76721820772734
best_error: 12.767218205862338
best_error: 12.76721819734273
best_error: 12.55467972707018
best_error: 12.554679715648222
best_error: 12.480987156363751
best_error: 12.480987140887695
best_error: 12.459940501580718
best_error: 12.45994044361332
best_error: 12.459940440055497
best_error: 12.45573304360477
best_error: 12.455733024582997
best_error: 12.435187852088072
best_error: 12.43518783184001
best_error: 12.435187831077933
best_error: 12.41141128324129
best_error: 12.41141126769695
best_error: 12.408944211444265
best_error: 12.408944194321037
best_error: 12.40726323833428
best_error: 12.40726322115035
best_error: 12.405922583467873
best_error: 12.4059225273973
best_error: 12.405922523485645
best_error: 12.405831878937827
best_error: 12.405831861313743
best_error: 12.405831861218397
best_error: 12.309604783351855
best_error: 12.309604779337
best_error: 12.309604777854343
best_error: 12.30960477759215
best_error: 12.265271420365224
best_error: 12.265271412668787
best_error: 12.26118251761686
best_error: 12.26118247084652
best_error: 12.261182465665303
best_error: 12.258128890997355
best_error: 12.258128881637536
best_error: 12.241377204181141
best_error: 12.241377159201239
best_error: 12.241377153337421
best_error: 12.209837167637243
best_error: 12.209837126985
best_error: 12.209837121201005
best_error: 12.200152367936521
best_error: 12.200152042936693
best_error: 12.188817435391027
best_error: 12.188817427276604
best_error: 12.188143183592686
best_error: 12.188143183406552
best_error: 12.188143181900937
best_error: 12.188143178229504
best_error: 12.187730442540426
best_error: 12.187730441120454
best_error: 12.187730437171012
best_error: 12.187053038867646
best_error: 12.187053036822814
best_error: 12.187053033492866
best_error: 12.186527405365325
best_error: 12.186527403293887
best_error: 12.186527399986241
best_error: 12.186141557613906
best_error: 12.186141554734814
best_error: 12.186141552231433
best_error: 12.186028436081056
best_error: 12.186028433203486
best_error: 12.186028430697146
best_error: 12.185927796482172
best_error: 12.185927793605954
best_error: 12.185927791096983
best_error: 12.185874157198912
best_error: 12.185874154323418
best_error: 12.185874151813042
best_error: 12.185826615857806
best_error: 12.18582661298295
best_error: 12.18582661047133
best_error: 12.185800664390126
best_error: 12.185800661478579
best_error: 12.185800659003327
best_error: 12.185784136170486
best_error: 12.185784133259155
best_error: 12.185784130783473
best_error: 12.185770839646851
best_error: 12.1857708367357
best_error: 12.185770834259671
best_error: 12.185756565326978
best_error: 12.185756562416017
best_error: 12.185756559939614
best_error: 12.185747863028048
best_error: 12.185747859738289
best_error: 12.185747857640587
best_error: 12.185740324877912
best_error: 12.18574032158825
best_error: 12.185740319490371
best_error: 12.185734160087936
best_error: 12.185734156798357
best_error: 12.18573415470033
best_error: 12.18572937379167
best_error: 12.185729370502148
best_error: 12.185729368404015
best_error: 12.185725911982216
best_error: 12.185725908692739
best_error: 12.185725906594522
best_error: 12.185721474461019
best_error: 12.1857214711716
best_error: 12.185721469073282
best_error: 12.185719320247138
best_error: 12.185719316957748
best_error: 12.185719314859377
best_error: 12.185715834053195
best_error: 12.185715830763849
best_error: 12.1857158286654
best_error: 12.185715158486351
best_error: 12.185715155197013
best_error: 12.185715153098545
best_error: 12.18571477758617
best_error: 12.185714774296834
best_error: 12.18571477219836
best_error: 12.185714144772064
best_error: 12.185714141482737
best_error: 12.185714139384247
best_error: 12.18571392497979
best_error: 12.185713921690464
best_error: 12.185713919591972
best_error: 12.185713846541656
best_error: 12.185713843252334
best_error: 12.185713841153838
best_error: 12.18571371649313
best_error: 12.18571371320381
best_error: 12.18571371110531
best_error: 12.185713671188374
best_error: 12.185713667899055
best_error: 12.185713665800554
best_error: 12.185713653638697
best_error: 12.185713650349381
best_error: 12.185713648250879
best_error: 12.185713639821294
best_error: 12.185713636531974
best_error: 12.185713634433476
best_error: 12.185713627068228
best_error: 12.185713623778911
best_error: 12.185713621680407
best_error: 12.18571362135765
best_error: 12.185713618068334
best_error: 12.185713615969828
best_error: 12.185713614542212
best_error: 12.185713612443712
best_error: 12.185713612113792
best_error: 12.185713607077325
best_error: 12.18424199160738
best_error: 12.184241991530802
best_error: 12.184241988652786
best_error: 12.184241986250086
best_error: 12.184045050807537
best_error: 12.18404505073379
best_error: 12.184045047820206
best_error: 12.18404504545205
best_error: 12.183322265315088
best_error: 12.183322255242777
best_error: 12.182526937342187
best_error: 12.182526927139012
best_error: 12.182078268459708
best_error: 12.182078253679272
best_error: 12.182018236711016
best_error: 12.182018221920554
best_error: 12.182018187999606
best_error: 12.182002675815713
best_error: 12.1820026610227
best_error: 12.181994211416411
best_error: 12.181994196622007
best_error: 12.181989646050113
best_error: 12.181989631254961
best_error: 12.181987324703277
best_error: 12.181987197487405
best_error: 12.180944205343888
best_error: 12.180944194899858
best_error: 12.176772748615956
best_error: 12.176772737912113
best_error: 12.173880388689103
best_error: 12.173880387443022
best_error: 12.173880383311037
best_error: 12.173083434104715
best_error: 12.173083432211842
best_error: 12.173083428722407
best_error: 12.172901480547736
best_error: 12.172901441320885
best_error: 12.17290143469031
best_error: 12.172813030004928
best_error: 12.172813028116366
best_error: 12.17281302462115
best_error: 12.172803827047279
best_error: 12.172803787822065
best_error: 12.172803781192009
best_error: 12.172433912928357
best_error: 12.17243391104576
best_error: 12.172433907544889
best_error: 12.170962190093348
best_error: 12.170962188925905
best_error: 12.170962184711213
best_error: 12.165355954156961
best_error: 12.16535594799253
best_error: 12.159532139805556
best_error: 12.159531773016738
best_error: 12.159388038852516
best_error: 12.159387672073578
best_error: 12.158941601684694
best_error: 12.158941246902156
best_error: 12.15880148591447
best_error: 12.15880113730584
best_error: 12.158656577239068
best_error: 12.158656228651761
best_error: 12.158514738166225
best_error: 12.158514389599901
best_error: 12.158512680596505
best_error: 12.15851233203048
best_error: 12.15845477172527
best_error: 12.158454423152822
best_error: 12.158440440816388
best_error: 12.158440092242333
best_error: 12.158431401955855
best_error: 12.15843105338077
best_error: 12.158348650551257
best_error: 12.158348638759835
best_error: 12.158342558108838
best_error: 12.158342521344117
best_error: 12.158342515417875
best_error: 12.158238495000383
best_error: 12.158238121983421
best_error: 12.15813121602909
best_error: 12.158131181506048
