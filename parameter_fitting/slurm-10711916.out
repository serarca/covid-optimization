ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.38745045841172
best_error: 12.38745021843207
best_error: 11.686086146556164
best_error: 11.686086060939116
best_error: 10.722402585390771
best_error: 10.722402420910704
best_error: 10.222784246637389
best_error: 10.222784032787331
best_error: 9.805185816026846
best_error: 9.805185579267246
best_error: 9.038622923605521
best_error: 9.03862280001686
best_error: 9.038622785972688
best_error: 8.999693175793087
best_error: 8.999693064732883
best_error: 8.999693031868842
best_error: 8.548099981030383
best_error: 8.548099866584177
best_error: 8.548099830362846
best_error: 8.266147350312249
best_error: 8.266147251728494
best_error: 8.266147196140194
best_error: 8.067862584520826
best_error: 8.067862490407048
best_error: 8.067862426192319
best_error: 7.953746032688292
best_error: 7.953745944068943
best_error: 7.953745872543821
best_error: 7.8692111030564345
best_error: 7.869211009017537
best_error: 7.869210941483503
best_error: 7.823570241287991
best_error: 7.823570151051522
best_error: 7.823570080237296
best_error: 7.787809498758268
best_error: 7.787809406807897
best_error: 7.787809336971577
best_error: 7.770849670126809
best_error: 7.770849577465358
best_error: 7.770849507984466
best_error: 7.755798073449828
best_error: 7.755797978965369
best_error: 7.755797911375464
best_error: 7.743942904246529
best_error: 7.743942809657753
best_error: 7.743942741925749
best_error: 7.7387512434417856
best_error: 7.738751148228387
best_error: 7.7387510810384255
best_error: 7.738422387641504
best_error: 7.738422292388581
best_error: 7.738422225232929
best_error: 7.738353091470408
best_error: 7.7383529962091435
best_error: 7.738352929060697
best_error: 7.738301733742223
best_error: 7.738301638474775
best_error: 7.738301571331688
best_error: 7.738277448587465
best_error: 7.738277353317107
best_error: 7.738277286176532
best_error: 7.738258444563835
best_error: 7.738258349291171
best_error: 7.738258282152593
best_error: 7.738251257145876
best_error: 7.738251082490735
best_error: 6.113031719743955
best_error: 6.113031436123277
best_error: 5.839018958149719
best_error: 5.8390184518885135
best_error: 5.818574666562772
best_error: 5.818574223085938
best_error: 5.816214136118097
best_error: 5.816213695485743
best_error: 5.796392700475296
best_error: 5.796392292672816
best_error: 5.771075317715516
best_error: 5.7710749151180964
best_error: 5.681836456351523
best_error: 5.681836073361847
best_error: 5.6056652460255565
best_error: 5.605664867080986
best_error: 5.549332823887199
best_error: 5.549332412170113
best_error: 5.505156303315326
best_error: 5.505155827553711
best_error: 5.504250818732308
best_error: 5.504250342790623
best_error: 5.5006435593132625
best_error: 5.500643083259121
best_error: 5.486414178973199
best_error: 5.486413702546923
best_error: 5.432756701311773
best_error: 5.432756227176093
best_error: 5.393585154121276
best_error: 5.3935847341803544
best_error: 5.277031525485292
best_error: 5.277031128075597
best_error: 5.260362953427942
best_error: 5.26036255808579
best_error: 5.259261616550974
best_error: 5.259261221030668
best_error: 5.258499735458136
best_error: 5.25849933981462
best_error: 5.258107402062352
best_error: 5.258107006355413
best_error: 5.257822597877997
best_error: 5.25782220212502
best_error: 5.257638525442202
best_error: 5.257638129659437
best_error: 5.257498321337442
best_error: 5.257497925531996
best_error: 5.257492342913713
best_error: 5.257491947107285
best_error: 5.257487927636274
best_error: 5.257487531829142
best_error: 5.257486978507685
best_error: 5.257486582700395
best_error: 5.25748626698596
best_error: 5.257486226908787
best_error: 5.25748616442168
best_error: 5.2257779817001415
best_error: 5.225777567347515
best_error: 5.202927143581759
best_error: 5.202926688701927
best_error: 5.2011496434809095
best_error: 5.201149188288971
best_error: 5.1950084207051646
best_error: 5.195007947914723
best_error: 5.14414794550807
best_error: 5.1441474820439685
best_error: 5.138028547828347
best_error: 5.138028106460726
best_error: 5.1341891603942456
best_error: 5.134188709339277
best_error: 5.132391569514198
best_error: 5.13239111388058
best_error: 5.132071575652489
best_error: 5.13207111472543
best_error: 5.131996637658467
best_error: 5.1319961722442375
best_error: 5.121605309180457
best_error: 5.1216048543402986
best_error: 5.090900042135685
best_error: 5.0908995853179855
best_error: 5.070293490545957
best_error: 5.0702930303033655
best_error: 5.062635166894914
best_error: 5.06263500814592
best_error: 4.979778284137723
best_error: 4.979777741588663
best_error: 4.9594089103355845
best_error: 4.959408335749119
best_error: 4.9194940579948145
best_error: 4.919493450736054
best_error: 4.893230038510403
best_error: 4.893229420357704
best_error: 4.891866987219752
best_error: 4.891866368717881
best_error: 4.890963608105043
best_error: 4.890962989371875
best_error: 4.890954434026847
best_error: 4.890953815291579
best_error: 4.89095344654528
best_error: 4.890952827809822
best_error: 4.890952783316948
best_error: 4.890952769194847
best_error: 4.890952768993799
best_error: 4.890952765978602
best_error: 4.890952762575449
best_error: 4.890952762374378
best_error: 4.890952759359191
best_error: 4.890952757707918
best_error: 4.8909527575068505
best_error: 4.8909527544916624
