ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 18.469878790413773
best_error: 18.469878646040172
best_error: 11.723344505665905
best_error: 11.723344498837452
best_error: 11.72334447488949
best_error: 11.377050319123164
best_error: 11.377050310803
best_error: 11.377050307451725
best_error: 10.985821672170978
best_error: 10.985821664309654
best_error: 10.896706092994748
best_error: 10.89670608323303
best_error: 10.89222885800537
best_error: 10.89222884922811
best_error: 10.888393088360917
best_error: 10.888393079231513
best_error: 10.888393078498817
best_error: 10.707166692087126
best_error: 10.70716664052635
best_error: 10.70716653202994
best_error: 10.662727076218179
best_error: 10.662727056253978
best_error: 10.662727046737189
best_error: 9.511053023661107
best_error: 9.511052841817055
best_error: 9.213162266645607
best_error: 9.213162202752503
best_error: 9.213162124908735
best_error: 9.195291061482754
best_error: 9.195291030854293
best_error: 9.195290907692623
best_error: 9.193557946037421
best_error: 9.193557916280815
best_error: 9.193557791238984
best_error: 9.19291227778451
best_error: 9.1929122521344
best_error: 9.192912122818736
best_error: 8.60973799339909
best_error: 8.609737957542189
best_error: 8.60973783890942
best_error: 7.696006601510552
best_error: 7.696006583322344
best_error: 7.696006452920667
best_error: 7.4347487736049125
best_error: 7.4347487538558195
best_error: 7.434748625212061
best_error: 7.345721908683007
best_error: 7.345721890617091
best_error: 7.345721760053733
best_error: 7.297757560990017
best_error: 7.297757541338903
best_error: 7.29775741184061
best_error: 7.265868433791592
best_error: 7.2658684116205885
best_error: 7.265868285287583
best_error: 7.258517805102912
best_error: 7.258517790596279
best_error: 7.249892769196284
best_error: 7.249892745712244
best_error: 7.249892620386001
best_error: 7.248273498227334
best_error: 7.248273474610476
best_error: 7.2482733493861415
best_error: 7.2479036481748125
best_error: 7.247903624527623
best_error: 7.247903499326547
best_error: 7.247861882385909
best_error: 7.2478618587353
best_error: 7.247861733536849
best_error: 7.247851480355367
best_error: 7.247851456703893
best_error: 7.2478513315060855
best_error: 7.247845243973587
best_error: 7.247845220321597
best_error: 7.2478450951242035
best_error: 7.247842109531366
best_error: 7.247842085879129
best_error: 7.247841960681941
best_error: 7.247839989916771
best_error: 7.247839966264358
best_error: 7.247839841067284
best_error: 7.247839021983003
best_error: 7.24783899833051
best_error: 7.247838873133484
best_error: 7.247838297586947
best_error: 7.247838148737394
best_error: 5.954080861728312
best_error: 5.511294432155504
best_error: 5.511294432155501
best_error: 5.5112944321555
best_error: 5.189541715162052
best_error: 5.189541507570588
best_error: 5.038552525534567
best_error: 5.038552308055268
best_error: 4.924931747107754
best_error: 4.924931518775603
best_error: 4.86169298416727
best_error: 4.861692748250567
best_error: 4.857442741038448
best_error: 4.857166876128832
best_error: 4.857166639576942
best_error: 4.856974580654956
best_error: 4.856936333203735
best_error: 4.856936096619492
best_error: 4.856914827702713
best_error: 4.856770524341419
best_error: 4.856194094594338
best_error: 4.8539009209482185
best_error: 4.8449293521024295
best_error: 4.812288059978243
best_error: 4.718103137219147
best_error: 4.718103137219144
best_error: 4.716030932664501
best_error: 4.7160309326644985
best_error: 4.715986804190049
best_error: 4.708700050594355
best_error: 4.603624623085996
best_error: 4.603624623085965
best_error: 4.411673448648541
best_error: 4.411673448648493
best_error: 4.38733904094771
best_error: 4.387338704342358
best_error: 4.368214856579007
best_error: 4.368214522232881
best_error: 4.34585101406234
best_error: 4.345850677406266
best_error: 4.337823292152735
best_error: 4.337822954564988
best_error: 4.332865209583191
best_error: 4.3328648718357625
best_error: 4.32964248582946
best_error: 4.329642147626082
best_error: 4.32771753058967
best_error: 4.327717192114197
best_error: 4.326428833408865
best_error: 4.326428494751351
best_error: 4.324679023815996
best_error: 4.324679023815797
best_error: 4.32393479187268
best_error: 4.323934452215774
best_error: 4.2949609960354
best_error: 4.294960650823556
best_error: 4.290169934173909
best_error: 4.290169588215868
best_error: 4.287511042909936
best_error: 4.287510696542352
best_error: 4.286841410207613
best_error: 4.286841410207423
best_error: 4.286841357052081
best_error: 4.286825856380858
best_error: 4.2868255099082155
best_error: 4.286170184079281
best_error: 4.286169837506277
best_error: 4.28609525825887
best_error: 4.28609525825871
best_error: 4.286095205110546
best_error: 4.2860925687404965
best_error: 4.2860922221555375
best_error: 4.286088154816821
best_error: 4.286087808231162
best_error: 4.286087190478034
best_error: 4.286087190477846
best_error: 4.286087137329792
best_error: 4.286087122549047
