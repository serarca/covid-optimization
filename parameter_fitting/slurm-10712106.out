ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.905349522733133
best_error: 11.905349434915427
best_error: 11.521125982967584
best_error: 11.521125979554881
best_error: 11.521125962665337
best_error: 11.260975687434595
best_error: 11.26097568272122
best_error: 11.260975676304037
best_error: 9.747823102725654
best_error: 9.747823089230117
best_error: 9.691440807172665
best_error: 9.691440792306498
best_error: 6.083819241861299
best_error: 6.08381918773749
best_error: 6.083819104931086
best_error: 6.072406000558219
best_error: 6.072405955005575
best_error: 6.072405864031165
best_error: 6.065061458128943
best_error: 6.065061415931332
best_error: 6.065061321102302
best_error: 6.061198653742556
best_error: 6.061198610769262
best_error: 6.0611985158183534
best_error: 6.057400819062673
best_error: 6.05740078020936
best_error: 6.057400681439249
best_error: 6.055391442949524
best_error: 6.055391403690524
best_error: 6.055391304808764
best_error: 6.053392797364069
best_error: 6.053392757714505
best_error: 6.053392658713864
best_error: 5.9702406263384376
best_error: 5.9702405982086795
best_error: 5.970240488232324
best_error: 5.926579667354503
best_error: 5.926579637011948
best_error: 5.926579526601701
best_error: 5.923447335940244
best_error: 5.923447305382016
best_error: 5.923447194982686
best_error: 5.920964859573487
best_error: 5.920964829773961
best_error: 5.920964718669058
best_error: 5.917737215976498
best_error: 5.91773718595746
best_error: 5.917737074860611
best_error: 5.915908480283475
best_error: 5.915908450140777
best_error: 5.915908339047943
best_error: 5.910331282239988
best_error: 5.91033125176653
best_error: 5.910331141067399
best_error: 5.907249356635631
best_error: 5.907249325979576
best_error: 5.907249215364894
best_error: 5.905538621777699
best_error: 5.90553859102034
best_error: 5.905538480452564
best_error: 5.9044810362085505
best_error: 5.904481005388591
best_error: 5.904480894849787
best_error: 5.903938595022497
best_error: 5.9039385641704465
best_error: 5.903938453646525
best_error: 5.903570096123564
best_error: 5.903570066180093
best_error: 5.903569954954052
best_error: 5.903397642959538
best_error: 5.9033976130058825
best_error: 5.903397501784521
best_error: 5.903269369355123
best_error: 5.903269339393875
best_error: 5.903269228176016
best_error: 5.9032378043034885
best_error: 5.903237774340369
best_error: 5.903237663123462
best_error: 5.903216544422506
best_error: 5.903216514458126
best_error: 5.903216403241869
best_error: 5.903207583942976
best_error: 5.903207553978068
best_error: 5.903207442762107
best_error: 5.903206078386079
best_error: 5.903206048421076
best_error: 5.9032059372051195
best_error: 5.90320490607156
best_error: 5.903204789551595
best_error: 5.9032046483705995
best_error: 5.903204615255389
best_error: 5.3123142679036395
best_error: 5.312314205382403
best_error: 5.312314136309972
best_error: 5.212681523526633
best_error: 5.212681456455564
best_error: 5.2126813901782985
best_error: 5.049616536246267
best_error: 5.04961645610538
best_error: 5.049616398737959
best_error: 4.995175553309612
best_error: 4.995175467517779
best_error: 4.995175414111898
best_error: 4.99397883093784
best_error: 4.9844540197010145
best_error: 4.984453932798218
best_error: 4.984453880170356
best_error: 4.982266899291481
best_error: 4.9817771528478625
best_error: 4.981777065667799
best_error: 4.981777013234111
best_error: 4.980137270873352
best_error: 4.980137183523448
best_error: 4.980137131208666
best_error: 4.979963514865461
best_error: 4.979909675050919
best_error: 4.979909587677448
best_error: 4.979909535379159
best_error: 4.979898026958139
best_error: 4.979897939583481
best_error: 4.979897887286052
best_error: 4.979897830683153
best_error: 4.979896852681579
best_error: 4.97989671300944
best_error: 4.979896616149512
best_error: 4.979896588133836
best_error: 4.979895359377732
best_error: 4.979895272002935
best_error: 4.979895219705664
best_error: 4.9798943347460085
best_error: 4.979894247371195
best_error: 4.979894195073957
best_error: 4.979890236222062
best_error: 4.979890148847129
best_error: 4.9798900965501325
best_error: 4.97987384217293
best_error: 4.979873754797582
best_error: 4.979873702501475
best_error: 4.979808266723081
best_error: 4.9798081793460405
best_error: 4.9798081270534915
best_error: 4.979545976865246
best_error: 4.979545889481447
best_error: 4.979545837203158
best_error: 4.978497008233415
best_error: 4.978496920822612
best_error: 4.978496868601335
best_error: 4.974304169418854
best_error: 4.974304081900636
best_error: 4.974304029907053
best_error: 4.9576458223225774
best_error: 4.957645734384175
best_error: 4.9576456837759295
best_error: 4.8933809179332
best_error: 4.8933808284468805
best_error: 4.89338078378047
best_error: 4.8557319897759506
best_error: 4.855731899426816
best_error: 4.8557318586229545
best_error: 4.837140186371171
best_error: 4.837140095602807
best_error: 4.837140056072376
best_error: 4.769084400114595
best_error: 4.769084306713718
best_error: 4.769084279188154
best_error: 4.433354455302262
best_error: 4.433354303450111
best_error: 4.432195551680895
best_error: 4.432195387297192
best_error: 4.432154526853046
best_error: 4.4321543624279
best_error: 4.431996948942199
best_error: 4.4319967844435375
best_error: 4.431648298156659
best_error: 4.431648146374845
best_error: 4.429255697930513
best_error: 4.429255545687502
best_error: 4.415343188228527
best_error: 4.415343031900713
best_error: 4.237569846720797
best_error: 4.237569665916345
best_error: 4.06875416315669
best_error: 4.068753972113561
best_error: 4.025627717730022
best_error: 4.025627513725153
best_error: 3.981977844363101
best_error: 3.981977583699227
best_error: 3.980406546332409
best_error: 3.9804062916079372
best_error: 3.8695215150311224
best_error: 3.8695212723089787
best_error: 3.455233978772774
best_error: 3.455233753272408
best_error: 3.44670937428799
best_error: 3.446709147828626
best_error: 3.4447717552347976
best_error: 3.4447716951205587
best_error: 3.4416373810567613
best_error: 3.4416371531513508
best_error: 3.126166916051898
best_error: 3.126166610343292
best_error: 3.1214202274349425
best_error: 3.1214199232950803
best_error: 3.1033011505103714
best_error: 3.103300849022871
best_error: 3.0816935926650153
best_error: 3.0816933009692273
best_error: 3.0685109261996604
best_error: 3.0685106333002574
best_error: 3.059192744247716
best_error: 3.0591924514715396
best_error: 3.029409210534002
best_error: 3.0294089185400983
best_error: 3.028149443776414
best_error: 3.0281491524511766
best_error: 3.0273210571626716
best_error: 3.027320765747384
best_error: 3.0267600713502234
best_error: 3.02675977987359
best_error: 3.026344289471343
best_error: 3.026343997949261
best_error: 3.025947222325576
best_error: 3.0259469307568736
best_error: 3.0256373045012257
best_error: 3.0256370128961296
best_error: 3.0254792526576093
best_error: 3.025478961033958
best_error: 3.0253535459451126
best_error: 3.025353254306708
best_error: 3.025292292711836
best_error: 3.025292001066235
best_error: 3.025242259588274
best_error: 3.0252419679368145
best_error: 3.0252194665895966
best_error: 3.0252191749354598
best_error: 3.0252117896934854
best_error: 3.0252114980384492
best_error: 3.0252102862181376
best_error: 3.025209994562913
best_error: 3.025209668025837
best_error: 3.025209376370535
best_error: 3.0252090702427985
best_error: 3.025208778587424
best_error: 3.0252085545679774
best_error: 3.0252084177914247
best_error: 3.025207662266773
best_error: 3.0252075996233936
best_error: 3.0252062132494335
best_error: 3.025205921593577
best_error: 3.025204047820644
best_error: 3.0252040046815223
best_error: 3.0252039986276733
best_error: 3.0252003624441337
best_error: 3.025186405578819
best_error: 3.025130559750381
best_error: 3.02490735654282
best_error: 3.0240417679286526
best_error: 3.0205867220783675
best_error: 3.0068594588397235
best_error: 2.9517208378318074
best_error: 2.9517205210697126
best_error: 2.9216467632182996
best_error: 2.9216464177077315
best_error: 2.9216461451213838
best_error: 2.9216454002864616
best_error: 2.92164505477574
best_error: 2.921641038900221
best_error: 2.9216406933889507
best_error: 2.9216235932877925
best_error: 2.9216232477744066
best_error: 2.921553809759107
best_error: 2.92155346423721
best_error: 2.921274658380987
best_error: 2.9212743128250684
best_error: 2.920157776644276
best_error: 2.920157430952213
best_error: 2.915685936683923
best_error: 2.915685590782479
best_error: 2.8977443718591154
best_error: 2.897744024127616
best_error: 2.897333513993253
best_error: 2.8973331662119404
best_error: 2.89733288995612
best_error: 2.8973321327140162
best_error: 2.8973317849325593
best_error: 2.897327712616004
best_error: 2.8973273648339957
best_error: 2.897310032155443
best_error: 2.897309684371298
best_error: 2.8972393092179436
best_error: 2.897238961425212
best_error: 2.8972311147300394
best_error: 2.8972307669363344
best_error: 2.897229053009709
best_error: 2.897228705215736
best_error: 2.8972284289396635
best_error: 2.8972276716292313
best_error: 2.8972273238351027
best_error: 2.8972270907557847
best_error: 2.897226742961568
best_error: 2.897226702660059
best_error: 2.8972263548658126
best_error: 2.8881534500639834
best_error: 2.8881534441853205
best_error: 2.887893387298613
best_error: 2.8878930108440177
best_error: 2.884142020527173
best_error: 2.884141650545125
best_error: 2.8837995268661722
best_error: 2.8837991577423425
best_error: 2.883753916472377
best_error: 2.8837535473364353
best_error: 2.8836978167917335
best_error: 2.883697447640902
best_error: 2.8836474702542487
best_error: 2.8836471010900553
best_error: 2.88361001268758
best_error: 2.8836096435134517
best_error: 2.883609346496412
best_error: 2.8836091569976463
best_error: 2.8831249235279532
best_error: 2.8831245540522357
