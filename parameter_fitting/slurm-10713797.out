ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.339798802360862
best_error: 11.339798737042086
best_error: 11.339798722286634
best_error: 10.7830956984432
best_error: 10.783095598469117
best_error: 10.783095589839421
best_error: 9.746032932834632
best_error: 9.746032781161457
best_error: 9.185668279339676
best_error: 9.185668100576013
best_error: 9.065154542510955
best_error: 9.065154370475085
best_error: 7.780826270873458
best_error: 7.780826120153489
best_error: 7.200384232640126
best_error: 7.2003840828186485
best_error: 6.742356474816576
best_error: 6.742356329000809
best_error: 6.423364644908584
best_error: 6.423364514167689
best_error: 6.043958957735474
best_error: 6.043958829013292
best_error: 6.010268919191576
best_error: 6.010268788296299
best_error: 5.988839445316453
best_error: 5.9888393134536795
best_error: 5.978293799014211
best_error: 5.978293667190542
best_error: 5.970904261645922
best_error: 5.970904130169965
best_error: 5.965935981304325
best_error: 5.965935849395196
best_error: 5.965358750390045
best_error: 5.965358618430605
best_error: 5.965001684589243
best_error: 5.965001552598676
best_error: 5.964856991558502
best_error: 5.96485685955532
best_error: 5.964834964742101
best_error: 5.964834774638232
best_error: 5.964830722068491
best_error: 5.96483059006303
best_error: 5.964828865978827
best_error: 5.964828733973195
best_error: 5.964828359131982
best_error: 5.964828265990028
best_error: 5.964828244710574
best_error: 5.367543915611159
best_error: 5.367543746447179
best_error: 5.0202264645126
best_error: 5.020226219347199
best_error: 4.863823111680768
best_error: 4.863822873477535
best_error: 4.732478689514736
best_error: 4.732478388258652
best_error: 4.709506659518519
best_error: 4.7095065498859014
best_error: 4.504093752315828
best_error: 4.504093483165015
best_error: 4.325093477985464
best_error: 4.3250932321160285
best_error: 4.19734717265934
best_error: 4.197346930717919
best_error: 4.145282311269956
best_error: 4.145282068662486
best_error: 4.122626323296808
best_error: 4.122626080502646
best_error: 4.1121543915505825
best_error: 4.1121541481294335
best_error: 4.107135763369973
best_error: 4.107135519650596
best_error: 4.1065420538073845
best_error: 4.106541810039834
best_error: 4.106504508463046
best_error: 4.106504264692433
best_error: 4.106474012629229
best_error: 4.106473768856146
best_error: 4.1064717741186705
best_error: 4.106471530345392
best_error: 4.106471315992743
best_error: 4.106471180359088
best_error: 4.106471117820513
best_error: 4.106470473388188
best_error: 4.106470447316891
best_error: 3.958235614919497
best_error: 3.9582353498868588
best_error: 3.723968864480501
best_error: 3.723968755162399
best_error: 2.5303107514563186
best_error: 2.530310607523636
best_error: 2.4896410286753334
best_error: 2.4896405895944596
best_error: 2.4701735761771486
best_error: 2.4701731515899095
best_error: 2.466501966554402
best_error: 2.4665015473607514
best_error: 2.465330796033676
best_error: 2.4653303834979345
best_error: 2.465316011703259
best_error: 2.4653155991657476
best_error: 2.4652568737326264
best_error: 2.4652564611880736
best_error: 2.465020311468333
best_error: 2.4650198988956253
best_error: 2.4640738962918896
best_error: 2.4640734836065032
best_error: 2.4602855770009424
best_error: 2.460285163864713
best_error: 2.4451353424939226
best_error: 2.4451349295119464
best_error: 2.4286134773873336
best_error: 2.42861306859229
best_error: 2.4225937353023497
best_error: 2.422593328945971
best_error: 2.4199017812930625
best_error: 2.419901377319767
best_error: 2.4186167053840197
best_error: 2.4186163012572184
best_error: 2.417832923867688
best_error: 2.417832520011987
best_error: 2.4176209557766057
best_error: 2.417620551892928
best_error: 2.4174839059661632
best_error: 2.4161800447989807
best_error: 2.4161796481483906
best_error: 2.4157406431798747
best_error: 2.4157402464764424
best_error: 2.41530375646021
best_error: 2.4153033597040934
best_error: 2.413555611360744
best_error: 2.4135552143937606
best_error: 2.4134883420799733
best_error: 2.413487945104894
best_error: 2.4134838793360265
best_error: 2.4134754272943066
best_error: 2.4134750303176777
best_error: 2.413462771334678
best_error: 2.413462374356509
best_error: 2.413460611349175
best_error: 2.4134602143707315
best_error: 2.4134591896023716
best_error: 2.4134588298387185
best_error: 2.4087728384069855
best_error: 2.408772444475537
best_error: 2.408762472808957
best_error: 2.408762078876425
best_error: 2.4087210101016208
best_error: 2.4087206161648576
best_error: 2.408586393604089
best_error: 2.4085785745524637
best_error: 2.408578180601066
best_error: 2.4085696884756085
best_error: 2.408569294523307
best_error: 2.4085678115389273
best_error: 2.408567417586418
best_error: 2.4085667431821216
best_error: 2.408566733465473
best_error: 2.408566733349215
best_error: 2.408566722392848
best_error: 2.4085666103125725
best_error: 2.4085664369893314
best_error: 2.4085660430367413
best_error: 2.407501403137829
best_error: 2.407501010890096
best_error: 2.407425643571634
best_error: 2.4074252513072754
best_error: 2.4074081336241484
best_error: 2.407407741355956
best_error: 2.407405999992583
best_error: 2.4074056077239305
best_error: 2.407405484167016
best_error: 2.407405344603625
best_error: 2.4074053098451085
best_error: 2.407405268960196
