ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 72
days_switch 5
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.62145535932662
best_error: 101.6214552785267
best_error: 101.62145517247029
best_error: 19.99316300227189
best_error: 19.99316300227003
best_error: 19.993162999104545
best_error: 19.989770552157303
best_error: 19.989770548948382
best_error: 19.975593076425724
best_error: 19.975593072925502
best_error: 19.900820882594815
best_error: 19.90082087630088
best_error: 19.378035972238568
best_error: 19.378035906048204
best_error: 14.803812144474286
best_error: 14.803811960490957
best_error: 14.542554898883022
best_error: 14.542554761814333
best_error: 14.492852953000211
best_error: 14.492852940560773
best_error: 14.492852552719865
best_error: 14.351454667838262
best_error: 14.351454654234828
best_error: 14.35145464669149
best_error: 13.93308108764641
best_error: 13.93308095450953
best_error: 13.408851709621167
best_error: 13.408851706668676
best_error: 13.408851704127805
best_error: 13.408851698595178
best_error: 13.408851688419237
best_error: 13.252852098224267
best_error: 13.252852089330862
best_error: 13.252852086566303
best_error: 13.252852076428582
best_error: 13.167622966804815
best_error: 13.167622956804395
best_error: 13.167622955343148
best_error: 13.167622944998906
best_error: 13.165295068342662
best_error: 13.165295037756412
best_error: 12.877476410195353
best_error: 12.877476323108906
best_error: 12.833567101433854
best_error: 12.833566991676161
best_error: 12.776361405836273
best_error: 12.77636139116114
best_error: 12.776361389372735
best_error: 12.765513607007858
best_error: 12.765513592756758
best_error: 12.76551359076261
best_error: 12.738294292450988
best_error: 12.738294282269266
best_error: 12.738294276952313
best_error: 12.718331729086355
best_error: 12.718331722261205
best_error: 12.718331721990527
best_error: 12.718331703549623
best_error: 12.712053577174537
best_error: 12.71205357107219
best_error: 12.712053568610312
best_error: 12.712053548225576
best_error: 12.708067789522318
best_error: 12.70806778621548
best_error: 12.708067750528091
best_error: 12.708067744781514
best_error: 12.705889955135177
best_error: 12.705889951611024
best_error: 12.705889919560423
best_error: 12.705889912950816
best_error: 12.705464645944426
best_error: 12.705464642443507
best_error: 12.705464610214438
best_error: 12.705464603716957
best_error: 12.705321519764343
best_error: 12.705321516265736
best_error: 12.70532148400797
best_error: 12.705321477499705
best_error: 12.705257319647352
best_error: 12.705257316149785
best_error: 12.705257283879146
best_error: 12.705257277366037
best_error: 12.705245692932493
best_error: 12.705245385255994
best_error: 12.705233526810648
best_error: 12.70523352331346
best_error: 12.705233491038404
best_error: 12.705233484524346
best_error: 12.705204815650918
best_error: 12.705204812185857
best_error: 12.70520477954534
best_error: 12.705204773213572
best_error: 12.705200973122526
best_error: 12.705200969657529
best_error: 12.705200937016299
best_error: 12.705200930684374
best_error: 12.705199074834947
best_error: 12.705199071369979
best_error: 12.705199038728395
best_error: 12.705199032396397
best_error: 12.705197068092222
best_error: 12.705197064627276
best_error: 12.705197031985342
best_error: 12.705197025653225
best_error: 12.705196482818126
best_error: 12.705196238948183
best_error: 12.696327380136545
best_error: 12.696327097349904
best_error: 12.622270297869898
best_error: 12.6222702841085
best_error: 12.622270280565179
best_error: 12.605942966528218
best_error: 12.605942952356358
best_error: 12.60594294904692
best_error: 12.5391342023231
best_error: 12.53913418699675
best_error: 12.539134184088322
best_error: 12.457637387793675
best_error: 12.457637369899476
best_error: 12.457637368543816
best_error: 12.415745178720073
best_error: 12.415745156612843
best_error: 12.389625941355487
best_error: 12.38962590374652
best_error: 12.263545171882486
best_error: 12.263545140430855
best_error: 12.112357356203455
best_error: 12.112357328920686
best_error: 11.96440803025727
best_error: 11.964408008155443
best_error: 11.936142715845094
best_error: 11.936142698657005
best_error: 11.9191073155793
best_error: 11.91910730132103
best_error: 11.893568240018016
best_error: 11.893568011210277
best_error: 11.856493540368692
best_error: 11.856493348511394
best_error: 11.856336690680585
best_error: 11.856336678156095
best_error: 11.849887758748547
best_error: 11.849887571165393
best_error: 11.84101528774515
best_error: 11.841015108755233
best_error: 11.836614664058395
best_error: 11.836614645544014
best_error: 11.818013952954766
best_error: 11.81801393413304
best_error: 11.812583708197288
best_error: 11.812583688878906
best_error: 11.795875205035363
best_error: 11.795875186881105
best_error: 11.794540915529275
best_error: 11.794540787529321
best_error: 11.793595704576338
best_error: 11.793595684856369
best_error: 11.776333488323173
best_error: 11.77633347000676
best_error: 11.775372151986929
best_error: 11.775371988036502
best_error: 11.755098818064187
best_error: 11.755098798764916
best_error: 11.724367584000676
best_error: 11.724367566842604
best_error: 11.676292276757774
best_error: 11.6762921547896
best_error: 11.658295996062648
best_error: 11.658295974970688
best_error: 11.647632290861175
best_error: 11.64763226864389
best_error: 11.6292880978034
best_error: 11.629287996491202
best_error: 11.626891383866257
best_error: 11.626891078610715
best_error: 11.625436717417147
best_error: 11.625436614448443
best_error: 11.625306114413224
best_error: 11.625305809313671
best_error: 11.62526889310684
best_error: 11.625268872414601
best_error: 11.625135826168536
best_error: 11.625135805477534
best_error: 11.625133826471455
best_error: 11.625133723500147
best_error: 11.625133073314885
best_error: 11.625133052623914
best_error: 11.625132620863871
best_error: 11.62513251789246
best_error: 11.62513238561495
best_error: 11.625132364923973
best_error: 11.62513231966026
best_error: 11.625132233681075
best_error: 11.620791796710783
best_error: 11.620791789628987
best_error: 11.620791777160509
best_error: 11.605032680666463
best_error: 11.605032674535412
best_error: 11.605032643218822
best_error: 11.561579610585607
best_error: 11.561579599398257
