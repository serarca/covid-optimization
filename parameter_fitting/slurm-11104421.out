ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 64
days_switch 70
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 102.39873350999282
best_error: 102.39873330819412
best_error: 102.39873330534557
best_error: 20.66624884153149
best_error: 20.666248841530845
best_error: 20.66624884038682
best_error: 20.666165592980306
best_error: 20.666165591833312
best_error: 20.665830901588183
best_error: 20.665830900431803
best_error: 20.66446433756231
best_error: 20.664464336367125
best_error: 20.658507922749486
best_error: 20.658507921375822
best_error: 20.622303229556714
best_error: 20.622303226793427
best_error: 20.493590666095436
best_error: 20.49359065526967
best_error: 18.099024463352183
best_error: 18.09902414806763
best_error: 15.61994169999926
best_error: 15.619941069175919
best_error: 14.459146109139951
best_error: 14.459146077036506
best_error: 14.35397032224861
best_error: 14.353970317228095
best_error: 14.353970285400603
best_error: 14.353668787259775
best_error: 14.353668782211194
best_error: 14.35366875075338
best_error: 14.353396426569521
best_error: 14.353396421493088
best_error: 14.353396390405555
best_error: 14.353209095132694
best_error: 14.353209090053458
best_error: 14.35320905896683
best_error: 14.353150900746211
best_error: 14.353150895666104
best_error: 14.353150864579753
best_error: 14.35312924041171
best_error: 14.353129235331277
best_error: 14.353129204245032
best_error: 14.353096198065668
best_error: 14.353096192984825
best_error: 14.35309616189825
best_error: 14.353085779481109
best_error: 14.353085774400135
best_error: 14.353085743313454
best_error: 14.35308074798287
best_error: 14.353080742901831
best_error: 14.353080711815103
best_error: 14.353073993702411
best_error: 14.35307398862129
best_error: 14.353073957534495
best_error: 14.353071743841609
best_error: 14.353071738760459
best_error: 14.353071707673635
best_error: 14.353070581528836
best_error: 14.35307057644767
best_error: 14.353070545360836
best_error: 14.353068506753758
best_error: 14.353068501672563
best_error: 14.353068470585711
best_error: 14.353067978405203
best_error: 14.353067973324007
best_error: 14.353067942237146
best_error: 14.353067833319635
best_error: 14.353067828238437
best_error: 14.353067797151578
best_error: 14.353067738540993
best_error: 14.353067733459792
best_error: 14.353067702372929
best_error: 14.353067631828226
best_error: 14.353067626747027
best_error: 14.353067595660164
best_error: 14.353067471068178
best_error: 14.35306746391394
best_error: 14.353067463812561
best_error: 14.353067436664775
best_error: 14.353067431583568
best_error: 14.353067429397123
best_error: 14.353028527332539
best_error: 14.353028522252018
best_error: 14.353028491158476
best_error: 14.352872944774276
best_error: 14.352872939696493
best_error: 14.352872908576295
best_error: 14.352252557630052
best_error: 14.35225255258699
best_error: 14.35225252099132
best_error: 14.351242845090432
best_error: 14.351242840088757
best_error: 14.35124280795127
best_error: 14.351240842013143
best_error: 14.35124083701151
best_error: 14.351240804873669
best_error: 14.351232829830344
best_error: 14.351232824828845
best_error: 14.3512327926896
best_error: 14.351200783120504
best_error: 14.35120077811955
best_error: 14.351200745974705
best_error: 14.351072628618667
best_error: 14.351072623619922
best_error: 14.351072591452654
best_error: 14.350560527735855
best_error: 14.35056052274592
best_error: 14.350560490489013
best_error: 14.348534464301697
best_error: 14.348534459494706
best_error: 14.348534424397997
best_error: 14.341254660847898
best_error: 14.341254657181054
best_error: 14.341254604060325
best_error: 14.33518931716165
best_error: 14.335189316403694
best_error: 14.335189217380586
best_error: 14.333335067982624
best_error: 14.33333493082249
best_error: 14.323551370839413
best_error: 14.323551232314202
best_error: 14.304212710229553
best_error: 14.304212709367034
best_error: 14.304212616875699
best_error: 14.29936569951757
best_error: 14.299365676277127
best_error: 14.271615260112114
best_error: 14.271615234400873
best_error: 14.264839927948891
best_error: 14.26483990219496
best_error: 14.258320125536454
best_error: 14.258320101308499
best_error: 14.23279651755701
best_error: 14.232796428239281
best_error: 13.973718053595459
best_error: 13.973718049403391
best_error: 13.973718030889977
best_error: 13.951450218940874
best_error: 13.951450193766112
best_error: 13.874614446509693
best_error: 13.874614431933262
best_error: 13.585716126417484
best_error: 13.585716112097302
best_error: 13.4471030329894
best_error: 13.44710301746305
best_error: 13.355805219287443
best_error: 13.355805204907622
best_error: 13.343868976027892
best_error: 13.343868961636883
best_error: 13.341531283067747
best_error: 13.341531282367225
best_error: 13.341531215760691
best_error: 13.341075178018107
best_error: 13.341075163622909
best_error: 13.340644488963557
best_error: 13.340644488279064
best_error: 13.340644421888348
best_error: 13.340633876355902
best_error: 13.340633875691633
best_error: 13.340633809619028
best_error: 13.340630835680827
best_error: 13.340630835016547
best_error: 13.340630768943681
best_error: 13.340630233426584
best_error: 13.340630232762305
best_error: 13.34063016668939
best_error: 13.340630130198143
best_error: 13.34063011580212
best_error: 13.320976497045697
best_error: 13.32097647770454
best_error: 13.320976477472145
best_error: 13.192019763004126
best_error: 13.192019745420348
best_error: 13.125166283514293
best_error: 13.125166279590193
best_error: 13.125166120331604
best_error: 13.11672535827474
best_error: 13.116725354702595
best_error: 13.116725204285027
best_error: 13.114675466377768
best_error: 13.11467531677382
best_error: 13.114624788225425
best_error: 13.11462463861721
best_error: 13.114621214706613
best_error: 13.1146210650981
best_error: 13.114618396521136
best_error: 13.114618246912379
best_error: 13.114616953859645
best_error: 13.114616804250767
best_error: 13.114615798074576
best_error: 13.114615648465595
best_error: 13.114615230240508
best_error: 13.114615080631474
best_error: 13.114614764696103
best_error: 13.114614615087039
best_error: 13.11461460288627
best_error: 13.114614453277184
best_error: 13.114614319076296
