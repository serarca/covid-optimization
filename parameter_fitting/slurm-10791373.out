ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.328019469142216
best_error: 9.328019439634307
best_error: 6.332969688263576
best_error: 6.3329694850277995
best_error: 3.727101926745547
best_error: 3.7271016521578297
best_error: 3.345732363516678
best_error: 3.345732317008175
best_error: 3.3313867566327198
best_error: 3.3313867259003778
best_error: 3.2712547877926736
best_error: 3.2712546803386857
best_error: 3.2644648499136957
best_error: 3.2644648473504
best_error: 3.2644648462166197
best_error: 3.260731997780229
best_error: 3.2607319970323565
best_error: 3.2607319941457633
best_error: 3.2592422527958034
best_error: 3.259242252542004
best_error: 3.259242249053071
best_error: 3.2540942399887705
best_error: 3.254094234538974
best_error: 3.2539503334831172
best_error: 3.2539503277538344
best_error: 3.253867000993165
best_error: 3.2538669952558195
best_error: 3.2538198972613075
best_error: 3.2538198913732304
best_error: 3.25379327948961
best_error: 3.253793273416542
best_error: 3.2537774882193764
best_error: 3.253777482144772
best_error: 3.2537681578720274
best_error: 3.253768151796509
best_error: 3.2537628702857213
best_error: 3.253762864209692
best_error: 3.2537532827646793
best_error: 3.2537531826521358
best_error: 3.253753009210417
best_error: 3.253753003133182
best_error: 3.2537529080202177
best_error: 3.253752901942975
best_error: 3.253752841398785
best_error: 3.253752833446783
best_error: 3.25375282864636
best_error: 3.253752827492099
best_error: 3.253752807040402
best_error: 3.252926955006346
best_error: 3.2529269529449194
best_error: 3.252926950683535
best_error: 3.2522290909686182
best_error: 3.2522290909686165
best_error: 3.252229086627022
best_error: 3.2444445513918985
best_error: 3.2444445496092484
best_error: 3.244444546456729
best_error: 3.2286489631040567
best_error: 3.2286489560450646
best_error: 3.2286322439388884
best_error: 3.2286322399442584
best_error: 3.2286322371504887
best_error: 3.2282366811266288
best_error: 3.228236677028664
best_error: 3.228236674284652
best_error: 3.228017682717131
best_error: 3.2280176785631634
best_error: 3.2280176758424792
best_error: 3.227912723609748
best_error: 3.2279127194546873
best_error: 3.2279127167119226
best_error: 3.2278848919288956
best_error: 3.227884887774595
best_error: 3.227884885024939
best_error: 3.22787012707398
best_error: 3.227870122920095
best_error: 3.2278701201667728
best_error: 3.2278593224980896
best_error: 3.2278593183444912
best_error: 3.2278593155885082
best_error: 3.227852987631511
best_error: 3.2278529834781025
best_error: 3.227852980720537
best_error: 3.227847671840577
best_error: 3.227847667687295
best_error: 3.2278476649284364
best_error: 3.227845156907615
best_error: 3.227845152754398
best_error: 3.227845149994922
best_error: 3.2278428452819172
best_error: 3.2278428411287736
best_error: 3.227842838368718
best_error: 3.2278419097838325
best_error: 3.2278419056307093
best_error: 3.227841902870426
best_error: 3.227841319838369
best_error: 3.2278413156852617
best_error: 3.2278413129248333
best_error: 3.227840927377912
best_error: 3.2278409232248224
best_error: 3.2278409204642884
best_error: 3.2278406435047784
best_error: 3.227840639351691
best_error: 3.227840636591094
best_error: 3.2278404752068885
best_error: 3.2278404710538
best_error: 3.2278404682931656
best_error: 3.2278403559355597
best_error: 3.2278403517824814
best_error: 3.227840349021812
best_error: 3.2278402822465124
best_error: 3.2278402780934394
best_error: 3.227840275332748
best_error: 3.227840231865708
best_error: 3.227840227712629
best_error: 3.227840224951933
best_error: 3.2278401985261618
best_error: 3.227840194373086
best_error: 3.2278401916123785
best_error: 3.227840177191884
best_error: 3.2278401730388127
best_error: 3.2278401702780983
best_error: 3.2278401610887193
best_error: 3.227840156935648
best_error: 3.22784015417493
best_error: 3.227840148298474
best_error: 3.227840144145401
best_error: 3.227840141384681
best_error: 3.227840126429251
best_error: 3.2278401222761715
best_error: 3.227840119515456
best_error: 3.2278401185410948
best_error: 3.2277956420710887
best_error: 3.2277956379182458
best_error: 3.2277956351582398
best_error: 3.22761844623741
best_error: 3.2276184421151823
best_error: 3.2276184393283516
best_error: 3.226927383362451
best_error: 3.226927379422335
best_error: 3.2269273764522737
best_error: 3.2244074424749236
best_error: 3.2244074390861557
best_error: 3.2244074355441947
best_error: 3.216129372951402
best_error: 3.21612937208168
best_error: 3.2161293659304477
best_error: 3.215678710661171
best_error: 3.215678703582534
best_error: 3.2156251409359613
best_error: 3.2156251338452946
best_error: 3.21562380462352
best_error: 3.2156238046235197
best_error: 3.215623797539503
best_error: 3.215623741282785
best_error: 3.215623741249818
best_error: 3.2156237342291987
best_error: 3.215623675920363
best_error: 3.2156236688358346
best_error: 3.2156236126724322
best_error: 3.215623612661511
best_error: 3.2156236055874827
best_error: 3.215623169347304
best_error: 3.2156231693143456
best_error: 3.2156231622937126
best_error: 3.215621427632736
best_error: 3.2156214275951784
best_error: 3.2156214205829854
best_error: 3.2155928488097225
best_error: 3.2155928486645755
best_error: 3.2155928417565685
best_error: 3.103227349462858
best_error: 3.10322734730192
best_error: 3.1032273437555045
best_error: 3.0838411703783937
best_error: 3.0838411687163587
best_error: 3.0838411670199024
best_error: 3.078671127209705
best_error: 3.078671125888306
best_error: 3.078671125025459
best_error: 3.0778259756256325
best_error: 3.0778259079423185
best_error: 3.0771565326086927
best_error: 3.0771565313741114
best_error: 3.0771565308735247
best_error: 3.07701955378768
best_error: 3.0770195525579007
best_error: 3.0770195520746197
best_error: 3.077012034730518
best_error: 3.0770120335005346
best_error: 3.0770120330175486
best_error: 3.077008025481814
best_error: 3.077008024251729
best_error: 3.0770080237688946
best_error: 3.0770068976254947
best_error: 3.0770068299683913
best_error: 3.076975939458479
best_error: 3.0769759383753894
best_error: 3.0769759376799435
best_error: 3.076919446631309
best_error: 3.0769194455467264
best_error: 3.07691944485346
best_error: 3.0768933217073937
best_error: 3.0768933206221294
best_error: 3.0768933199298627
best_error: 3.0768806119306324
best_error: 3.0768806108450337
best_error: 3.076880610153254
best_error: 3.0768742325021434
best_error: 3.0768742314163817
best_error: 3.076874230724843
best_error: 3.0768709717587086
best_error: 3.076870970672853
best_error: 3.076870969981452
best_error: 3.0768705614197343
best_error: 3.0768705603338584
best_error: 3.076870252955793
best_error: 3.0768702518699014
best_error: 3.076869916708916
best_error: 3.076869915623008
best_error: 3.0768697317898606
best_error: 3.076869730703945
best_error: 3.0768694334396436
best_error: 3.0768694323537082
best_error: 3.0768693323916745
best_error: 3.0768693313057534
best_error: 3.0768692953929855
best_error: 3.0768692943070617
best_error: 3.0768692544601532
best_error: 3.076869253374201
best_error: 3.0768692498312773
best_error: 3.076869218958922
best_error: 3.0768692178729706
best_error: 3.0768692068857213
best_error: 3.076869205799776
best_error: 3.0768691991091437
best_error: 3.0768691980232097
best_error: 3.0768691961967933
best_error: 3.0768691951108655
best_error: 3.076869194536609
best_error: 3.0768691934506815
best_error: 3.076869189304223
best_error: 3.076869188620885
best_error: 3.0768691863518316
