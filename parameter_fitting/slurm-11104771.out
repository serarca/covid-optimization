ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 92
days_switch 75
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 99.20042482518326
best_error: 99.2004246985706
best_error: 15.18666502959538
best_error: 15.186665017415583
best_error: 15.173687967388956
best_error: 15.173687962674423
best_error: 15.168419953408009
best_error: 15.168419948860725
best_error: 15.152938494628225
best_error: 15.152938492119741
best_error: 15.117170963465451
best_error: 15.11717095813884
best_error: 15.11280332307539
best_error: 15.112803322641183
best_error: 15.080319453537603
best_error: 15.080319453474521
best_error: 15.080319450970268
best_error: 15.079027856206302
best_error: 15.079027856129047
best_error: 15.079027855657122
best_error: 15.079027855240142
best_error: 15.078795457313364
best_error: 15.078795456775035
best_error: 15.078795456368463
best_error: 15.078723458805314
best_error: 15.078723458270254
best_error: 15.078723457866316
best_error: 15.076127805965996
best_error: 15.076127805410012
best_error: 15.076127805008905
best_error: 15.06532036976148
best_error: 15.06532036911763
best_error: 15.06532036871548
best_error: 15.041714490980763
best_error: 15.041714490198562
best_error: 15.041714489566893
best_error: 14.91137176312172
best_error: 14.911371761643974
best_error: 14.911371761115765
best_error: 14.716577475971674
best_error: 14.716577473953269
best_error: 14.716577473311633
best_error: 14.667751472583799
best_error: 14.667751472163156
best_error: 14.667751415939946
best_error: 14.536677610510313
best_error: 14.53667760955195
best_error: 14.536677608563258
best_error: 14.536677510585104
best_error: 14.22931866243714
best_error: 14.229318654340776
best_error: 14.229318640342989
best_error: 14.229318588218263
best_error: 14.228432760028683
best_error: 14.228432751774905
best_error: 14.228432737406644
best_error: 14.228432687045505
best_error: 13.920692569948894
best_error: 13.92069256917388
best_error: 13.920692481788663
best_error: 13.659600445029591
best_error: 13.659600443030927
best_error: 13.659600330765482
best_error: 13.58459472543807
best_error: 13.584594724334739
best_error: 13.584594719301977
best_error: 13.573912176730975
best_error: 13.573912175754993
best_error: 13.57391217136841
best_error: 13.547847344107897
best_error: 13.547847343530885
best_error: 13.547847328864766
best_error: 13.532996806538584
best_error: 13.532996806308704
best_error: 13.53299678489892
best_error: 13.52564762218019
best_error: 13.52564762079083
best_error: 13.524559382046382
best_error: 13.52455938078812
best_error: 13.524559380425893
best_error: 13.523092693194085
best_error: 13.523092692087285
best_error: 13.523092688089811
best_error: 13.521165890352545
best_error: 13.521165889339114
best_error: 13.521165888358624
best_error: 13.52087346588433
best_error: 13.520873465881829
best_error: 13.5208734573886
best_error: 13.520094854102567
best_error: 13.520094853163185
best_error: 13.51984956097305
best_error: 13.519849557958562
best_error: 13.519671851670656
best_error: 13.519671851658234
best_error: 13.519671843811036
best_error: 13.518815577883602
best_error: 13.518815576742337
best_error: 13.517319004991439
best_error: 13.517319003872393
best_error: 13.512223238812108
best_error: 13.512223238701512
best_error: 13.51222322821667
best_error: 13.491321509259034
best_error: 13.491321507631227
best_error: 13.491321446650987
best_error: 13.455345734452834
best_error: 13.45534573226562
best_error: 13.455345672975701
best_error: 13.448635276739095
best_error: 13.448635274020578
best_error: 13.448635248331039
best_error: 13.434085198129578
best_error: 13.434085195817717
best_error: 13.434085170263968
best_error: 13.400627448871392
best_error: 13.400627448851171
best_error: 13.400627448465134
best_error: 13.400627447711694
best_error: 13.40028367951876
best_error: 13.400283679513995
best_error: 13.40028367913764
best_error: 13.40028367840114
best_error: 13.399255920709628
best_error: 13.399255920270864
best_error: 13.399255914086556
best_error: 13.396518584685214
best_error: 13.396518584350622
best_error: 13.396202017961052
best_error: 13.396202017773195
best_error: 13.396202017475174
best_error: 13.396019746179308
best_error: 13.39601974585705
best_error: 13.395690708280013
best_error: 13.39569070796807
best_error: 13.395636724667225
best_error: 13.395636724356653
best_error: 13.395628782798305
best_error: 13.395628782621397
best_error: 13.395628782308494
best_error: 13.395142334253148
best_error: 13.395142334110368
best_error: 13.395142332851789
best_error: 13.394448112158742
best_error: 13.394448111671386
best_error: 13.39443871542603
best_error: 13.394438715221806
best_error: 13.394438713302934
best_error: 13.394180708864251
best_error: 13.39418070250612
best_error: 13.394049768324846
best_error: 13.394049761934761
best_error: 13.394047258502713
best_error: 13.394047258285013
best_error: 13.394047256586736
best_error: 13.394047043070408
best_error: 13.394047036678977
best_error: 13.394046954283315
best_error: 13.394046954065601
best_error: 13.394046952367384
best_error: 13.393885235793364
best_error: 13.393885229179954
best_error: 13.393481246495938
best_error: 13.393481246204576
best_error: 13.39319130667162
best_error: 13.393191306324589
best_error: 13.393191305875742
best_error: 13.39277006495702
best_error: 13.392770064557778
best_error: 13.392770064358594
best_error: 13.39148452694659
best_error: 13.391484525906916
best_error: 13.39148452053638
best_error: 13.38912846963184
best_error: 13.389128468838177
best_error: 13.389128464998562
best_error: 13.382822833402798
best_error: 13.382822832948847
best_error: 13.382822830787946
best_error: 13.376974130598366
best_error: 13.37697412988986
best_error: 13.376974110200614
best_error: 13.372782707084253
best_error: 13.372782706626117
best_error: 13.372782700752696
best_error: 13.362802451037185
best_error: 13.362802450903198
best_error: 13.362802450870415
best_error: 13.362802450409047
best_error: 13.361905927757894
best_error: 13.361905927255403
best_error: 13.361905926302297
best_error: 13.360138859256214
best_error: 13.360138847994994
