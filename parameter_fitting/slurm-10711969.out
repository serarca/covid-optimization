ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 21.087927491864548
best_error: 21.087927267125878
best_error: 12.748053687488335
best_error: 12.74805368154349
best_error: 12.748053663171868
best_error: 12.579955226115569
best_error: 12.579955218918474
best_error: 12.579955212564307
best_error: 11.805586629192995
best_error: 11.805586618674624
best_error: 11.750192232248953
best_error: 11.750192221996052
best_error: 11.58685453111491
best_error: 11.586854518149552
best_error: 11.582343672277892
best_error: 11.582343659762293
best_error: 10.204334188156949
best_error: 10.204334122678969
best_error: 10.204334030378492
best_error: 9.88876793136869
best_error: 9.888767890178276
best_error: 9.888767763349836
best_error: 9.305772976845262
best_error: 9.305772967796031
best_error: 9.305772787549037
best_error: 9.07904114172863
best_error: 9.07904094390338
best_error: 8.995591875516013
best_error: 8.99559167512448
best_error: 8.966292213049671
best_error: 8.966292011493632
best_error: 8.935195424712703
best_error: 8.935195220917471
best_error: 8.92131825680901
best_error: 8.921318052149179
best_error: 8.914186106941237
best_error: 8.91418590199735
best_error: 8.911166256612475
best_error: 8.911166051431364
best_error: 8.910098672052083
best_error: 8.910098466787197
best_error: 8.90665118996408
best_error: 8.906650984413664
best_error: 8.906600688590077
best_error: 8.90660061957716
best_error: 8.701779937550684
best_error: 8.701779813813037
best_error: 8.701779807551885
best_error: 8.658675143352967
best_error: 8.658674907618105
best_error: 8.142333251209013
best_error: 8.142333096849036
best_error: 8.064899204155836
best_error: 8.064899087618471
best_error: 8.064899054482359
best_error: 8.008772686131355
best_error: 8.008772600500203
best_error: 8.00877252700971
best_error: 7.99003119097328
best_error: 7.99003110660346
best_error: 7.990031028526834
best_error: 7.979743949688531
best_error: 7.979743872874343
best_error: 7.979743785502425
best_error: 7.944990454441267
best_error: 7.944990385398421
best_error: 7.944990287173545
best_error: 7.92526950968514
best_error: 7.9252694485972
best_error: 7.9252693407115515
best_error: 7.893052120926149
best_error: 7.893052058647255
best_error: 7.8930519493228815
best_error: 7.875139489897058
best_error: 7.875139432613135
best_error: 7.875139317415677
best_error: 7.863436347728173
best_error: 7.8634362900300765
best_error: 7.863436174270017
best_error: 7.852628240525526
best_error: 7.852628183770522
best_error: 7.852628066200447
best_error: 7.8469595428765135
best_error: 7.846959485320351
best_error: 7.846959368043401
best_error: 7.841694163222295
best_error: 7.841694104930201
best_error: 7.841693987918224
best_error: 7.838910210290391
best_error: 7.838910151612334
best_error: 7.838910034737641
best_error: 7.836367829711958
best_error: 7.836367771939437
best_error: 7.836367654001284
best_error: 7.835040286191943
best_error: 7.835040228236547
best_error: 7.835040110361979
best_error: 7.833824728531159
best_error: 7.833824670408761
best_error: 7.833824552592018
best_error: 7.833175075282412
best_error: 7.833175017070931
best_error: 7.833174899284909
best_error: 7.8325838836807
best_error: 7.832583825388246
best_error: 7.832583707630164
best_error: 7.8280801077960955
best_error: 7.828080048410525
best_error: 7.828079934583201
best_error: 7.815739081029167
best_error: 7.81573902142342
best_error: 7.815738907489768
best_error: 7.810465097529464
best_error: 7.810465037296769
best_error: 7.810464923707868
best_error: 7.802085055175096
best_error: 7.802084995212399
best_error: 7.802084880972707
best_error: 7.798417958510116
best_error: 7.798417898117034
best_error: 7.798417784111162
best_error: 7.797170879146849
best_error: 7.797170818607793
best_error: 7.797170704681129
best_error: 7.796638108840861
best_error: 7.796638048239505
best_error: 7.796637934346568
best_error: 7.795798000167906
best_error: 7.795797939468389
best_error: 7.795797825628638
best_error: 7.7955178425384615
best_error: 7.795517781806235
best_error: 7.795517667984197
best_error: 7.795408802974274
best_error: 7.795408742229309
best_error: 7.795408628414181
best_error: 7.795206008593317
best_error: 7.795205947824681
best_error: 7.795205834022372
best_error: 7.795146715891497
best_error: 7.7951466551159445
best_error: 7.795146541317358
best_error: 7.795133875052565
best_error: 7.795133814275501
best_error: 7.795133700477758
best_error: 7.7951254611645115
best_error: 7.795125400386463
best_error: 7.795125286589224
best_error: 7.795113688294796
best_error: 7.795113627515385
best_error: 7.795113513718919
best_error: 7.795099475009072
best_error: 7.795099414227998
best_error: 7.795099300432417
best_error: 7.795098891600519
best_error: 7.795098830819381
best_error: 7.795098717023819
best_error: 7.795098375131759
best_error: 7.7950983143505646
best_error: 7.795098200555075
best_error: 7.7950981334636396
best_error: 7.795097958886931
best_error: 7.756812882480711
best_error: 7.756812780172867
best_error: 7.756812728399111
best_error: 7.700038489665609
best_error: 7.70003838241641
best_error: 7.700038336775938
best_error: 7.4789698726765685
best_error: 7.478969752552902
best_error: 7.478969726687322
best_error: 7.358871463895796
best_error: 7.358871334238178
best_error: 7.35887132283715
best_error: 5.132741649789954
best_error: 4.805980273758149
best_error: 4.805979774277827
best_error: 4.768452903741139
best_error: 4.768452407425699
best_error: 4.751804274756848
best_error: 4.751803780358825
best_error: 4.743182360839834
best_error: 4.743181865116401
best_error: 4.741283101026715
best_error: 4.739599958583622
best_error: 4.739599462309398
best_error: 4.7389540393086556
best_error: 4.7382967556043045
best_error: 4.738296259129725
best_error: 4.738205531216289
best_error: 4.738201867027499
best_error: 4.73820137053761
best_error: 4.738178682722523
best_error: 4.738178186229076
best_error: 4.738165461854466
best_error: 4.738164965358991
best_error: 4.738159704020751
best_error: 4.738159207524394
best_error: 4.738155641704321
best_error: 4.738155620819137
best_error: 4.738155603258781
best_error: 4.738155571859252
best_error: 4.738155563582026
best_error: 4.738155533413713
best_error: 4.738155530294502
