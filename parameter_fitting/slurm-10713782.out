ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.7615868736702
best_error: 12.761586847724555
best_error: 12.761586830410621
best_error: 12.672009917538512
best_error: 12.67200988626942
best_error: 12.6720098674053
best_error: 11.16546712341237
best_error: 11.165466978265899
best_error: 11.16546695237393
best_error: 8.864434675050664
best_error: 8.864434389941108
best_error: 8.450423821791702
best_error: 8.450423544217026
best_error: 8.40218993385245
best_error: 8.402189725472516
best_error: 8.126174018367525
best_error: 8.126173703103131
best_error: 6.945288649696063
best_error: 6.9452883140710595
best_error: 5.986801030960829
best_error: 5.9868007314108755
best_error: 5.562012971743764
best_error: 5.562012701012185
best_error: 5.3599763380998064
best_error: 5.359976071046299
best_error: 5.25697702401466
best_error: 5.25697675983964
best_error: 5.203083785149594
best_error: 5.203083519190873
best_error: 5.166090717238821
best_error: 5.16609044690934
best_error: 5.158403450124336
best_error: 5.158403178902425
best_error: 5.154002682077431
best_error: 5.154002410344967
best_error: 5.152243995279479
best_error: 5.1522437233430605
best_error: 5.1518534623623955
best_error: 5.151853190380692
best_error: 5.15185220121511
best_error: 5.151851929233252
best_error: 5.080139997237564
best_error: 5.080139694201158
best_error: 5.065335611544685
best_error: 5.0653352766258255
best_error: 5.0342078932105405
best_error: 5.034207557024146
best_error: 4.906697112910232
best_error: 4.9066967817522285
best_error: 4.840673735572704
best_error: 4.8406734062920265
best_error: 4.8389250085002224
best_error: 4.83892472024869
best_error: 4.824540042875802
best_error: 4.8245397141459945
best_error: 4.814032384028145
best_error: 4.814032055249304
best_error: 4.773004484234959
best_error: 4.773004135285549
best_error: 4.711612565353631
best_error: 4.711612299840195
best_error: 4.652764783467044
best_error: 4.652764616299752
best_error: 4.511401755597135
best_error: 4.511401496727751
best_error: 4.374607004564838
best_error: 4.374606817246449
best_error: 4.369863404285069
best_error: 4.369862849842397
best_error: 4.369790140501829
best_error: 4.369789953259979
best_error: 4.369559624583829
best_error: 4.369559073398747
best_error: 4.368518023244696
best_error: 4.368517828175725
best_error: 4.366099755406783
best_error: 4.366099547283561
best_error: 4.319160033139923
best_error: 4.319159801867482
best_error: 4.239466005847344
best_error: 4.239465770892126
best_error: 4.141566521190777
best_error: 4.141566298099174
best_error: 4.105243415105804
best_error: 4.105243181355591
best_error: 4.084253738728248
best_error: 4.084253507085443
best_error: 4.069245020192752
best_error: 4.0692447939293706
best_error: 4.061765327803066
best_error: 4.0617651021619885
best_error: 4.061556617254412
best_error: 4.061556249566298
best_error: 4.002841434468985
best_error: 4.002841009336924
best_error: 3.8905052072803747
best_error: 3.8905050356243454
best_error: 3.8537412671496885
best_error: 3.8537410948764137
best_error: 3.821287385873394
best_error: 3.821287218819495
best_error: 3.8207189323213457
best_error: 3.820718765284825
best_error: 3.820500581570892
best_error: 3.8205004144032246
best_error: 3.820357713983878
best_error: 3.8203575467307105
best_error: 3.820335955486897
best_error: 3.8203357882206808
best_error: 3.820327395221043
best_error: 3.820326895525433
best_error: 3.820323906257622
best_error: 3.8203237389842193
best_error: 3.820323704857801
best_error: 3.8203234078597794
best_error: 3.8203229399521854
best_error: 3.8203228409763823
best_error: 3.820322821203151
best_error: 3.8087658239412283
best_error: 3.808765303606035
best_error: 3.7796936736990254
best_error: 3.779693106658847
best_error: 3.7494853315373433
best_error: 3.749484672274294
best_error: 3.726888256310814
best_error: 3.7268881699280105
best_error: 3.7268880747200495
best_error: 3.7264778642471654
best_error: 3.7264772294264548
best_error: 3.7251701490563
best_error: 3.725169528772015
best_error: 3.722236100684243
best_error: 3.7222359970200674
best_error: 3.7222359194144365
best_error: 3.722200411842813
best_error: 3.722199786803711
best_error: 3.721422635421895
best_error: 3.721422508182715
best_error: 3.7214224544068912
best_error: 3.7214186164682252
best_error: 3.7214180168192
best_error: 3.7213703910450677
best_error: 3.7213697886924644
best_error: 3.715147012352899
best_error: 3.7151468898835702
best_error: 3.7151468313555607
best_error: 3.6906438567020654
best_error: 3.6906437395831864
best_error: 3.690643675923664
best_error: 3.5952534605592676
best_error: 3.5952533535551794
best_error: 3.595253280006551
best_error: 3.1739430477624477
best_error: 3.1739426243692557
best_error: 3.15460045449652
best_error: 3.154600004762142
best_error: 3.119534472674075
best_error: 3.119534464249112
best_error: 3.119534299847484
best_error: 3.1164157516655653
best_error: 3.116415296451296
best_error: 3.116137540061649
best_error: 3.1161375310674897
best_error: 3.1161373673919077
best_error: 3.1159738167819033
best_error: 3.115973361541355
best_error: 3.0828680959822314
best_error: 3.0828676717281502
best_error: 3.0765118030585583
best_error: 3.0765113965643596
best_error: 3.0718541433483604
best_error: 3.0718537319044676
best_error: 3.068878081763592
best_error: 3.0688776589339666
best_error: 3.0657148291803455
best_error: 3.065714406021246
best_error: 3.065077345179641
best_error: 3.0650769223537235
best_error: 3.064896794398262
best_error: 3.0648963715535356
best_error: 3.0647980726053596
best_error: 3.0647976497503544
