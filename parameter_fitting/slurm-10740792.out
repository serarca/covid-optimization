ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.582191356447156
best_error: 10.582191346935165
best_error: 10.210993829527952
best_error: 10.210993781436585
best_error: 7.305416700256888
best_error: 7.3054163075485965
best_error: 5.60319523649201
best_error: 5.6031947812268035
best_error: 5.159777899166135
best_error: 5.159777899165892
best_error: 5.159777888776016
best_error: 5.158595010392718
best_error: 5.158595010392477
best_error: 5.158594999620791
best_error: 5.120295765925987
best_error: 5.120295686076288
best_error: 4.830468450609153
best_error: 4.8304684025810545
best_error: 4.568957765554669
best_error: 4.568957765554439
best_error: 4.544525654116537
best_error: 4.544525654116281
best_error: 4.538625644277993
best_error: 4.538625644277745
best_error: 4.339495621476831
best_error: 4.33949562147664
best_error: 4.29284223655325
best_error: 4.292842236553146
best_error: 4.269568393318466
best_error: 4.2695683933183775
best_error: 4.269568389920568
best_error: 4.265874173551334
best_error: 4.2658741735511905
best_error: 4.265874165547315
best_error: 4.263402455034603
best_error: 4.263402437853563
best_error: 4.263323983432196
best_error: 4.263323983432077
best_error: 4.263323980432117
best_error: 4.263071583658561
best_error: 4.263071583658441
best_error: 4.263071580645713
best_error: 4.262825879913845
best_error: 4.262825864271509
best_error: 4.262343736366185
best_error: 4.26234372017906
best_error: 4.26038440526627
best_error: 4.260384387749469
best_error: 4.25313883114677
best_error: 4.253138831146625
best_error: 4.2531388302063675
best_error: 4.25313882899801
best_error: 4.225412367463299
best_error: 4.225412367463129
best_error: 4.225412352405091
best_error: 4.215790051509256
best_error: 4.215790051509064
best_error: 4.215790036970261
best_error: 4.213068004272333
best_error: 4.213068004272134
best_error: 4.213067992193754
best_error: 4.190747301146571
best_error: 4.19074730114638
best_error: 4.158770436914079
best_error: 4.158770436913933
best_error: 4.145317823754149
best_error: 4.145317823754077
best_error: 4.145317818619187
best_error: 4.104450250401561
best_error: 4.104450250401427
best_error: 4.104450244081609
best_error: 4.080852697295334
best_error: 4.080852697295117
best_error: 4.070238964109704
best_error: 4.070238964109522
best_error: 4.0334030192653545
best_error: 4.033403019265132
best_error: 4.033402977725295
best_error: 3.9855127406554356
best_error: 3.9855127406553037
best_error: 3.9855127388358227
best_error: 3.9851028916578968
best_error: 3.9851028610944805
best_error: 3.9790240630590854
best_error: 3.979024063058972
best_error: 3.9785582066908436
best_error: 3.978558206690721
best_error: 3.978538110373935
best_error: 3.9785381103738153
best_error: 3.9785324936308206
best_error: 3.9785324936306994
best_error: 3.9785324934909925
best_error: 3.9785170197613837
best_error: 3.9785170197612643
best_error: 3.978517019266144
best_error: 3.9785158642371017
best_error: 3.97851586423698
best_error: 3.978515863727088
best_error: 3.9785143845949293
best_error: 3.9785143845948068
best_error: 3.978514384109865
best_error: 3.978509596781824
best_error: 3.978509596781704
best_error: 3.9785095962593964
best_error: 3.978509028813428
best_error: 3.9785090288133067
best_error: 3.9785090282907127
best_error: 3.978508497922241
best_error: 3.9785084979221197
best_error: 3.9785084973992575
best_error: 3.9785062759065153
best_error: 3.9785062759063896
best_error: 3.978506275428354
best_error: 3.978505443093149
best_error: 3.9785054430930287
best_error: 3.9785054426295265
best_error: 3.9785039848453083
best_error: 3.978503984845192
best_error: 3.9785039843809114
best_error: 3.9785030713607012
best_error: 3.978503071360578
best_error: 3.97850307089582
best_error: 3.978502949734333
best_error: 3.9785029497342124
best_error: 3.978502949269388
best_error: 3.9785028690991897
best_error: 3.9785028690990663
best_error: 3.9785028686341963
best_error: 3.978502819448807
best_error: 3.978502819448685
best_error: 3.978502818983789
best_error: 3.9785027746108836
best_error: 3.978502774610758
best_error: 3.9785027741458454
best_error: 3.978502717193592
best_error: 3.978502717193471
best_error: 3.9785027167285225
best_error: 3.978502675167882
best_error: 3.978502675167762
best_error: 3.978502674677118
best_error: 3.9785026633757083
best_error: 3.978502518486564
best_error: 3.978502518486445
best_error: 3.9785025179957194
best_error: 3.9785024515402188
best_error: 3.9785024515401006
best_error: 3.9785024510493305
best_error: 3.9785024421294564
best_error: 3.978502442129334
best_error: 3.978502441638558
best_error: 3.9785024333340804
best_error: 3.978502433333963
best_error: 3.9785024328431793
best_error: 3.9785024252106034
best_error: 3.978502425210485
best_error: 3.9785024247197005
best_error: 3.9785024210302713
best_error: 3.9785024210301554
best_error: 3.9785024205393658
best_error: 3.97850241717269
best_error: 3.9785024171725683
best_error: 3.9785024166817835
best_error: 3.978502415174351
best_error: 3.978502415174233
best_error: 3.978502414683443
best_error: 3.97850241333304
best_error: 3.97850241333292
best_error: 3.9785024128421327
best_error: 3.978502412364423
best_error: 3.9785024123643034
best_error: 3.978502411873517
best_error: 3.978502411474671
best_error: 3.9785024114745475
best_error: 3.9785024109837654
best_error: 3.9785024105009112
best_error: 3.978502410060264
best_error: 3.9785024098044106
best_error: 3.9785024096099932
