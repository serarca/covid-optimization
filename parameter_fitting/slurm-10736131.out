ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.032878903931326
best_error: 11.032878885551593
best_error: 10.989575037436225
best_error: 10.98957501441365
best_error: 6.52445522429835
best_error: 6.524454770098451
best_error: 5.811370349839372
best_error: 5.81137014751757
best_error: 5.73538910769068
best_error: 5.735388928473647
best_error: 5.719753848672486
best_error: 5.719753848669685
best_error: 5.719753835212506
best_error: 5.719700924435532
best_error: 5.719700865854304
best_error: 5.71965645954621
best_error: 5.719656459543406
best_error: 5.719656446086847
best_error: 5.719643719476155
best_error: 5.719643661028569
best_error: 5.719632121998087
best_error: 5.71963212199528
best_error: 5.719632108538869
best_error: 5.719629468430768
best_error: 5.719629409981964
best_error: 5.719430994423459
best_error: 5.719430994420652
best_error: 5.719430980947491
best_error: 5.718022815756909
best_error: 5.718022815754098
best_error: 5.71802280218488
best_error: 5.712314891321325
best_error: 5.712314891318497
best_error: 5.71231487740924
best_error: 5.688359130071649
best_error: 5.688359130068792
best_error: 5.688359114985557
best_error: 5.591522537662628
best_error: 5.591522537660337
best_error: 5.591522531411079
best_error: 5.4758371191049635
best_error: 5.47583711910251
best_error: 5.475837112040326
best_error: 5.458023516081925
best_error: 5.458023516080371
best_error: 5.456427739241656
best_error: 5.456427739239946
best_error: 5.453036788832174
best_error: 5.453036788830508
best_error: 5.440043168375256
best_error: 5.440043168373651
best_error: 5.239810823254129
best_error: 5.239810823253032
best_error: 5.115669173905767
best_error: 5.115669173905358
best_error: 5.028245637880761
best_error: 5.028245637878633
best_error: 5.028245624508651
best_error: 5.00436007163866
best_error: 5.004360071637139
best_error: 5.002793916691212
best_error: 5.002793916689955
best_error: 5.00279391497853
best_error: 5.002026916513853
best_error: 5.002026916512519
best_error: 5.002026914705015
best_error: 5.000901119956048
best_error: 5.000901119954671
best_error: 5.000901118823163
best_error: 5.000901118026426
best_error: 5.000116038698236
best_error: 5.000116038696807
best_error: 5.00011603593059
best_error: 4.9994406987324975
best_error: 4.999440698731052
best_error: 4.999440695133357
best_error: 4.999377307725363
best_error: 4.999377307724083
best_error: 4.999300106771194
best_error: 4.999300106769731
best_error: 4.999300102739026
best_error: 4.999206114228988
best_error: 4.999206114227521
best_error: 4.999206109944114
best_error: 4.999166242981966
best_error: 4.9991662429804915
best_error: 4.999166238699213
best_error: 4.999141686275978
best_error: 4.999141686274507
best_error: 4.999141681994529
best_error: 4.999140921101002
best_error: 4.999140921099523
best_error: 4.999140916819579
best_error: 4.999140834684823
best_error: 4.999140834683544
best_error: 4.999140741388672
best_error: 4.999140741387198
best_error: 4.999140737107268
best_error: 4.999140620267715
best_error: 4.999140620266236
best_error: 4.9991406159863025
best_error: 4.999140597422935
best_error: 4.999140597421474
best_error: 4.999140593141542
best_error: 4.9984627796384355
best_error: 4.998462779637086
best_error: 4.998197791682357
best_error: 4.9981977916809655
best_error: 4.997684464490272
best_error: 4.997684464488785
best_error: 4.997446344121117
best_error: 4.997446344119572
best_error: 4.9973104576205785
best_error: 4.997310457618968
best_error: 4.996931581943794
best_error: 4.996931581942168
best_error: 4.9967890897401706
best_error: 4.996789089738546
best_error: 4.996586069947005
best_error: 4.996586069945375
best_error: 4.99653290441581
best_error: 4.996532904414169
best_error: 4.9964899612623155
best_error: 4.996489961260676
best_error: 4.996462338321254
best_error: 4.996462338319606
best_error: 4.996461101266093
best_error: 4.996461101264233
best_error: 4.996461084595547
best_error: 4.996458385459027
best_error: 4.996458385457393
best_error: 4.99644623573978
best_error: 4.996446235738145
best_error: 4.996444952007786
best_error: 4.996444952006157
best_error: 4.996443839243087
best_error: 4.996443839241458
best_error: 4.996442961273543
best_error: 4.996442961271904
best_error: 4.996442465073335
best_error: 4.9964424650717065
best_error: 4.996442384045632
best_error: 4.9964423840437835
best_error: 4.996442367374344
best_error: 4.996424275433497
best_error: 4.996424275431869
best_error: 4.996411260716636
best_error: 4.996411260715016
best_error: 4.953273471267627
best_error: 4.953273471266419
best_error: 4.949111358238513
best_error: 4.949111358237841
best_error: 4.947992321656804
best_error: 4.947992321655964
best_error: 4.947889599007336
best_error: 4.94788959900649
best_error: 4.94665299354658
best_error: 4.946652993545754
best_error: 4.946331869207472
best_error: 4.946331869206446
best_error: 4.939441094786557
best_error: 4.939441094785518
best_error: 4.9311557580238325
best_error: 4.9311557580229435
best_error: 4.917112863742448
best_error: 4.917112863741512
best_error: 4.876316742447141
best_error: 4.876316742445814
best_error: 4.771685022561394
best_error: 4.771685022559652
best_error: 4.690082357479391
best_error: 4.690082324639581
best_error: 4.656464493293049
best_error: 4.65646445593523
best_error: 4.652920516134982
best_error: 4.652920516130956
best_error: 4.652920513064378
best_error: 4.64733986126505
best_error: 4.647339861261323
best_error: 4.646577621160114
best_error: 4.646577621156402
best_error: 4.646376281998818
best_error: 4.646376281995393
best_error: 4.646306139536771
best_error: 4.646306139533391
best_error: 4.6462855657302535
best_error: 4.646285565726863
best_error: 4.646283962643665
best_error: 4.646283962640293
best_error: 4.646283952233257
best_error: 4.646283577316305
best_error: 4.646283577312931
best_error: 4.646283567606344
best_error: 4.646283567603219
best_error: 4.64628356085224
best_error: 4.6462835475493245
