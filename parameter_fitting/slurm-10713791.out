ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.349733409311272
best_error: 12.349733375990372
best_error: 12.349733355424364
best_error: 12.193720777698406
best_error: 12.19372073531142
best_error: 12.193720712610597
best_error: 10.876666450604453
best_error: 10.87666631641319
best_error: 10.876666288797548
best_error: 9.324969231047998
best_error: 9.324969009497886
best_error: 8.811699981632094
best_error: 8.811699764446757
best_error: 8.7805546715928
best_error: 8.78055445337193
best_error: 8.226071836743428
best_error: 8.226071701172854
best_error: 7.598261431542797
best_error: 7.59826130240903
best_error: 7.330335468941017
best_error: 7.330335356641578
best_error: 7.330335343103473
best_error: 7.159260961472016
best_error: 7.159260851530086
best_error: 7.159260832228233
best_error: 7.043231255076751
best_error: 7.043231151834679
best_error: 7.0432311224406075
best_error: 6.9696811670263505
best_error: 6.96968106464386
best_error: 6.9696810322134635
best_error: 6.939307099098208
best_error: 6.939306994691721
best_error: 6.939306963691701
best_error: 6.919806985296001
best_error: 6.91980687893445
best_error: 6.919806849582524
best_error: 6.898879865435967
best_error: 6.898879589764048
best_error: 5.5791932573981295
best_error: 5.579192580054845
best_error: 4.747688845611158
best_error: 4.7476884029293505
best_error: 4.407418148731602
best_error: 4.407417770900496
best_error: 4.376981705455329
best_error: 4.376981335958572
best_error: 4.367524456666025
best_error: 4.367524087509703
best_error: 4.36381106647865
best_error: 4.363810699332205
best_error: 4.36221157845128
best_error: 4.362211211122759
best_error: 4.360965333540526
best_error: 4.360964966068267
best_error: 4.360754969721031
best_error: 4.360754602906045
best_error: 4.360661562286984
best_error: 4.360661195461237
best_error: 4.360612751475542
best_error: 4.3606123846441385
best_error: 4.360584534839896
best_error: 4.360584168005234
best_error: 4.360575062874652
best_error: 4.360574824300128
best_error: 4.360569918590851
best_error: 4.360569551754478
best_error: 4.360569273385032
best_error: 4.360569233315087
best_error: 4.360569225180882
best_error: 4.36056914996143
best_error: 4.360569109891519
best_error: 4.360569101757272
best_error: 4.360569077984712
best_error: 4.36056907798082
best_error: 4.360569029780556
best_error: 4.360569029531012
best_error: 4.360569029527117
best_error: 4.360569025023757
best_error: 4.360569025019858
best_error: 4.3438718524357505
best_error: 4.343871453356484
best_error: 4.3101049768628075
best_error: 4.310104577430252
best_error: 4.256559152443472
best_error: 4.256558760950934
best_error: 4.244083977402823
best_error: 4.244083587393665
best_error: 4.235017639388545
best_error: 4.235017249805928
best_error: 4.234283261726108
best_error: 4.234282872085977
best_error: 4.233841614170149
best_error: 4.233841224495455
best_error: 4.233678584887931
best_error: 4.233678358515006
best_error: 4.221399471275937
best_error: 4.221399079275532
best_error: 4.165346878249341
best_error: 4.165346477313744
best_error: 4.083863741237421
best_error: 4.083863541140578
best_error: 4.073247438149092
best_error: 4.073247233936517
best_error: 4.021063649657739
best_error: 4.021063445405134
best_error: 3.987603524965939
best_error: 3.9876031041217135
best_error: 3.6433399172226415
best_error: 3.643339519380773
best_error: 3.5164407477562247
best_error: 3.516440409355863
best_error: 3.48396940091858
best_error: 3.4839690890220383
best_error: 3.3409094182561945
best_error: 3.34090910776711
best_error: 3.2855728001741937
best_error: 3.285572505989263
best_error: 3.256571876503556
best_error: 3.25657159191629
best_error: 3.0896760667466356
best_error: 3.089675753218935
best_error: 3.077917942891552
best_error: 3.077917942890844
best_error: 3.073472633092863
best_error: 3.073472633092118
best_error: 3.057028360267219
best_error: 3.0570280440729745
best_error: 2.996661588195587
best_error: 2.9966612684526837
best_error: 2.989632515107367
best_error: 2.9896321952155906
best_error: 2.9887556120975964
best_error: 2.988755612096833
best_error: 2.988634094840253
best_error: 2.988633774926768
best_error: 2.988134830492009
best_error: 2.988134830491233
best_error: 2.9484806238007355
best_error: 2.948480284036035
best_error: 2.9178965458340853
best_error: 2.9178965458333
best_error: 2.9056411092900665
best_error: 2.9056407727009415
best_error: 2.816651056596709
best_error: 2.8166507110245167
best_error: 2.8124178547554415
best_error: 2.8124178547546688
best_error: 2.7523055896626625
best_error: 2.7523055896619155
best_error: 2.743994542960161
best_error: 2.743994542959414
best_error: 2.7165605292256227
best_error: 2.7165605292248856
best_error: 2.6345965804443385
best_error: 2.6345965804435396
best_error: 2.5608500355231607
best_error: 2.5608495715380255
best_error: 2.5574784053429918
best_error: 2.5574779412268347
best_error: 2.5571199740543102
best_error: 2.557119509924267
best_error: 2.5571077973919962
best_error: 2.557107797391141
best_error: 2.5571076285313676
best_error: 2.557072889395582
best_error: 2.5570724252653667
best_error: 2.557069416498562
best_error: 2.557069416497751
best_error: 2.5570692476389634
best_error: 2.5570636409130523
best_error: 2.5570631767844603
best_error: 2.557056018471579
best_error: 2.557056018470766
best_error: 2.5570558496123716
best_error: 2.5570509931152308
best_error: 2.5570505289878023
best_error: 2.5570465007021195
best_error: 2.5570465007012744
best_error: 2.5570463318431726
best_error: 2.5570433544777593
best_error: 2.5570431005047736
best_error: 2.5545629874163556
best_error: 2.5545629874155034
best_error: 2.55456281869244
best_error: 2.553913318614258
best_error: 2.5539128613952213
