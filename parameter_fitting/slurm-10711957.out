ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.332660712752801
best_error: 10.332660409087836
best_error: 7.868778134346891
best_error: 7.868777787213764
best_error: 7.5811957015018026
best_error: 7.581195431391368
best_error: 6.733070210231291
best_error: 6.733069983700099
best_error: 6.484238809204984
best_error: 6.484238591595581
best_error: 6.405125605267168
best_error: 6.405125388568607
best_error: 6.373368185660645
best_error: 6.373367964630043
best_error: 6.369421475872679
best_error: 6.369421254306391
best_error: 6.366976086030395
best_error: 6.36697586413249
best_error: 6.3656073373181155
best_error: 6.365607115234705
best_error: 6.364714413142698
best_error: 6.364714190938296
best_error: 6.364015494249479
best_error: 6.364015271950411
best_error: 6.363819132231908
best_error: 6.363818909906239
best_error: 6.3637019385823175
best_error: 6.363701716240778
best_error: 6.363634577363363
best_error: 6.363634355012701
best_error: 6.363592182728048
best_error: 6.363591960371638
best_error: 6.3635689550816625
best_error: 6.363568732722115
best_error: 6.363553493915209
best_error: 6.363553271553568
best_error: 6.363543039320053
best_error: 6.36354281695699
best_error: 6.36353484791012
best_error: 6.363534625545943
best_error: 6.363534439068373
best_error: 6.363534216704155
best_error: 6.363534155241243
best_error: 6.363534093752856
best_error: 6.363534051188868
best_error: 6.1292979369247185
best_error: 6.129297689384032
best_error: 5.860002894047262
best_error: 5.860002477834652
best_error: 5.826126037209576
best_error: 5.826125670592295
best_error: 5.798053441413577
best_error: 5.798053095343626
best_error: 5.585514891052422
best_error: 5.585514566295721
best_error: 5.57930815105531
best_error: 5.579307825368029
best_error: 5.577001296274462
best_error: 5.57700097022663
best_error: 5.575169681626379
best_error: 5.575169355239158
best_error: 5.574317903074733
best_error: 5.574317577894297
best_error: 5.573362375919738
best_error: 5.573362051101886
best_error: 5.572712083938096
best_error: 5.572711759002296
best_error: 5.572566719821212
best_error: 5.572566394859056
best_error: 5.572497661983313
best_error: 5.572497337008649
best_error: 5.572434707936564
best_error: 5.572434382950462
best_error: 5.572409066371788
best_error: 5.572408741381057
best_error: 5.572392837568838
best_error: 5.572392512575167
best_error: 5.572380819236971
best_error: 5.572380494241102
best_error: 5.572374068144384
best_error: 5.57237374314729
best_error: 5.572368300786689
best_error: 5.5723679757885645
best_error: 5.572365669290374
best_error: 5.572365344291767
best_error: 5.572363217966538
best_error: 5.572362892967491
best_error: 5.5723622658575405
best_error: 5.572361940858317
best_error: 5.572361674012635
best_error: 5.572361349013306
best_error: 5.572361278436043
best_error: 5.572360953436631
best_error: 5.572360663194505
best_error: 5.57236049720545
best_error: 5.572360491504288
best_error: 5.572360405237877
best_error: 5.572345973800429
best_error: 5.572345648799501
best_error: 5.572287905613226
best_error: 5.572287580606789
best_error: 5.572055726070058
best_error: 5.572055401041558
best_error: 5.571149624048007
best_error: 5.571149298390713
best_error: 5.567621765272784
best_error: 5.56762143783817
best_error: 5.554062219307275
best_error: 5.554061890058673
best_error: 5.486832361689371
best_error: 5.486831965157286
best_error: 5.481877936187631
best_error: 5.481877549846701
best_error: 5.460953548049279
best_error: 5.460953171771008
best_error: 5.422745289521762
best_error: 5.422744937213334
best_error: 5.395815306933892
best_error: 5.395814951191511
best_error: 5.32132602277688
best_error: 5.321325638118583
best_error: 5.301398907850089
best_error: 5.301398519585584
best_error: 5.273083373105042
best_error: 5.273083149186701
best_error: 5.255195388280862
best_error: 5.255194996946488
best_error: 5.251359399219392
best_error: 5.2513590078547505
best_error: 5.2501622429865975
best_error: 5.250161851444987
best_error: 5.249539175710993
best_error: 5.249538784077303
best_error: 5.249166326752148
best_error: 5.249165935063361
best_error: 5.248965756466678
best_error: 5.24896536474826
best_error: 5.248834719862276
best_error: 5.248834328124495
best_error: 5.248769301629682
best_error: 5.248768909882241
best_error: 5.2487228766412475
best_error: 5.248722484886956
best_error: 5.24870165298554
best_error: 5.248701261228092
best_error: 5.24868532934096
best_error: 5.248684937581112
best_error: 5.248683802730785
best_error: 5.248683410970706
best_error: 5.248683304255744
best_error: 5.248683102051564
best_error: 5.248682964308015
best_error: 5.248682958113335
best_error: 5.248682917722796
best_error: 5.248682906942022
best_error: 5.238512673866987
best_error: 5.238512279848648
best_error: 5.23549324708236
best_error: 5.235492845899102
best_error: 5.225004868545478
best_error: 5.225004468277337
best_error: 5.219630308720834
best_error: 5.2196299077907895
best_error: 5.216592965437478
best_error: 5.216592564914006
best_error: 5.214882304453251
best_error: 5.214881903700256
best_error: 5.213911396332531
best_error: 5.2139109954493446
best_error: 5.213359571592058
best_error: 5.21335917063491
best_error: 5.213046655747694
best_error: 5.2130462547486065
best_error: 5.212870821162989
best_error: 5.21287042062111
best_error: 5.212794502400067
best_error: 5.212794101851865
best_error: 5.212790510814874
best_error: 5.2127902892188835
best_error: 5.212786105332473
best_error: 5.212785704783563
best_error: 5.212764420328201
best_error: 5.212764019777495
best_error: 5.21275064650953
best_error: 5.212750245956942
best_error: 5.138293130151107
best_error: 5.138292918095614
best_error: 4.940597894463219
best_error: 4.940597702887832
best_error: 4.921981184475364
best_error: 4.921981008024476
best_error: 4.921065896242634
best_error: 4.9210657110078335
best_error: 4.920659653994314
best_error: 4.920659470421594
best_error: 4.874766398518899
best_error: 4.874766236598596
best_error: 4.85682580493383
best_error: 4.8568256571243165
best_error: 4.84706294413809
best_error: 4.847062781498895
best_error: 4.843145506534273
best_error: 4.843145347333259
best_error: 4.841450921014357
best_error: 4.841450763517194
best_error: 4.840949839613222
best_error: 4.840949683904259
best_error: 4.840668837132819
best_error: 4.840668681663656
best_error: 4.8404365174648065
best_error: 4.840435902573654
best_error: 4.781238646872066
best_error: 4.781238496388674
best_error: 4.752996314617096
best_error: 4.752995670374636
best_error: 4.732427652931358
best_error: 4.732427496382259
best_error: 4.732379706135014
best_error: 4.732379068787525
best_error: 4.717178922118566
best_error: 4.717178744979035
best_error: 4.715594568851262
best_error: 4.715593970232667
