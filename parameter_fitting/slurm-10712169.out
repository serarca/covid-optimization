ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.40039204900061
best_error: 9.400392002210019
best_error: 9.106275193579078
best_error: 9.106275139790405
best_error: 8.075487235726369
best_error: 8.075487118508423
best_error: 7.906392011267411
best_error: 7.906391892295149
best_error: 7.770243594220405
best_error: 7.770243531702667
best_error: 7.7702434981628565
best_error: 6.837744358937833
best_error: 6.837744294773837
best_error: 6.83774427506957
best_error: 5.64921173816494
best_error: 5.649211673831207
best_error: 5.649211667787973
best_error: 5.242558271097685
best_error: 5.242558207698453
best_error: 5.24255820303835
best_error: 5.080303396425312
best_error: 5.080303335822311
best_error: 5.080303330587988
best_error: 4.921875463573421
best_error: 4.921875395246058
best_error: 4.894219078992512
best_error: 4.894219077764296
best_error: 4.887426743584273
best_error: 4.8874266738794745
best_error: 4.8670547943431846
best_error: 4.867054724168053
best_error: 4.864775456438958
best_error: 4.864775386115587
best_error: 4.864321197032
best_error: 4.864321195806825
best_error: 4.864305556885551
best_error: 4.864305486531608
best_error: 4.863979688587581
best_error: 4.863979618212467
best_error: 4.863956930487635
best_error: 4.863956860111029
best_error: 4.863954405972793
best_error: 4.863954335596024
best_error: 4.8639539608208775
best_error: 4.863953895110705
best_error: 3.372783858760434
best_error: 3.3727838577587232
best_error: 2.880216120155533
best_error: 2.8802157732729468
best_error: 2.879108375639494
best_error: 2.8791083747108184
best_error: 2.8388299630305385
best_error: 2.8388296322511337
best_error: 2.8369287575769646
best_error: 2.8369287566718997
best_error: 2.7594364582940756
best_error: 2.759436133549379
best_error: 2.73704057356406
best_error: 2.73704025854121
best_error: 2.540276721532808
best_error: 2.5402762637187415
best_error: 2.444393806029528
best_error: 2.444393370775324
best_error: 2.3789198020300613
best_error: 2.378919386648242
best_error: 2.374258323101599
best_error: 2.3742579108500355
best_error: 2.37179459693835
best_error: 2.371794186201858
best_error: 2.3710295810535458
best_error: 2.3710295800795773
best_error: 2.3710295020719707
best_error: 2.370945596775714
best_error: 2.370945185913119
best_error: 2.3694732530328406
best_error: 2.3694728419516777
best_error: 2.36933109707487
best_error: 2.369330685972621
best_error: 2.3692403283491332
best_error: 2.3692399172334087
best_error: 2.3691936724834646
best_error: 2.369193261360822
best_error: 2.369161399647516
best_error: 2.3691609885200773
best_error: 2.3691429975669305
best_error: 2.3691425864367774
best_error: 2.369129623614918
best_error: 2.369129622641032
best_error: 2.3691295446547294
best_error: 2.3691293884539837
best_error: 2.3691289773218456
best_error: 2.336807478905169
best_error: 2.3368071306631872
best_error: 2.289169906814805
best_error: 2.2891695234506946
best_error: 2.270379558548451
best_error: 2.2703791786447196
best_error: 2.269513432459769
best_error: 2.269513044319962
best_error: 2.269241701779656
best_error: 2.269241317957414
best_error: 2.2691742511071613
best_error: 2.2691738659963545
best_error: 2.2688491260425807
best_error: 2.2688487398211676
best_error: 2.2669277200666187
best_error: 2.266927335068443
best_error: 2.256266915309863
best_error: 2.2562665587261383
best_error: 2.2140954281232066
best_error: 2.214095426841346
best_error: 2.2140953518652653
best_error: 2.1928208693965434
best_error: 2.192820531340282
best_error: 2.1856164650790664
best_error: 2.185616126325282
best_error: 2.183779350056999
best_error: 2.183779011089036
best_error: 2.1830202365037725
best_error: 2.183019897448147
best_error: 2.182857281000925
best_error: 2.1828569419360853
best_error: 2.1827569389129033
best_error: 2.1827565998423912
best_error: 2.1826945248017147
best_error: 2.182694185727681
best_error: 2.1826551789836968
best_error: 2.1826548399074386
best_error: 2.18262995319835
best_error: 2.1826296141206716
best_error: 2.182613477753687
best_error: 2.1826131386750927
best_error: 2.1826025916989646
best_error: 2.1826022526197546
best_error: 2.18258791651089
best_error: 2.1825875774306938
best_error: 2.182584600189461
best_error: 2.1825842611090396
best_error: 2.1825837219731836
best_error: 2.182583382892706
best_error: 2.182583156063405
best_error: 2.1825831212278253
best_error: 2.1815463039812015
best_error: 2.181545961776715
best_error: 2.1785191830188406
best_error: 2.178518817600632
best_error: 2.1763548723414545
best_error: 2.176354518337644
best_error: 2.17633115631306
best_error: 2.1763308022833083
best_error: 2.176324718388252
best_error: 2.1763243640257306
best_error: 2.176218003950686
best_error: 2.1762176462826215
best_error: 2.1761169676385945
best_error: 2.1761166105193226
best_error: 2.175800591462413
best_error: 2.175800234757228
best_error: 2.1747401078793027
best_error: 2.1747397529388475
best_error: 2.1744472162207744
best_error: 2.1744468612567447
best_error: 2.1736548838747716
best_error: 2.1736545312115365
best_error: 2.173494314669946
best_error: 2.173493961979846
best_error: 2.1732867346991416
best_error: 2.173286381976
best_error: 2.1731449615528593
best_error: 2.1731446088063895
best_error: 2.1716584408084048
best_error: 2.1716580879394627
best_error: 2.1711650255563386
best_error: 2.1711646726468015
best_error: 2.17084837826398
best_error: 2.170848025328408
best_error: 2.170709795228698
best_error: 2.170709442281749
best_error: 2.1706346921471638
best_error: 2.1706346918382615
best_error: 2.1706346151794995
best_error: 2.165827490755368
best_error: 2.1658274895322966
best_error: 2.1658274137689415
best_error: 2.1641956252534302
best_error: 2.1641952686885646
best_error: 2.1571117916456144
best_error: 2.157111430950856
best_error: 2.1561516835605037
best_error: 2.1561516813107318
best_error: 2.1561516066450555
best_error: 2.154542019232553
best_error: 2.1545416558817023
best_error: 2.153872572022831
best_error: 2.1538725689334393
best_error: 2.1538724951245567
