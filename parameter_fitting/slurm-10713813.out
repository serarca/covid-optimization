ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.854345093869368
best_error: 11.854345067924498
best_error: 11.854345037619147
best_error: 11.712373214404803
best_error: 11.712373182266756
best_error: 11.712373147551595
best_error: 10.541951348577093
best_error: 10.541951256039525
best_error: 10.541951203249127
best_error: 9.486039530601982
best_error: 9.486039393600102
best_error: 9.232224372451967
best_error: 9.232224228246013
best_error: 9.20056461939831
best_error: 9.200564475939291
best_error: 8.63919570992574
best_error: 8.639195534309337
best_error: 8.187130505402429
best_error: 8.187130388936819
best_error: 8.01911170915129
best_error: 8.019111604241141
best_error: 7.852615677594071
best_error: 7.8526155840192065
best_error: 7.852615565979152
best_error: 7.589378395801804
best_error: 7.589378303978077
best_error: 7.589378275748605
best_error: 7.380043490948203
best_error: 7.380043410211529
best_error: 7.380043363036743
best_error: 7.361701781260859
best_error: 7.361701571843701
best_error: 7.273154967913164
best_error: 7.273154897347277
best_error: 7.273154835052338
best_error: 6.998797752943768
best_error: 6.998797694055643
best_error: 6.998797607629091
best_error: 6.897364187103154
best_error: 6.897364124615694
best_error: 6.897364041569043
best_error: 6.843167701530296
best_error: 6.843167636037521
best_error: 6.843167555942371
best_error: 6.822116556748721
best_error: 6.822116490704173
best_error: 6.822116410965392
best_error: 6.821486998257111
best_error: 6.821486932167612
best_error: 6.821486852471272
best_error: 6.821419749631868
best_error: 6.821419683537567
best_error: 6.821419603845772
best_error: 6.821396495429475
best_error: 6.8213962870007805
best_error: 4.611929622935955
best_error: 4.611929205120326
best_error: 4.5154728435913025
best_error: 4.5154724978107845
best_error: 4.507274733597996
best_error: 4.507274416723011
best_error: 4.496393072229243
best_error: 4.496392758252351
best_error: 4.457953713510699
best_error: 4.457953406678768
best_error: 4.388284282628933
best_error: 4.388283985149739
best_error: 4.297187691519193
best_error: 4.297187377626048
best_error: 3.9397904857216197
best_error: 3.9397900493642615
best_error: 3.3968876646061226
best_error: 3.3968871305339965
best_error: 3.2553375635745834
best_error: 3.2553371130789674
best_error: 3.245580610870715
best_error: 3.245580489148791
best_error: 3.245580425105285
best_error: 3.2419499873463025
best_error: 3.2419495588579883
best_error: 3.241521753539529
best_error: 3.241521324786168
best_error: 3.2411967218121527
best_error: 3.2411962928569293
best_error: 3.2409039471941576
best_error: 3.2409035180565096
best_error: 3.240511927571407
best_error: 3.2405114981886216
best_error: 3.2395670936571728
best_error: 3.2395666641903555
best_error: 3.2383256415165746
best_error: 3.2383252136089444
best_error: 3.238317686118531
best_error: 3.2383172582055573
best_error: 3.2383117017627123
best_error: 3.23831127384572
best_error: 3.238306611938235
best_error: 3.238306184017819
best_error: 3.238300552417389
best_error: 3.2383001244928966
best_error: 3.238286030777834
best_error: 3.2382856028435842
best_error: 3.2382804328028723
best_error: 3.238280312986099
best_error: 3.238280246706309
best_error: 3.2382628255624115
best_error: 3.2382623976125706
best_error: 3.2382566010032305
best_error: 3.238256173049212
best_error: 3.2382476552879664
best_error: 3.238247227332562
best_error: 3.2382451853501273
best_error: 3.2382447573943334
best_error: 3.2382436711508866
best_error: 3.238243243194843
best_error: 3.238242941373664
best_error: 3.2382425134175294
best_error: 3.2382421105199573
best_error: 3.2033499523579687
best_error: 3.203349521110999
best_error: 3.2016709701990727
best_error: 3.201670542086175
best_error: 3.192227425779562
best_error: 3.1922270162006727
best_error: 3.1539041152331686
best_error: 3.1539037199020314
best_error: 3.127580696720967
best_error: 3.1275803078120568
best_error: 3.1027708015238504
best_error: 3.1027703989212836
best_error: 3.0891541153712505
best_error: 3.0891536987135293
best_error: 3.0837068771869625
best_error: 3.083706458779906
best_error: 3.0811336932126654
best_error: 3.0811332731820853
best_error: 3.080783730778862
best_error: 3.080783299009381
best_error: 2.468895056042873
best_error: 2.468894559676307
best_error: 2.3504864494519815
best_error: 2.3504864494517017
best_error: 2.3504862673892495
best_error: 2.1123534264401163
best_error: 2.1123529636296214
best_error: 1.898397180179026
best_error: 1.8983967290317951
best_error: 1.7235767207955932
best_error: 1.723576720795229
best_error: 1.7209957975902663
best_error: 1.7209953378425777
best_error: 1.7039917203736015
best_error: 1.7039912681114617
best_error: 1.6986663272969214
best_error: 1.6986663272965532
best_error: 1.6986661492802033
best_error: 1.6947217769436436
best_error: 1.6947213216474175
best_error: 1.6885465950054581
best_error: 1.6885461352875029
best_error: 1.6742131260455424
best_error: 1.6742131260452071
best_error: 1.6742129470235683
best_error: 1.6630251021831577
best_error: 1.663024624774146
best_error: 1.6580083429787553
best_error: 1.6580083429784427
best_error: 1.658008162226581
best_error: 1.6568304538496235
best_error: 1.6568304538493088
best_error: 1.6568302729759137
best_error: 1.6546513124853854
best_error: 1.6546508176877244
best_error: 1.6529694966824287
best_error: 1.6529694966821051
best_error: 1.6529693158935586
best_error: 1.647857794908405
best_error: 1.647857315271139
best_error: 1.6410082752287072
best_error: 1.6410082752283786
best_error: 1.6410080944789809
best_error: 1.638915411073743
best_error: 1.6389154110734054
best_error: 1.6389152305855947
best_error: 1.637539334582149
best_error: 1.637539334581805
best_error: 1.637539154276512
best_error: 1.6372285729379108
best_error: 1.6372285729375533
best_error: 1.6372283926816706
best_error: 1.637053241917054
best_error: 1.6370527681424571
best_error: 1.6361345183682419
best_error: 1.6361340393327422
