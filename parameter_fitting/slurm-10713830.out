ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.226808435546234
best_error: 11.226808408312639
best_error: 11.226808377749197
best_error: 10.989097785964823
best_error: 10.989097749806122
best_error: 10.989097713609997
best_error: 9.689451905952193
best_error: 9.689451818538982
best_error: 9.176273964413081
best_error: 9.176273860084896
best_error: 9.109908100933827
best_error: 9.10990799320282
best_error: 8.352288669506697
best_error: 8.352288525853123
best_error: 8.179641612152391
best_error: 8.179641458666607
best_error: 8.110624629375671
best_error: 8.110624588848097
best_error: 8.11062451706356
best_error: 7.05098193897412
best_error: 7.050981872976352
best_error: 6.582994483914928
best_error: 6.582994446397201
best_error: 6.58299436078806
best_error: 6.4739306043924305
best_error: 6.473930570098005
best_error: 6.473930479810402
best_error: 6.438227998431771
best_error: 6.438227961796509
best_error: 6.4382278732120835
best_error: 3.6734309543431802
best_error: 3.6734304459064577
best_error: 3.574952502674209
best_error: 3.5749519992380874
best_error: 3.567058336928712
best_error: 3.567057832800546
best_error: 3.5656132652767343
best_error: 3.5656127610210824
best_error: 3.5654630181296723
best_error: 3.565462513860767
best_error: 3.5654496417597823
best_error: 3.5654495514604
best_error: 3.5654470607078723
best_error: 3.565446844612907
best_error: 3.565446806928544
best_error: 3.5638782897612233
best_error: 3.5638777854773274
best_error: 3.5574656770773494
best_error: 3.557465588059172
best_error: 3.529811467711598
best_error: 3.5298113837513796
best_error: 3.3746847651472605
best_error: 3.374684685057648
best_error: 2.620597045771016
best_error: 2.620596648068333
best_error: 2.6146546157274724
best_error: 2.6146542368927337
best_error: 2.613135661860488
best_error: 2.6131352785478867
best_error: 2.612942416513169
best_error: 2.6129420335604534
best_error: 2.6124048066455288
best_error: 2.6124044236292088
best_error: 2.609652676262487
best_error: 2.6096522927547934
best_error: 2.605326547615677
best_error: 2.605326166394985
best_error: 2.604706041167969
best_error: 2.6047056612395405
best_error: 2.6040928920416846
best_error: 2.60409250575674
best_error: 2.603279728171804
best_error: 2.603279343567606
best_error: 2.602897478686528
best_error: 2.6028970932680195
best_error: 2.3299569226238024
best_error: 2.32995656655096
best_error: 2.189300654958949
best_error: 2.1893003057060163
best_error: 2.112068069229756
best_error: 2.112067722755211
best_error: 2.061849569234041
best_error: 2.0618492251056137
best_error: 2.0392875841412916
best_error: 2.0392872420942263
best_error: 2.0272109513253502
best_error: 2.0272106079731858
best_error: 2.024753660949808
best_error: 2.024753317300539
best_error: 2.023757131837507
best_error: 2.0237567880678347
best_error: 2.0231011763288036
best_error: 2.023100832479894
best_error: 2.022798275341865
best_error: 2.0227979314563758
best_error: 2.022575764100099
best_error: 2.02257542018774
best_error: 2.022547862453278
best_error: 2.0225478624509083
best_error: 1.8556119367205883
best_error: 1.8556116640146574
best_error: 1.8142223730397595
best_error: 1.8142220789994299
best_error: 1.79320945913017
best_error: 1.7932091652596829
best_error: 1.7698384102107165
best_error: 1.7698380982514919
best_error: 1.7593828948910408
best_error: 1.7593825726839762
best_error: 1.7543677270625764
best_error: 1.754367402283433
best_error: 1.7487793340810258
best_error: 1.7487790086810375
best_error: 1.7466322560913219
best_error: 1.7466319284461078
best_error: 1.7453396148667006
best_error: 1.7453392870870008
best_error: 1.7444547186541788
best_error: 1.7444543906548415
best_error: 1.7439472728645433
best_error: 1.7439469448132987
best_error: 1.7433328633126415
best_error: 1.743332535206197
best_error: 1.7431377375833832
best_error: 1.7431374094594574
best_error: 1.7430907389069215
best_error: 1.743090410778782
best_error: 1.7430628788370703
best_error: 1.7430625507064386
best_error: 1.7430484430606947
best_error: 1.7430481149287607
best_error: 1.7430386057250375
best_error: 1.7430382775922353
best_error: 1.7430344139115568
best_error: 1.7430340857783726
best_error: 1.7430316388736795
best_error: 1.7430313107402482
best_error: 1.7430303460668042
best_error: 1.74303001793327
best_error: 1.743029396468308
best_error: 1.743029068334688
best_error: 1.7430290551790217
best_error: 1.7430290551767464
best_error: 1.7397090180712316
best_error: 1.7397086931619477
best_error: 1.736628792628561
best_error: 1.7366284692379903
best_error: 1.7318655892608215
best_error: 1.7318652810803918
best_error: 1.727244832550761
best_error: 1.7272445332348787
best_error: 1.7262091775238306
best_error: 1.7262088829133517
best_error: 1.7257101782206705
best_error: 1.7257098835378095
best_error: 1.7256032116594306
best_error: 1.7256032116570488
best_error: 1.7255986551538594
best_error: 1.7255983604548972
best_error: 1.7255939693806097
best_error: 1.7255936746809801
best_error: 1.725592994965276
best_error: 1.7255929949628612
best_error: 1.725592763373923
best_error: 1.7255923883775055
best_error: 1.7255923883722772
best_error: 1.7255923799002597
best_error: 1.725592366355291
best_error: 1.7255923663529018
best_error: 1.7255922932596803
best_error: 1.7255921378016212
