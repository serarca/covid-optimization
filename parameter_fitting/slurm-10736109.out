ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.491741169291657
best_error: 11.491741163256467
best_error: 11.245219966653767
best_error: 11.245219930685035
best_error: 8.673352089563469
best_error: 8.673351714103951
best_error: 7.1814552709684545
best_error: 7.181454963603024
best_error: 6.896764437230125
best_error: 6.896764437230102
best_error: 6.861003468205061
best_error: 6.861003384237435
best_error: 6.85868243044307
best_error: 6.858682430442913
best_error: 6.858682426883766
best_error: 6.857142840698816
best_error: 6.857142840698662
best_error: 6.8571428371053385
best_error: 6.856312408226263
best_error: 6.856312408226114
best_error: 6.85631240457476
best_error: 6.855884225567995
best_error: 6.85588422556784
best_error: 6.855884221911728
best_error: 6.855655262150205
best_error: 6.855655262150053
best_error: 6.85565525845401
best_error: 6.855532218921354
best_error: 6.855532218921209
best_error: 6.8555322152255656
best_error: 6.855465103308863
best_error: 6.85546510330871
best_error: 6.855465099613275
best_error: 6.8554284731130775
best_error: 6.855428473112933
best_error: 6.8554284694176175
best_error: 6.855414319271139
best_error: 6.855414319270986
best_error: 6.855414315569232
best_error: 6.855406796402638
best_error: 6.855406796402486
best_error: 6.855406792700741
best_error: 6.855402777201843
best_error: 6.855402777201687
best_error: 6.8554027734999465
best_error: 6.855400635005855
best_error: 6.855400635005708
best_error: 6.855400631303974
best_error: 6.8553994992002005
best_error: 6.855399499200052
best_error: 6.855399495498313
best_error: 6.855398902180832
best_error: 6.855398902180679
best_error: 6.855398898478944
best_error: 6.855398864559463
best_error: 6.855398864559315
best_error: 6.8553988608575835
best_error: 6.855398845193436
best_error: 6.855398845193283
best_error: 6.855398841491547
best_error: 6.855398835261933
best_error: 6.855398835261783
best_error: 6.855398831560043
best_error: 6.855343187042896
best_error: 6.8553431870427435
best_error: 6.855343183344526
best_error: 6.8551208719914
best_error: 6.855120871991237
best_error: 6.855120868281206
best_error: 6.854233968967355
best_error: 6.854233968967199
best_error: 6.8542339652507405
best_error: 6.850701833178027
best_error: 6.850701833177874
best_error: 6.850701829327022
best_error: 6.837352515512215
best_error: 6.837352515512063
best_error: 6.837352511538164
best_error: 6.835200394512431
best_error: 6.835200394512398
best_error: 6.8336986404768965
best_error: 6.8336986404768565
best_error: 6.831970893581546
best_error: 6.8319708935814045
best_error: 6.831970889577652
best_error: 6.8276870185218685
best_error: 6.827687018521834
best_error: 6.8156093746448505
best_error: 6.8156093746448105
best_error: 6.790978351151655
best_error: 6.790978351151649
best_error: 6.770697694717599
best_error: 6.770697694717595
best_error: 6.721079838125149
best_error: 6.721079647515467
best_error: 6.708510631122084
best_error: 6.7085106311219365
best_error: 6.708510623077018
best_error: 6.572216211185679
best_error: 6.572216211185534
best_error: 6.572216199411768
best_error: 6.460852817474768
best_error: 6.46085281747474
best_error: 6.332307845020244
best_error: 6.332307809893107
best_error: 6.3323077945075275
best_error: 6.087925997227821
best_error: 6.087925694294541
best_error: 5.832222107032209
best_error: 5.832222107032123
best_error: 5.709894977205422
best_error: 5.7098949772051535
best_error: 5.709894893303824
best_error: 5.709593784609582
best_error: 5.709593784609314
best_error: 5.7095936984187325
best_error: 5.7095852881950595
best_error: 5.709585288194785
best_error: 5.7095852017084425
best_error: 5.709555171630978
best_error: 5.70955517163072
best_error: 5.70955508508672
best_error: 5.7095521642169365
best_error: 5.709552164216677
best_error: 5.709552077673505
best_error: 5.709549610641098
best_error: 5.709549610640821
best_error: 5.709549524098354
best_error: 5.70954666477047
best_error: 5.7095466647702064
best_error: 5.709546578228528
best_error: 5.7095414515322105
best_error: 5.70954145153194
best_error: 5.709541364991689
best_error: 5.709541215392658
best_error: 5.709541113601032
best_error: 5.709541089982713
best_error: 5.709540638020938
best_error: 5.709540638020663
best_error: 5.709540551480634
best_error: 5.70953488300586
best_error: 5.709534883005591
best_error: 5.7095347964671275
best_error: 5.709534433403846
best_error: 5.709534433403587
best_error: 5.709534346865238
best_error: 5.709533622514623
best_error: 5.709533622514352
best_error: 5.709533535976229
best_error: 5.709532785736325
best_error: 5.709532683943818
best_error: 5.709532660325871
best_error: 5.709532618107431
best_error: 5.7095326181071595
best_error: 5.709532531569312
best_error: 5.704980044366283
best_error: 5.704980044366023
best_error: 5.70497996839553
best_error: 5.702357356993019
best_error: 5.702357356992757
best_error: 5.702357278382079
best_error: 5.700504600598377
best_error: 5.70050460059812
best_error: 5.700504517998391
best_error: 5.700445941919323
best_error: 5.700445941919064
best_error: 5.700445859321744
best_error: 5.700411455770232
best_error: 5.700411455769975
best_error: 5.7004113731196036
best_error: 5.700394209876936
best_error: 5.7003942098766665
best_error: 5.700394127227016
best_error: 5.700384290085291
best_error: 5.700384290085024
best_error: 5.700384207435781
best_error: 5.408400288073413
best_error: 5.408400236799207
best_error: 5.408242097324897
best_error: 5.4082420973248935
best_error: 5.408242095558335
best_error: 5.389096334892818
best_error: 5.389096334892729
best_error: 5.389096332751963
best_error: 5.387667769139005
best_error: 5.3876677691389245
best_error: 5.3876677672274385
best_error: 5.385825552109809
best_error: 5.385825552109724
best_error: 5.385825550148196
best_error: 5.385328621547208
best_error: 5.385328621547127
best_error: 5.385328619559177
best_error: 5.384929535808029
best_error: 5.384929535807949
best_error: 5.384929533818677
best_error: 5.384575206129798
best_error: 5.384575206129719
best_error: 5.3845752041339665
best_error: 5.384287591910897
best_error: 5.38428759191081
best_error: 5.384287589912123
best_error: 5.384031857153619
best_error: 5.384031857153543
best_error: 5.384031855151898
best_error: 5.384025138362718
best_error: 5.384025138362645
best_error: 5.384025136361066
best_error: 5.384019443239399
best_error: 5.384019443239316
best_error: 5.384019441237803
best_error: 5.384007570534321
best_error: 5.384007570534237
best_error: 5.3840075685327875
best_error: 5.384006288614
best_error: 5.384006288613923
best_error: 5.384006286612477
best_error: 5.384005443397778
best_error: 5.384005443397703
best_error: 5.38400544139626
best_error: 5.384004364545471
best_error: 5.384004364545392
best_error: 5.3840043625439575
best_error: 5.384003902518088
best_error: 5.384003902518012
best_error: 5.384003900516578
best_error: 5.384003630932583
best_error: 5.384003630932503
best_error: 5.384003628931073
best_error: 5.384003147710295
best_error: 5.384003147710209
best_error: 5.38400314570879
best_error: 5.38400295876097
best_error: 5.384002958760888
best_error: 5.384002956759464
best_error: 5.384002899295838
best_error: 5.384002899295759
best_error: 5.384002897294333
best_error: 5.3840028775481485
best_error: 5.384002877548072
best_error: 5.384002875546644
best_error: 5.38400284506136
best_error: 5.384002837183569
best_error: 5.384002837183482
best_error: 5.384002835182064
best_error: 5.384002828140601
best_error: 5.384002828140514
best_error: 5.3840028261390955
best_error: 5.384002822618048
best_error: 5.38400282261797
best_error: 5.384002820616545
best_error: 5.384002819282311
best_error: 5.384002819282228
best_error: 5.3840028172808045
