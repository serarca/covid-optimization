ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.725321423388099
best_error: 10.725321417143666
best_error: 10.608304519794682
best_error: 10.608304505255331
best_error: 7.297465781268654
best_error: 7.297465382030158
best_error: 6.159015375058789
best_error: 6.159014847130118
best_error: 4.790225484272928
best_error: 4.79022490787594
best_error: 4.555662428663366
best_error: 4.555662275619161
best_error: 4.284105147751298
best_error: 4.2841050134052665
best_error: 4.278282812299821
best_error: 4.2782823025374785
best_error: 4.261209812994201
best_error: 4.261209680353161
best_error: 4.25862920773679
best_error: 4.2586290755158505
best_error: 4.258470467530403
best_error: 4.258470335314609
best_error: 4.258461567076761
best_error: 4.258461058401709
best_error: 4.258460646989632
best_error: 4.2584605147741454
best_error: 4.258305700620018
best_error: 4.258305568410433
best_error: 4.257685762814981
best_error: 4.257685630628787
best_error: 4.255203894181967
best_error: 4.255203761753236
best_error: 4.245294639927673
best_error: 4.245294507282043
best_error: 4.206173398524418
best_error: 4.206173263994522
best_error: 4.0447544736048195
best_error: 4.044754339271955
best_error: 3.8424563414091213
best_error: 3.8424561840548055
best_error: 3.8416234301258565
best_error: 3.841623056082576
best_error: 3.8289175097440094
best_error: 3.8289171366326693
best_error: 3.8156740590949054
best_error: 3.8156736787193886
best_error: 3.808972407116067
best_error: 3.808972024489157
best_error: 3.8064246140877387
best_error: 3.806424231007065
best_error: 3.804780100727447
best_error: 3.804779717354667
best_error: 3.8038898953914777
best_error: 3.8038895118608393
best_error: 3.803286887107192
best_error: 3.8032865046576183
best_error: 3.803124111281439
best_error: 3.8031239551991147
best_error: 3.8030579218515888
best_error: 3.803057539361404
best_error: 3.8026528795323284
best_error: 3.8026524969703486
best_error: 3.802611998477409
best_error: 3.802611615908173
best_error: 3.8025857675926713
best_error: 3.8025853850188076
best_error: 3.8025716671750525
best_error: 3.8025712845986863
best_error: 3.802562084697099
best_error: 3.8025617021190117
best_error: 3.8025566978520873
best_error: 3.802556315273055
best_error: 3.8025525994682536
best_error: 3.802552216888487
best_error: 3.8025508190015733
best_error: 3.8025504364215053
best_error: 3.8025504216400288
best_error: 3.802550213023294
best_error: 3.802549830443601
best_error: 3.8025474401631243
best_error: 3.8025470575831815
best_error: 3.802546921307699
best_error: 3.802546765244096
best_error: 3.802546598018552
best_error: 3.802546511902436
best_error: 3.8025465118474298
best_error: 3.8025465113806947
best_error: 3.8025464823789594
best_error: 3.802531618977034
best_error: 3.8025312363985937
best_error: 3.8025227930543952
best_error: 3.8025226369920433
best_error: 3.8025206838458905
best_error: 3.802520683790885
best_error: 3.8025206833241385
best_error: 3.8025206708334673
best_error: 3.8024942929526535
best_error: 3.80249413689173
best_error: 3.8024941029469237
best_error: 3.802493720368303
best_error: 3.802493694049115
best_error: 3.8024933114707036
best_error: 3.8024918209027487
best_error: 3.802491438324326
best_error: 3.8024847330453593
best_error: 3.8024845769848845
best_error: 3.8024706572435587
best_error: 3.8024705011838797
best_error: 3.8024143433729076
best_error: 3.8024141873162396
best_error: 3.802188917171407
best_error: 3.802188761126803
best_error: 3.8012844742600844
best_error: 3.8012843182640457
best_error: 3.7977025394971315
best_error: 3.7977023823067393
best_error: 3.7841067047242767
best_error: 3.7841065452346
best_error: 3.7307826685865795
best_error: 3.730782502003583
best_error: 3.6915759200260343
best_error: 3.6915756183509223
best_error: 3.6913552586234832
best_error: 3.691354962941354
best_error: 3.6908712646767823
best_error: 3.690870968985958
best_error: 3.688909608251544
best_error: 3.688909311424414
best_error: 3.681047635891928
best_error: 3.681047342771211
best_error: 3.647726811155194
best_error: 3.647726526876661
best_error: 3.503134465735227
best_error: 3.503134191616649
best_error: 3.46046515663258
best_error: 3.4604648817920522
best_error: 3.366388033130237
best_error: 3.3663878566276146
best_error: 3.3662189154217854
best_error: 3.3662186299637655
best_error: 3.346111063286777
best_error: 3.3461107762538065
best_error: 3.3430037576982636
best_error: 3.3430035746690177
best_error: 3.3192180726004494
best_error: 3.31921777090711
best_error: 3.2315326160280615
best_error: 3.2315322984868082
best_error: 3.171612603700294
best_error: 3.1716124300970776
best_error: 3.1403721790058086
best_error: 3.1403718557021207
best_error: 3.1400425220809174
best_error: 3.1400421987298612
best_error: 3.139933349623914
best_error: 3.1399331756142326
best_error: 3.1398862143273574
best_error: 3.139885890953841
best_error: 3.139882322299594
best_error: 3.1398819989255253
best_error: 3.1398801904694054
best_error: 3.139880188620597
best_error: 3.139880135523685
