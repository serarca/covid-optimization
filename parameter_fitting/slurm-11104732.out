ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 90
days_switch 15
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 98.67015301064637
best_error: 98.67015292114819
best_error: 98.67015286709662
best_error: 98.6701528288277
best_error: 17.399331130842654
best_error: 17.39933083478815
best_error: 17.399328772872853
best_error: 14.188511638577719
best_error: 14.188511637631137
best_error: 14.188511603536146
best_error: 14.110382707938903
best_error: 14.11038270689427
best_error: 14.110382668831031
best_error: 13.740921178005685
best_error: 13.740921176601084
best_error: 13.74092111958097
best_error: 12.461500822316651
best_error: 12.461500811604138
best_error: 12.461500801175987
best_error: 12.461500786298135
best_error: 11.375170032248278
best_error: 11.375169776974216
best_error: 11.027665031287466
best_error: 11.027665031286812
best_error: 11.027665028804162
best_error: 11.02766502316603
best_error: 11.020399262937243
best_error: 11.020399251943289
best_error: 11.020399243990042
best_error: 11.006829549183553
best_error: 11.006829542970422
best_error: 11.006829536109462
best_error: 10.966861964862794
best_error: 10.966861964862112
best_error: 10.966861962228652
best_error: 10.96686195653287
best_error: 10.863251680580422
best_error: 10.863251679314962
best_error: 10.86325167706925
best_error: 10.863251670506866
best_error: 10.472376466981416
best_error: 10.472376460133452
best_error: 10.472376458328402
best_error: 10.47237645110646
best_error: 10.351065529342272
best_error: 10.351065520250337
best_error: 10.351065518798192
best_error: 10.351065511752742
best_error: 10.320638324812435
best_error: 10.320638310909892
best_error: 10.320638306659646
best_error: 10.244280111347155
best_error: 10.244280084194592
best_error: 9.509418353001761
best_error: 9.509418308184902
best_error: 9.406396980155609
best_error: 9.406396966970249
best_error: 9.406396952394605
best_error: 9.259070009353927
best_error: 9.259069972151988
best_error: 9.189144048509547
best_error: 9.189144045817327
best_error: 9.189144001113444
best_error: 9.12758059492484
best_error: 9.12758055777119
best_error: 9.127580519361164
best_error: 8.61629169656326
best_error: 8.616291669307396
best_error: 8.616291656867427
best_error: 8.608523605943597
best_error: 8.608523445899252
best_error: 8.55809219000882
best_error: 8.558092189309438
best_error: 8.558092055764158
best_error: 8.537901259921226
best_error: 8.53790112944814
best_error: 8.46111474371232
best_error: 8.461114582055595
best_error: 8.214278347119878
best_error: 8.21427833043665
best_error: 8.193712770240774
best_error: 8.193712753777758
best_error: 8.171025522155006
best_error: 8.171025504985689
best_error: 8.16444688426266
best_error: 8.164446867220786
best_error: 8.155845259438836
best_error: 8.155845243845466
best_error: 8.155845243630544
best_error: 8.105348607015902
best_error: 8.105348593638796
best_error: 8.071781567517224
best_error: 8.071781252657415
best_error: 8.050722182464254
best_error: 8.05072217451147
best_error: 8.050722160519113
best_error: 8.033023818441048
best_error: 8.033023808511645
best_error: 8.005570963316732
best_error: 8.005570954092407
best_error: 7.990115533154536
best_error: 7.99011552610873
best_error: 7.990115525537874
best_error: 7.990115521119493
best_error: 7.975696279743617
best_error: 7.975696272951843
best_error: 7.9756962689592665
best_error: 7.960005575202038
best_error: 7.9600053653132425
best_error: 7.959467069489065
best_error: 7.959467062952894
best_error: 7.950380810057744
best_error: 7.950380805927014
best_error: 7.950380799714665
best_error: 7.942974747927097
best_error: 7.942974744842106
best_error: 7.942974742655505
best_error: 7.94224046220427
best_error: 7.942240460816235
best_error: 7.942240419367538
best_error: 7.940705979515423
best_error: 7.94070597839597
best_error: 7.94070593552671
best_error: 7.939573587468681
best_error: 7.939573586271219
best_error: 7.939573558816672
best_error: 7.939357505432829
best_error: 7.939357504379634
best_error: 7.939357453909884
best_error: 7.939346047457478
best_error: 7.93934604625389
best_error: 7.939346018847285
best_error: 7.939341525718733
best_error: 7.9393415246659735
best_error: 7.939341474192182
best_error: 7.939341263129699
best_error: 7.939341261925984
best_error: 7.939341234520399
best_error: 7.939341177485137
best_error: 7.939341176432384
best_error: 7.939341130845811
best_error: 7.9361011832015596
best_error: 7.9361011806406
best_error: 7.936101180093867
best_error: 7.936101176761105
best_error: 7.934319644947264
best_error: 7.934319642392619
best_error: 7.934319641844257
best_error: 7.9343196385134345
best_error: 7.9295124212297745
best_error: 7.929512126010344
best_error: 7.929182767713455
best_error: 7.929182429545914
best_error: 7.92512235171394
best_error: 7.925122350247467
best_error: 7.925122344855246
best_error: 7.790276487174097
best_error: 7.79027607866446
best_error: 7.789972764349475
best_error: 7.789972356137494
best_error: 7.7887554377638955
best_error: 7.788755029988184
best_error: 7.783912349351722
best_error: 7.783911947655616
best_error: 7.763988492199035
best_error: 7.763988108665158
best_error: 7.6976371528325185
best_error: 7.69763715149705
best_error: 7.697637149941491
best_error: 7.697637141191845
best_error: 7.6958386793596
best_error: 7.695838678066207
best_error: 7.695838676511289
best_error: 7.695838667867665
best_error: 7.695336189571588
best_error: 7.695336188288946
best_error: 7.695336186736817
best_error: 7.695336178092284
best_error: 7.695139868055451
best_error: 7.695139866772814
best_error: 7.695139865221532
best_error: 7.695139856581088
best_error: 7.69505271632351
best_error: 7.695052715379077
best_error: 7.6950527137646745
best_error: 7.695052705926087
best_error: 7.695012671091889
best_error: 7.69501267014744
best_error: 7.6950126685332
best_error: 7.695012660695469
best_error: 7.694991059511165
best_error: 7.694991058566705
best_error: 7.694991056952583
best_error: 7.694991049115284
best_error: 7.694979387318934
best_error: 7.69497938637447
best_error: 7.694979384760403
best_error: 7.694979376923348
best_error: 7.694973087373736
best_error: 7.694973086429265
best_error: 7.694973084815219
best_error: 7.694973076978306
best_error: 7.694969695336805
best_error: 7.694969694392331
best_error: 7.694969692778305
best_error: 7.694969684941459
best_error: 7.694967880993231
best_error: 7.694967880048759
best_error: 7.694967878434738
best_error: 7.694967870597932
best_error: 7.6949669169438515
best_error: 7.694966915999386
best_error: 7.694966914385353
best_error: 7.694966906548574
best_error: 7.694966726702689
best_error: 7.694966725758226
best_error: 7.6949667241442095
best_error: 7.694966716307419
best_error: 7.694966624422124
best_error: 7.694966623477647
best_error: 7.694966621863628
best_error: 7.694966614026855
best_error: 7.694966569722663
best_error: 7.694966568778182
best_error: 7.694966567164171
best_error: 7.694966559327394
best_error: 7.694966539016129
best_error: 7.69496653678147
best_error: 7.694966536569185
best_error: 7.694966536193647
