ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 92
days_switch 95
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 98.0001345316378
best_error: 98.00013437478708
best_error: 15.115572213108527
best_error: 15.115572201554007
best_error: 15.10627166536818
best_error: 15.106271661526229
best_error: 15.104043018066326
best_error: 15.104043014406676
best_error: 15.096823562849554
best_error: 15.096823560339343
best_error: 15.086838855549205
best_error: 15.086838854093337
best_error: 15.085733247540151
best_error: 15.085733247539522
best_error: 15.085733247526408
best_error: 15.085733247375355
best_error: 15.085407084854712
best_error: 15.085407084840533
best_error: 15.085407084682123
best_error: 15.084638550113784
best_error: 15.084638550097747
best_error: 15.084638549906833
best_error: 15.079006403113727
best_error: 15.079006403092274
best_error: 15.079006402743907
best_error: 15.0273120118278
best_error: 15.027312011814491
best_error: 15.027312011711501
best_error: 15.027312006136203
best_error: 14.91191620009545
best_error: 14.911916189435054
best_error: 14.790365827853263
best_error: 14.790365800921217
best_error: 14.428192765357307
best_error: 14.428192716792783
best_error: 14.286990042566904
best_error: 14.286990041629988
best_error: 14.2869900413544
best_error: 14.286591100899198
best_error: 14.286591099944205
best_error: 14.286591099662973
best_error: 14.286551944731672
best_error: 14.286551943866975
best_error: 14.286551943522817
best_error: 14.111779283655203
best_error: 14.111779283507708
best_error: 14.111779269928821
best_error: 14.089177096663567
best_error: 14.08917707346793
best_error: 14.038375911993965
best_error: 14.03837588645482
best_error: 14.032669950523289
best_error: 14.032669949196652
best_error: 14.03266994917019
best_error: 14.027647191540085
best_error: 14.027647190152356
best_error: 14.00820124545669
best_error: 14.008201243595039
best_error: 13.94361008898667
best_error: 13.943610049834115
best_error: 13.834439557320792
best_error: 13.834439520260219
best_error: 13.806803686555035
best_error: 13.806803662782908
best_error: 13.803919611019476
best_error: 13.803919610941449
best_error: 13.80391959652207
best_error: 13.803526139758379
best_error: 13.80352613791598
best_error: 13.803526135621068
best_error: 13.800265773676863
best_error: 13.80026577275647
best_error: 13.800265770068563
best_error: 13.797771110952176
best_error: 13.79777111029514
best_error: 13.7977711085778
best_error: 13.797771107444852
best_error: 13.797771106325373
best_error: 13.789253369222905
best_error: 13.789253369056473
best_error: 13.789253357500485
best_error: 13.751486554898413
best_error: 13.751486554119602
best_error: 13.751486553824
best_error: 13.751486552191704
best_error: 13.743307712633761
best_error: 13.74330771067073
best_error: 13.741797310870037
best_error: 13.741797309444596
best_error: 13.741797309440184
best_error: 13.74179730857506
best_error: 13.740749957917782
best_error: 13.740749956754406
best_error: 13.740749956604683
best_error: 13.740749955266438
best_error: 13.740746303108178
best_error: 13.740746301652882
best_error: 13.740746300812512
best_error: 13.740743060309594
best_error: 13.740743058854115
best_error: 13.740743058013368
best_error: 13.74053415474617
best_error: 13.74053415321977
best_error: 13.740534152425267
best_error: 13.739888045081248
best_error: 13.739888044086626
best_error: 13.739888043742539
best_error: 13.739888042034346
best_error: 13.737672047097712
best_error: 13.73767204538687
best_error: 13.737672044618165
best_error: 13.733034139976985
best_error: 13.733034135865502
best_error: 13.72205683273589
best_error: 13.722056831174996
best_error: 13.722056830080302
best_error: 13.717575265434332
best_error: 13.71757526432025
best_error: 13.717575263003585
best_error: 13.714417817876905
best_error: 13.714417816880612
best_error: 13.714417815487765
best_error: 13.6935265810648
best_error: 13.693526549646885
best_error: 13.672434843671923
best_error: 13.672434817634722
best_error: 13.642538253050237
best_error: 13.64253825297833
best_error: 13.642538251871601
best_error: 13.635353621753978
best_error: 13.63535362147516
best_error: 13.635353609110085
best_error: 13.59045126201115
best_error: 13.59045126114442
best_error: 13.590451239985693
best_error: 13.533830820393153
best_error: 13.53383078126378
best_error: 13.489889594771793
best_error: 13.489889593307645
best_error: 13.489889588062256
best_error: 13.48214690532153
best_error: 13.482146903410131
best_error: 13.482146883108333
best_error: 13.476351372245848
best_error: 13.476351371437449
best_error: 13.47635136990705
best_error: 13.46988488225342
best_error: 13.46988488133101
best_error: 13.46988488020849
best_error: 13.46329960345283
best_error: 13.463299602393809
best_error: 13.456749325573016
best_error: 13.456749324497423
best_error: 13.456749315011017
best_error: 13.448829329861608
best_error: 13.448829328959855
best_error: 13.448829318823396
best_error: 13.438125834846595
best_error: 13.438125834398367
best_error: 13.438125793197617
best_error: 13.434073332706866
best_error: 13.434073332623985
best_error: 13.434073331496752
best_error: 13.429941182347303
best_error: 13.429941182289394
best_error: 13.429941164086104
best_error: 13.428830645991408
best_error: 13.428830645719675
best_error: 13.428830644022517
best_error: 13.428830643243314
best_error: 13.427119255168389
best_error: 13.427119255167682
best_error: 13.427119246064306
best_error: 13.427067802886908
best_error: 13.427067802617836
best_error: 13.42706780158036
best_error: 13.427067800394992
best_error: 13.42681169554518
best_error: 13.426811695515973
best_error: 13.42681168616585
best_error: 13.426619844212594
best_error: 13.42661984390396
best_error: 13.426510080493
best_error: 13.426510080491784
best_error: 13.426510076609834
