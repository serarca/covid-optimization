ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 19.634253054407978
best_error: 19.634252968917043
best_error: 10.775788172791511
best_error: 10.775788165791422
best_error: 10.775788162658102
best_error: 10.719307138317351
best_error: 10.71930713063955
best_error: 10.651139350268165
best_error: 10.6511393416651
best_error: 10.651139337615364
best_error: 10.56303967285141
best_error: 10.563039659382731
best_error: 10.563039657137717
best_error: 8.421033974832635
best_error: 8.42103385770986
best_error: 8.311391518122752
best_error: 8.311391433241498
best_error: 8.311391419430084
best_error: 8.147534515154565
best_error: 8.1475344732856
best_error: 8.147534401122067
best_error: 8.140257152336972
best_error: 8.14025711094915
best_error: 8.140257037096362
best_error: 8.13442330882754
best_error: 8.134423273603016
best_error: 8.134423192899376
best_error: 8.115538553206779
best_error: 8.115538538973478
best_error: 8.11553843306111
best_error: 8.114956761856597
best_error: 8.11495674710925
best_error: 8.11495664127425
best_error: 8.114378431341839
best_error: 8.11437841819471
best_error: 8.114378310493967
best_error: 7.734346002817893
best_error: 7.734345895369191
best_error: 7.370808068328402
best_error: 7.3708079744519805
best_error: 7.370807972994359
best_error: 7.092785352481309
best_error: 7.092785338956022
best_error: 6.845356362840951
best_error: 6.845356312637657
best_error: 6.845356257366527
best_error: 6.809208587937993
best_error: 6.8092085435933765
best_error: 6.809208481743606
best_error: 6.788440942447659
best_error: 6.788440896896036
best_error: 6.788440835425136
best_error: 6.770482608001091
best_error: 6.770482567118196
best_error: 6.7704825015028245
best_error: 6.759833329932134
best_error: 6.759833287884522
best_error: 6.759833223138392
best_error: 6.75056426332667
best_error: 6.750564221383598
best_error: 6.750564156368775
best_error: 6.744018469280361
best_error: 6.744018426638522
best_error: 6.744018362031299
best_error: 6.738728655565517
best_error: 6.7387286134960265
best_error: 6.73872854815342
best_error: 6.7329890140440485
best_error: 6.732988972475238
best_error: 6.732988906454531
best_error: 6.726174607631489
best_error: 6.726174566438454
best_error: 6.72617449979146
best_error: 6.723356309882307
best_error: 6.723356268397639
best_error: 6.723356201916101
best_error: 6.721931831084585
best_error: 6.721931789453032
best_error: 6.721931723054714
best_error: 6.720992894424554
best_error: 6.720992852687948
best_error: 6.720992786340043
best_error: 6.720135734938026
best_error: 6.720135693105725
best_error: 6.720135626803736
best_error: 6.719667703676675
best_error: 6.719667661792192
best_error: 6.719667595515173
best_error: 6.719244118393453
best_error: 6.719244076461804
best_error: 6.7192440102073725
best_error: 6.718997451865729
best_error: 6.718997409906613
best_error: 6.718997343665315
best_error: 6.718778088651991
best_error: 6.718778046668488
best_error: 6.718777980438838
best_error: 6.718627866758906
best_error: 6.718627824758695
best_error: 6.718627758537048
best_error: 6.718500890300335
best_error: 6.718500848286014
best_error: 6.7185007820710965
best_error: 6.718356316215934
best_error: 6.718356274185541
best_error: 6.718356207978315
best_error: 6.718260406005683
best_error: 6.718260363964646
best_error: 6.718260297762493
best_error: 6.718041889145939
best_error: 6.718041847080642
best_error: 6.718041780890067
best_error: 6.7180098911853445
best_error: 6.718009849116497
best_error: 6.718009782927591
best_error: 6.717981663672022
best_error: 6.717981621600031
best_error: 6.717981555412636
best_error: 6.717960679853621
best_error: 6.717960637779299
best_error: 6.7179605715930375
best_error: 6.71794348091796
best_error: 6.717943438841723
best_error: 6.7179433726563325
best_error: 6.717918798146175
best_error: 6.717918756067204
best_error: 6.717918689883118
best_error: 6.717904262850649
best_error: 6.717904220770056
best_error: 6.717904154586749
best_error: 6.717895256516101
best_error: 6.717895241609304
best_error: 6.717866675005073
best_error: 6.717866632920307
best_error: 6.71786656673898
best_error: 6.717863099646738
best_error: 6.717863057561585
best_error: 6.7178629913804455
best_error: 6.7178610770343905
best_error: 6.717861034949003
best_error: 6.717860968767973
best_error: 6.71785902593062
best_error: 6.7178590110235294
best_error: 6.71785609238424
best_error: 6.717856050298296
best_error: 6.717855984117497
best_error: 6.717855054816651
best_error: 6.717855012730592
best_error: 6.717854946549901
best_error: 6.717854511061116
best_error: 6.717854402794336
best_error: 6.546058865128248
best_error: 6.5460588166639635
best_error: 6.466919295438801
best_error: 6.466919241073647
best_error: 6.435309792660899
best_error: 6.43530973460695
best_error: 6.43476593520483
best_error: 6.434765935204806
best_error: 6.433521655373754
best_error: 6.433521597111361
best_error: 6.433440349406991
best_error: 6.43344029113506
best_error: 6.433431925152368
best_error: 6.43343186687944
best_error: 6.433431364206535
best_error: 6.433431364206509
best_error: 6.433431090462555
best_error: 6.433423151125611
best_error: 6.433423092851481
best_error: 6.433198855910337
best_error: 6.433198797605382
best_error: 6.432318131629591
best_error: 6.432318073204084
best_error: 6.429066044416514
best_error: 6.42906598555453
best_error: 6.426446743209264
best_error: 6.426446743209243
best_error: 6.420573616059391
best_error: 6.420573616059357
best_error: 6.420451897268968
best_error: 6.42045189726891
best_error: 6.420438909233879
best_error: 6.420438849329569
best_error: 6.420431175488584
best_error: 6.420431175488534
best_error: 6.420418935663677
best_error: 6.420418935663635
best_error: 6.4204173742362665
best_error: 6.4204173742362265
best_error: 6.420416749524312
best_error: 6.420416749524271
best_error: 6.420416714204964
best_error: 6.420416698994396
best_error: 6.420416692691233
