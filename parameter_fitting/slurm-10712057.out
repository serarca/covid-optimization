ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.845637106334607
best_error: 9.845636967104621
best_error: 9.428902411490633
best_error: 9.428902231323143
best_error: 7.871189618203466
best_error: 7.8711893234046615
best_error: 6.908362903410423
best_error: 6.908362657551983
best_error: 6.251318311902808
best_error: 6.251318118377533
best_error: 6.110036088077216
best_error: 6.110035918010147
best_error: 5.872950255281097
best_error: 5.872950112666924
best_error: 5.872950108908025
best_error: 5.8563851800582984
best_error: 5.8563850364672465
best_error: 5.856385032177023
best_error: 5.841588067307934
best_error: 5.8415879218288875
best_error: 5.841587917685029
best_error: 5.83183633816851
best_error: 5.831836193826341
best_error: 5.8318361877439
best_error: 5.825164550246052
best_error: 5.825164405102098
best_error: 5.825164399272596
best_error: 5.819526699468396
best_error: 5.819526553651043
best_error: 5.819526548030003
best_error: 5.81594598488588
best_error: 5.815945838642774
best_error: 5.815945833151645
best_error: 5.813062511888375
best_error: 5.813062366487112
best_error: 5.8130623599281215
best_error: 5.810767915614337
best_error: 5.810767769941437
best_error: 5.810767763463068
best_error: 5.809165241105072
best_error: 5.809165095242832
best_error: 5.809165088820308
best_error: 5.807062812111341
best_error: 5.8070626660011655
best_error: 5.807062659651294
best_error: 5.806105366525896
best_error: 5.8061052203029835
best_error: 5.80610521398597
best_error: 5.805535893352751
best_error: 5.805535747062839
best_error: 5.8055357407653165
best_error: 5.805265460505729
best_error: 5.805265314180243
best_error: 5.805265307885116
best_error: 5.8050724583717255
best_error: 5.80507231202087
best_error: 5.805072305727482
best_error: 5.804662862837006
best_error: 5.8046627164323406
best_error: 5.804662710142518
best_error: 5.8044867719405815
best_error: 5.804486625512781
best_error: 5.8044866192245035
best_error: 5.804420710040439
best_error: 5.80442056360396
best_error: 5.804420557316247
best_error: 5.804273614690351
best_error: 5.804273468234568
best_error: 5.804273461948133
best_error: 5.8041917299745815
best_error: 5.804191583508051
best_error: 5.804191577222319
best_error: 5.8041889831915725
best_error: 5.804188836724689
best_error: 5.804188830438964
best_error: 5.804186492188637
best_error: 5.804186345721409
best_error: 5.804186339435729
best_error: 5.804185131956886
best_error: 5.804184985489483
best_error: 5.804184979203791
best_error: 5.804183908002617
best_error: 5.804183761535056
best_error: 5.80418375524939
best_error: 5.8041831914351345
best_error: 5.804183044967486
best_error: 5.8041830386818205
best_error: 5.804182558453526
best_error: 5.804182411985792
best_error: 5.804182405700135
best_error: 5.804180293930626
best_error: 5.804180147462585
best_error: 5.804180141176957
best_error: 5.8041800685008305
best_error: 5.804180062215202
best_error: 5.8041799972381884
best_error: 5.80417999095256
best_error: 5.804179956619489
best_error: 5.8041799503338645
best_error: 5.804179926633242
best_error: 5.804179920347604
best_error: 5.80417989433051
best_error: 5.605715393823761
best_error: 5.605715285884103
best_error: 5.5555639679079425
best_error: 5.55556385930144
best_error: 5.3816927615005525
best_error: 5.381692582402991
best_error: 5.300444361704459
best_error: 5.300444175407101
best_error: 5.032168297776124
best_error: 5.032168084617562
best_error: 4.661781796668002
best_error: 4.66178150333161
best_error: 4.590692277540433
best_error: 4.590691915505845
best_error: 4.516533227705148
best_error: 4.516532845204068
best_error: 4.238305219756632
best_error: 4.23830471554527
best_error: 4.011697684418493
best_error: 4.011697081638029
best_error: 3.7742187970460854
best_error: 3.7742183292973808
best_error: 3.707994332575053
best_error: 3.707993911111982
best_error: 3.692012050553651
best_error: 3.692011637344276
best_error: 3.6878649090003233
best_error: 3.6878644950964174
best_error: 3.6843530416144064
best_error: 3.6843526271088516
best_error: 3.680645755079512
best_error: 3.680645341146949
best_error: 3.6756918242094563
best_error: 3.6756914111794945
best_error: 3.6752946368006683
best_error: 3.675294551322568
best_error: 3.675294537842224
best_error: 3.6749448927335333
best_error: 3.674944479499999
best_error: 3.6708314541630127
best_error: 3.670831041997909
best_error: 3.6705274173729947
best_error: 3.6705270051168872
best_error: 3.670245725894532
best_error: 3.6702453135541244
best_error: 3.6699052248419455
best_error: 3.6699048123996287
best_error: 3.6694877667751538
best_error: 3.6694873542078943
best_error: 3.6691951443959034
best_error: 3.6691950589296494
best_error: 3.669195045628258
best_error: 3.669171190224453
best_error: 3.669170777562463
best_error: 3.6691371775930284
best_error: 3.6691367649221704
best_error: 3.6691147163934046
best_error: 3.669114303716693
best_error: 3.6690995376203066
best_error: 3.669099124939626
best_error: 3.669088878828254
best_error: 3.669088466144804
best_error: 3.669080863470228
best_error: 3.6690804507846773
best_error: 3.6690739718424386
best_error: 3.6690735600152475
best_error: 3.6690668050074686
best_error: 3.669066393178411
best_error: 3.669058861152318
best_error: 3.669058449321189
best_error: 3.669049245268755
best_error: 3.669048833435986
best_error: 3.66904318791913
best_error: 3.669042776085319
best_error: 3.6690405972974487
best_error: 3.669040185463201
best_error: 3.669040141943971
best_error: 3.66904012864144
best_error: 3.6690393263857697
best_error: 3.669038914554022
best_error: 3.6211218936897698
best_error: 3.6211218142573465
best_error: 3.6211217946913252
best_error: 3.4323399900369305
best_error: 3.432339938786626
best_error: 3.4323398904766784
best_error: 3.4294727266317775
best_error: 3.4294723083884517
best_error: 3.421077500790722
best_error: 3.4210770814601714
best_error: 3.400224627377019
best_error: 3.4002245817091414
best_error: 3.400224527393017
best_error: 3.386902403064851
best_error: 3.3869023606496103
best_error: 3.379805981284891
best_error: 3.379805553789916
best_error: 3.3778559170992835
best_error: 3.377855874790126
best_error: 3.3778302057663634
best_error: 3.377829778066136
best_error: 3.377828611360785
best_error: 3.3778285690495053
best_error: 3.3778268211593057
best_error: 3.377826393458684
best_error: 3.3778227114978145
best_error: 3.3778222837967697
best_error: 3.3778221679953195
best_error: 3.377821740294217
best_error: 3.377821725653293
best_error: 3.3778217043157492
best_error: 3.377821681001378
best_error: 3.377821674015831
