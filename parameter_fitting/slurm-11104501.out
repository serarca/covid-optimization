ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 70
days_switch 90
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 110.05071363657798
best_error: 110.05071351168827
best_error: 110.0507134428147
best_error: 20.229399050432374
best_error: 20.22939905043089
best_error: 20.229399047757788
best_error: 20.22857670853503
best_error: 20.228576705837675
best_error: 20.225216190207576
best_error: 20.225216187415963
best_error: 20.210515657614607
best_error: 20.210515654387418
best_error: 20.119049898848406
best_error: 20.11904989206508
best_error: 19.8326874826709
best_error: 19.832687457549167
best_error: 17.062857659950247
best_error: 17.062857409005275
best_error: 15.818487329523691
best_error: 15.818486972668104
best_error: 14.59322166460196
best_error: 14.593221218148129
best_error: 14.008315168512777
best_error: 14.00831503258382
best_error: 14.002369648483839
best_error: 14.00236951337022
best_error: 14.002298181221066
best_error: 14.002298176180284
best_error: 14.002298176026745
best_error: 14.002298175458245
best_error: 14.002298172973404
best_error: 14.00207109524931
best_error: 14.00207096007711
best_error: 14.001973053678817
best_error: 14.001973048662139
best_error: 14.001973048488459
best_error: 14.001973047916884
best_error: 14.001973045433548
best_error: 14.001965808148238
best_error: 14.001965672966126
best_error: 14.001930199552115
best_error: 14.001930064363284
best_error: 14.00181720607579
best_error: 14.001817201059563
best_error: 14.001817200883412
best_error: 14.001817200314932
best_error: 14.001817197831285
best_error: 14.000902776020624
best_error: 14.000902771006979
best_error: 14.000902770815866
best_error: 14.000902770266165
best_error: 14.00090276778051
best_error: 13.99726192517672
best_error: 13.997261920129692
best_error: 13.997261919967476
best_error: 13.99726191943816
best_error: 13.997261916954132
best_error: 13.982846152637686
best_error: 13.98284614764142
best_error: 13.982846147261107
best_error: 13.982846147013614
best_error: 13.982846144483865
best_error: 13.92826235486138
best_error: 13.928262349486378
best_error: 13.928262349343948
best_error: 13.928262346963262
best_error: 13.838178256614782
best_error: 13.838178243052392
best_error: 13.794946014525745
best_error: 13.794945998420166
best_error: 13.782791287703375
best_error: 13.78279127107361
best_error: 13.78279127090017
best_error: 13.776902068225624
best_error: 13.776902051287495
best_error: 13.77690205101095
best_error: 13.776281932463116
best_error: 13.77628191548227
best_error: 13.77628191519392
best_error: 13.77598501078343
best_error: 13.77598499379489
best_error: 13.775984993501087
best_error: 13.775386567685377
best_error: 13.775386526566724
best_error: 13.77538652573632
best_error: 13.682360889857108
best_error: 13.682360847257033
best_error: 13.682360844432491
best_error: 13.626049853243783
best_error: 13.626049805681497
best_error: 13.626049802169089
best_error: 13.547143023413607
best_error: 13.547142978270976
best_error: 13.547142975642037
best_error: 13.337271527258604
best_error: 13.337271491022069
best_error: 13.337271490564746
best_error: 13.329966791004548
best_error: 13.329966788691712
best_error: 13.329966784607716
best_error: 13.233371709402029
best_error: 13.233371705992681
best_error: 13.23337170309419
best_error: 13.231313425428645
best_error: 13.23131339311021
best_error: 13.142644427434291
best_error: 13.142644394343034
best_error: 13.14264439408025
best_error: 13.009626982845585
best_error: 13.009626951756996
best_error: 12.788691134732103
best_error: 12.788691101349775
best_error: 12.737580544453992
best_error: 12.737580536120241
best_error: 12.717948026018046
best_error: 12.717948018584746
best_error: 12.700941548568384
best_error: 12.700941547733514
best_error: 12.700941543789995
best_error: 12.698147434340573
best_error: 12.698147433114613
best_error: 12.698147429393087
best_error: 12.688159455135269
best_error: 12.688159455135251
best_error: 12.688159453609142
best_error: 12.688159450183086
best_error: 12.683648688631123
best_error: 12.683648688527406
best_error: 12.683648687142236
best_error: 12.68129919962489
best_error: 12.68129919962487
best_error: 12.681299197957362
best_error: 12.678031150606245
best_error: 12.678031150038162
best_error: 12.675870589017737
best_error: 12.675870575731215
best_error: 12.675738056770617
best_error: 12.67573805655893
best_error: 12.675704824114126
best_error: 12.675704823839535
best_error: 12.675702626189175
best_error: 12.675702624141874
best_error: 12.675681213348232
best_error: 12.675681210709147
best_error: 12.67567192079387
best_error: 12.675671918136546
best_error: 12.675668314914493
best_error: 12.67566831224959
best_error: 12.675664401202178
best_error: 12.675664398532309
best_error: 12.675663854225846
best_error: 12.675663853989093
best_error: 12.675663778411307
best_error: 12.675663776685587
best_error: 12.675454318751155
best_error: 12.675454318422318
best_error: 12.675391360593819
best_error: 12.675391359379708
best_error: 12.674940382892597
best_error: 12.674940381599248
best_error: 12.67472056443745
best_error: 12.674720561405588
best_error: 12.674527340037368
best_error: 12.674527338364888
best_error: 12.6744762524447
best_error: 12.674476251792882
best_error: 12.674339956603948
best_error: 12.674339955917063
best_error: 12.674322639026444
best_error: 12.674322637875726
best_error: 12.674302177716353
best_error: 12.674302176561033
best_error: 12.673999643716645
best_error: 12.673999643011058
best_error: 12.673402132848922
best_error: 12.673402132646812
best_error: 12.673402132146384
best_error: 12.673072162046884
best_error: 12.67307216103919
best_error: 12.672985876503896
best_error: 12.67298587442926
best_error: 12.672761935939391
best_error: 12.672761934951371
best_error: 12.67276193490727
best_error: 12.672567178079362
best_error: 12.672567176691729
best_error: 12.672567176547123
