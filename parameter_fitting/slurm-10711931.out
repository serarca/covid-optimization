ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 28.491233135008564
best_error: 28.491232977137123
best_error: 12.001675974474493
best_error: 12.001675964936817
best_error: 12.00167596244881
best_error: 11.958892574618455
best_error: 11.958892565444787
best_error: 11.896639725548347
best_error: 11.896639715023307
best_error: 11.868868173162035
best_error: 11.8688681602546
best_error: 11.868868128368652
best_error: 11.582443559237735
best_error: 11.582443517421146
best_error: 11.582443505108522
best_error: 11.360619150870745
best_error: 11.360619085343169
best_error: 9.824151503993292
best_error: 9.824151340509683
best_error: 9.808549666939054
best_error: 9.808549490607879
best_error: 8.482773317213189
best_error: 8.482773297584332
best_error: 8.48277316628947
best_error: 8.470637463416146
best_error: 8.470637448646677
best_error: 8.47063731189923
best_error: 8.44330746270908
best_error: 8.443307446854357
best_error: 8.44330730934801
best_error: 8.429933357434006
best_error: 8.429933341138884
best_error: 8.429933203189115
best_error: 8.427430475126332
best_error: 8.42743045983544
best_error: 8.427430320744595
best_error: 8.424006651021282
best_error: 8.424006635295713
best_error: 8.42400649640302
best_error: 8.42239341202563
best_error: 8.422393397389122
best_error: 8.42239325733677
best_error: 8.42062794610916
best_error: 8.420627931185665
best_error: 8.4206277911779
best_error: 8.420393427028618
best_error: 8.420393412067224
best_error: 8.420393272065208
best_error: 8.42025796305919
best_error: 8.420257948075921
best_error: 8.420257808077183
best_error: 8.420213315856314
best_error: 8.420213300865845
best_error: 8.420213160868187
best_error: 8.419982949413127
best_error: 8.419982934385521
best_error: 8.419982794393434
best_error: 8.419982334513811
best_error: 8.41998231948611
best_error: 8.419982179494035
best_error: 8.41998175951474
best_error: 8.419981744486945
best_error: 8.419981604494918
best_error: 8.419981277510434
best_error: 8.419981262482558
best_error: 8.419981122490503
best_error: 8.419980853653836
best_error: 8.4199808386259
best_error: 8.41998069863386
best_error: 8.419979499649855
best_error: 8.419979484621688
best_error: 8.419979344629674
best_error: 8.41997873366258
best_error: 8.419978718634294
best_error: 8.419978578642306
best_error: 8.419978426730793
best_error: 8.419978411702457
best_error: 8.419978271710466
best_error: 8.419976796836405
best_error: 8.419976641815893
best_error: 8.370441344942684
best_error: 8.367685459116302
best_error: 8.365284826005603
best_error: 8.36528480689918
best_error: 8.365016101999384
best_error: 8.365016082856439
best_error: 8.365011596009055
best_error: 8.365011576865513
best_error: 8.36501062127568
best_error: 8.365010602886786
best_error: 8.365010435380833
best_error: 8.36501041699194
best_error: 8.365010399799562
best_error: 8.36500464115741
best_error: 8.365004622012702
best_error: 8.3649818590356
best_error: 8.36498183988698
best_error: 8.36489497229083
best_error: 8.364894953127285
best_error: 8.364627438794493
best_error: 8.364627419585076
best_error: 8.364627410255466
best_error: 8.364627391046048
best_error: 8.364627296099378
best_error: 8.36462727688994
best_error: 8.364626839474932
best_error: 8.364626820265428
best_error: 8.364625012975694
best_error: 8.364624993765945
best_error: 8.364617706955903
best_error: 8.364617687745174
best_error: 8.36458848251112
best_error: 8.364588463296421
best_error: 8.364471578881655
best_error: 8.36447155965115
best_error: 8.364003870748295
best_error: 8.364003851454521
best_error: 8.363669746515672
best_error: 8.363669727176692
best_error: 8.363628920034092
best_error: 8.363628900689587
best_error: 8.363628679225442
best_error: 8.36362574824599
best_error: 8.363625728901058
best_error: 8.363617709733965
best_error: 8.363617690387946
best_error: 8.36361686818161
best_error: 8.363616849782659
best_error: 8.36361672082458
best_error: 8.363616676761982
best_error: 8.363616657353337
best_error: 8.363616638954385
best_error: 8.363616338586535
best_error: 8.36361631924034
best_error: 8.363616160046524
best_error: 8.363616140700309
best_error: 8.363615445886516
best_error: 8.363615426540214
best_error: 8.363612589246733
best_error: 8.363612569900086
best_error: 8.36360116269164
best_error: 8.363601143343631
best_error: 8.363555456536279
best_error: 8.363555437182782
best_error: 8.363372632954551
best_error: 8.36337261357914
best_error: 8.3626413552706
best_error: 8.362641335807503
best_error: 8.35971651125929
best_error: 8.359716491445475
best_error: 8.348021430558092
best_error: 8.348021409341586
best_error: 8.301460722032708
best_error: 8.301460692583063
best_error: 8.11740639998352
best_error: 8.117406344252016
best_error: 7.967060213301818
best_error: 7.967060124232819
best_error: 7.967060103424474
best_error: 7.9670600201911
best_error: 7.9670597763265345
best_error: 7.967059687257441
best_error: 7.96705844458943
best_error: 7.96705835552003
best_error: 7.96705311759698
best_error: 7.967053028526402
best_error: 7.967031808923153
best_error: 7.9670317198478635
best_error: 7.9669465629643605
best_error: 7.966946473870248
best_error: 7.966605398975991
best_error: 7.966605309806583
best_error: 7.965237864564432
best_error: 7.96523777509445
best_error: 7.959721929784688
best_error: 7.959721839122108
best_error: 7.939344297149871
best_error: 7.9393442169625725
best_error: 7.937879648128394
best_error: 7.937879569017351
best_error: 7.934761667440679
best_error: 7.934761587682952
best_error: 7.931712089677296
best_error: 7.931712009299166
best_error: 7.9301043885235565
best_error: 7.930104307823113
best_error: 7.928546451704749
best_error: 7.928546370695042
best_error: 7.927741265427048
best_error: 7.927741184258687
best_error: 7.926964630171355
best_error: 7.9269645488507265
best_error: 7.926566356215355
best_error: 7.926566274816935
best_error: 7.926185147617804
best_error: 7.926185067489914
best_error: 7.92599458356408
best_error: 7.925994503398792
best_error: 7.925811429484369
best_error: 7.925811349283187
best_error: 7.925716420257723
best_error: 7.9257163400379484
best_error: 7.9256252655620685
best_error: 7.9256251853244635
best_error: 7.925576782617249
best_error: 7.925576702370158
best_error: 7.925433669785114
best_error: 7.925433589510041
best_error: 7.9253973872570125
best_error: 7.925397306974856
best_error: 7.925362505767865
best_error: 7.9253624254789035
best_error: 7.925350288080422
best_error: 7.925350207789055
best_error: 7.925338577824212
best_error: 7.925338497530565
best_error: 7.925332282262875
best_error: 7.925332201968007
best_error: 7.9253262687585755
best_error: 7.925326188462533
best_error: 7.92532278983307
best_error: 7.925322709536341
best_error: 7.9253194944898535
best_error: 7.925319414192476
best_error: 7.925317173881833
best_error: 7.925317093584014
best_error: 7.925315037123196
best_error: 7.925314956824947
best_error: 7.925311801457282
best_error: 7.925311721158404
best_error: 7.925309162180451
best_error: 7.925309081881071
best_error: 7.925292139410907
best_error: 7.925292059108207
best_error: 7.925291988633513
best_error: 7.925291942457262
