ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 13.608946259726759
best_error: 13.608946250018008
best_error: 13.608946243952376
best_error: 13.597191083697458
best_error: 13.597191073216765
best_error: 13.597191066933288
best_error: 13.051394406909061
best_error: 13.051394348453204
best_error: 13.05139433881336
best_error: 10.742740557555358
best_error: 10.742740243335883
best_error: 8.665646061124603
best_error: 8.665645525240345
best_error: 6.7823600809904026
best_error: 6.782359537363284
best_error: 6.172447528201335
best_error: 6.1724471289137846
best_error: 5.978681353845108
best_error: 5.978681064644565
best_error: 5.963174155477331
best_error: 5.963173890752479
best_error: 5.961811213318929
best_error: 5.961810952870776
best_error: 5.955226594185603
best_error: 5.955226334092111
best_error: 5.916184978173245
best_error: 5.916184603064462
best_error: 5.880020857536287
best_error: 5.880020590005236
best_error: 5.879248702650203
best_error: 5.879248329341425
best_error: 5.861302887139924
best_error: 5.861302617562527
best_error: 5.861280528786686
best_error: 5.861280156137065
best_error: 5.861176810419206
best_error: 5.8611765408276995
best_error: 5.86117615451777
best_error: 5.861175781873534
best_error: 5.861145615104341
best_error: 5.861145345509357
best_error: 5.861139449124351
best_error: 5.861139179528674
best_error: 5.861138535449616
best_error: 5.8611385023576865
best_error: 5.749687843783464
best_error: 5.749687559088926
best_error: 5.679248672132655
best_error: 5.679248349680584
best_error: 5.621594038738445
best_error: 5.621593682744416
best_error: 5.569924450613989
best_error: 5.569924057399804
best_error: 5.442646286100846
best_error: 5.442645886678954
best_error: 5.385021436195684
best_error: 5.385021060526666
best_error: 5.357116296489249
best_error: 5.357115929479341
best_error: 5.264499226804321
best_error: 5.264498835849704
best_error: 5.259553304537681
best_error: 5.259552880792675
best_error: 5.222059162929439
best_error: 5.222058734266494
best_error: 5.180368085082406
best_error: 5.180367653454533
best_error: 5.149278009921783
best_error: 5.149277575689151
best_error: 5.133686679972233
best_error: 5.133686244134137
best_error: 5.133388527966065
best_error: 5.133388092091092
best_error: 5.133325915017544
best_error: 5.1333255934466795
best_error: 5.133321335572092
best_error: 5.133320899688828
best_error: 5.133238427497179
best_error: 5.133237991603673
best_error: 5.133230089724993
best_error: 5.133229653830467
best_error: 5.1332244869820105
best_error: 5.1332240510867955
best_error: 5.133223921523083
best_error: 5.13322386357002
best_error: 5.1332238419839324
best_error: 5.133223758415722
best_error: 5.1332237584137586
best_error: 5.133223678876558
best_error: 5.133223659948794
best_error: 5.133223659946827
best_error: 5.133223656731199
best_error: 5.13322337555834
best_error: 5.133223215601609
best_error: 5.133222243540506
best_error: 5.133221880808801
best_error: 5.133221867838062
best_error: 5.13322182437112
best_error: 5.133221796544237
best_error: 5.13322176917336
best_error: 5.133221680310877
best_error: 5.11508967913159
best_error: 5.115089355210001
best_error: 4.975254195144604
best_error: 4.975253685243432
best_error: 4.961050413763436
best_error: 4.961049818493283
best_error: 4.948178899481974
best_error: 4.948178642962922
best_error: 4.945891759241324
best_error: 4.945891198770207
best_error: 4.94287930467668
best_error: 4.942879014885005
best_error: 4.940132745924931
best_error: 4.940132460109085
best_error: 4.937538949651946
best_error: 4.937538333028994
best_error: 4.934980092106562
best_error: 4.934979865417483
best_error: 4.929402659637349
best_error: 4.929402379110721
best_error: 4.921899121140788
best_error: 4.9218988407113144
best_error: 4.907982978560976
best_error: 4.907982694728238
best_error: 4.900743226481541
best_error: 4.900742933875081
best_error: 4.89565535188669
best_error: 4.895655055908617
best_error: 4.8835464586170785
best_error: 4.883545899186444
best_error: 4.850881640076709
best_error: 4.850881353070009
best_error: 4.8345446702911
best_error: 4.834544378152592
best_error: 4.8250079973559385
best_error: 4.825007423641996
best_error: 4.804212321414133
best_error: 4.80421203084005
best_error: 4.792788484785333
best_error: 4.792788192765351
best_error: 4.780722959433982
best_error: 4.7807226675301
best_error: 4.775514643310527
best_error: 4.775514050398598
best_error: 4.758621024493882
best_error: 4.758620411826309
best_error: 4.720624352313077
best_error: 4.720624104900981
best_error: 4.7199663534773455
best_error: 4.719965688467349
best_error: 4.7038132161921276
best_error: 4.703812984333732
best_error: 4.677877792700949
best_error: 4.677877488064845
best_error: 4.652153662169574
best_error: 4.652153046851247
best_error: 4.6424796649998665
best_error: 4.642479363260586
best_error: 4.636802310269775
best_error: 4.63680200752424
best_error: 4.634407129781248
best_error: 4.634406823324548
best_error: 4.633750707354188
best_error: 4.633750400957432
best_error: 4.633696871583421
best_error: 4.633696266639678
best_error: 4.621290411347838
best_error: 4.62129010855269
best_error: 4.620002120637684
best_error: 4.620001511830407
