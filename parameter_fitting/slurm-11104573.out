ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 76
days_switch 80
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 107.99100553970138
best_error: 107.99100547233093
best_error: 107.99100536097993
best_error: 19.26806265402026
best_error: 19.268062654017204
best_error: 19.268062647510824
best_error: 19.254408395505962
best_error: 19.2544083955027
best_error: 19.254408388444464
best_error: 19.185025260798714
best_error: 19.185025260792717
best_error: 19.185025250196
best_error: 17.379677910860337
best_error: 17.379677908905308
best_error: 17.379677794583504
best_error: 17.086530030443594
best_error: 17.086530027520016
best_error: 17.08652994025979
best_error: 16.98302066483128
best_error: 16.9830206614022
best_error: 16.983020590212654
best_error: 16.81309378757257
best_error: 16.813093782742246
best_error: 16.81309373493986
best_error: 16.753500898556844
best_error: 16.75350089309068
best_error: 16.753500869375742
best_error: 16.75350081008274
best_error: 16.738704962124203
best_error: 16.738704956345533
best_error: 16.73870495231542
best_error: 16.738704821763204
best_error: 16.7352955867577
best_error: 16.73529558067373
best_error: 16.73529557846802
best_error: 16.735295577665273
best_error: 16.735295435470018
best_error: 16.64401081675616
best_error: 16.644010744075626
best_error: 16.535923975447968
best_error: 16.535923893884966
best_error: 16.02004643903428
best_error: 16.02004637038221
best_error: 15.398896871346547
best_error: 15.398896851507418
best_error: 15.078959943135427
best_error: 15.078959923743017
best_error: 14.926190996014963
best_error: 14.9261909847585
best_error: 14.9261909820893
best_error: 14.458984567483386
best_error: 14.45898455499262
best_error: 14.45898455456301
best_error: 13.846347199350724
best_error: 13.846347190650215
best_error: 13.846347186827485
best_error: 13.004400893234191
best_error: 13.004400890806977
best_error: 13.004400889404419
best_error: 13.00440088334832
best_error: 12.914452306892517
best_error: 12.914452241248167
best_error: 12.511853734555189
best_error: 12.511853669312195
best_error: 12.37922309972382
best_error: 12.37922288385963
best_error: 12.3204639392752
best_error: 12.320463928967351
best_error: 12.235563708627794
best_error: 12.235563703061391
best_error: 12.235563702357357
best_error: 12.206008764054443
best_error: 12.206008716204437
best_error: 12.13210771744449
best_error: 12.132107693669674
best_error: 12.103391743951835
best_error: 12.103391712920645
best_error: 12.066075766343774
best_error: 12.066075754994657
best_error: 12.050266531100743
best_error: 12.050266518782301
best_error: 12.04794826966224
best_error: 12.04794824488662
best_error: 12.026248956699526
best_error: 12.02624893719629
best_error: 12.012270046794796
best_error: 12.012270027478293
best_error: 11.97539918890999
best_error: 11.975399170388307
best_error: 11.937280707067755
best_error: 11.937280694535907
best_error: 11.92043509778712
best_error: 11.920435042505716
best_error: 11.919898853798905
best_error: 11.919898838368066
best_error: 11.913073921480068
best_error: 11.913073904627813
best_error: 11.855249882773073
best_error: 11.855249827068251
best_error: 11.67013124840504
best_error: 11.670131201476249
best_error: 11.616795789880987
best_error: 11.61679549222875
best_error: 11.6031655034084
best_error: 11.603165498005385
best_error: 11.603165496594718
best_error: 11.529017431343195
best_error: 11.529017421765062
best_error: 11.47223083433599
best_error: 11.472230826553321
best_error: 11.31609148879905
best_error: 11.316091443616639
best_error: 11.167476503489896
best_error: 11.167476465850527
best_error: 11.137307023299844
best_error: 11.137306696863867
best_error: 11.0805468938178
best_error: 11.080546888163239
best_error: 11.076368481548053
best_error: 11.076368475310373
best_error: 11.07265059541769
best_error: 11.072650588990646
best_error: 11.072175109192894
best_error: 11.072175102773116
best_error: 11.072173756301158
best_error: 11.072173731846187
best_error: 11.072170239159782
best_error: 11.072170232740069
best_error: 11.072169630672747
best_error: 11.072169624253034
best_error: 11.061473426938232
best_error: 11.06147340361079
best_error: 11.04527249641674
best_error: 11.045272494619905
best_error: 11.045272484095621
best_error: 11.031988658089022
best_error: 11.031988639796204
best_error: 11.02709725693325
best_error: 11.02709720712343
best_error: 11.026304478994492
best_error: 11.026304124810306
best_error: 11.025877048426448
best_error: 11.025876991535771
best_error: 11.025767283228841
best_error: 11.025767226322962
best_error: 11.025759140945349
best_error: 11.025758786693828
best_error: 11.023441902677751
best_error: 11.023441889818415
best_error: 11.023244872993882
best_error: 11.023244860148267
best_error: 11.023220756053238
best_error: 11.02322074201291
best_error: 11.023173655987657
best_error: 11.023173499041619
best_error: 11.02304569613786
best_error: 11.023045683295406
best_error: 11.022661541518762
best_error: 11.022661528645472
best_error: 11.022452852767136
best_error: 11.022452839896552
best_error: 11.022346340930417
best_error: 11.022346328061218
best_error: 11.02229161157106
best_error: 11.022291598702566
best_error: 11.02226348080736
best_error: 11.02226346793923
best_error: 11.022263199195239
best_error: 11.022263114162843
best_error: 11.022261699549508
best_error: 11.022261686681375
best_error: 11.022260200451681
best_error: 11.02226018758354
best_error: 11.022259879311008
best_error: 11.022259866442864
best_error: 11.022259735831586
best_error: 11.02225972296346
best_error: 11.022259656146742
best_error: 11.022259643278598
best_error: 11.022259623891891
best_error: 11.022259611023753
best_error: 11.022259609644106
best_error: 11.02225959677597
