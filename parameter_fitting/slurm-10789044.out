ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.990597767105573
best_error: 9.990597759797556
best_error: 9.917238108146428
best_error: 9.917238098658686
best_error: 5.06021412207249
best_error: 5.060213726066612
best_error: 3.070990801180052
best_error: 3.0709905700782096
best_error: 2.8528977401991327
best_error: 2.852897565017803
best_error: 2.7861248254955235
best_error: 2.7861248215856
best_error: 2.7861246781550495
best_error: 2.5869508958316723
best_error: 2.586950732256532
best_error: 2.550058561043166
best_error: 2.5500583944424506
best_error: 2.5339782221696403
best_error: 2.5339780531424196
best_error: 2.5232870098060793
best_error: 2.5232868393404813
best_error: 2.522557338339097
best_error: 2.522557167650805
best_error: 2.522243475579976
best_error: 2.5222433048466417
best_error: 2.5220543243241025
best_error: 2.522054153563635
best_error: 2.5220452593806364
best_error: 2.522045088619093
best_error: 2.5220404560705436
best_error: 2.5220402853084183
best_error: 2.5220374701905737
best_error: 2.522037299428093
best_error: 2.522035787213059
best_error: 2.5220356164503746
best_error: 2.5220347816671094
best_error: 2.522034610904309
best_error: 2.5220341819919394
best_error: 2.5220340112290653
best_error: 2.522033838815048
best_error: 2.522033668052134
best_error: 2.522033568517489
best_error: 2.522033397754538
best_error: 2.522033357188765
best_error: 2.522033356950523
best_error: 2.5220333325772195
best_error: 2.5105867018598618
best_error: 2.5105865281745934
best_error: 2.476746706195425
best_error: 2.476746513488483
best_error: 2.451163503307029
best_error: 2.4511632785178943
best_error: 2.377374319709274
best_error: 2.3773740892071524
best_error: 2.3616508529311258
best_error: 2.3616507768937534
best_error: 2.3497561371922644
best_error: 2.349755904890563
best_error: 2.3444252646906807
best_error: 2.344425031846103
best_error: 2.3443441454701155
best_error: 2.344343912617334
best_error: 2.298779158522164
best_error: 2.2987790896832823
best_error: 2.297111026698227
best_error: 2.2971109675577064
best_error: 2.2956940169765936
best_error: 2.295693953538822
best_error: 2.2947422361437586
best_error: 2.2947421725984514
best_error: 2.291637178698682
best_error: 2.2916371114447376
best_error: 2.2855685548488234
best_error: 2.2855684879960045
best_error: 2.2749934111885546
best_error: 2.2749933462093463
best_error: 2.272928819823507
best_error: 2.2729287561573726
best_error: 2.2500614399038703
best_error: 2.2500612007661367
best_error: 2.1641604331247644
best_error: 2.1641602512977784
best_error: 2.1513772512582254
best_error: 2.1513772069063126
best_error: 2.141158007935239
best_error: 2.141157823774007
best_error: 2.122165930738962
best_error: 2.1221658852038834
best_error: 2.121410567744802
best_error: 2.1214103769119865
best_error: 2.062953576152008
best_error: 2.0629535342271517
best_error: 1.9706486579704925
best_error: 1.9706486256518536
best_error: 1.9686558411836197
best_error: 1.9686558094203204
best_error: 1.8852085246443622
best_error: 1.8852085066759157
best_error: 1.8586824592219142
best_error: 1.8586824446675654
best_error: 1.8387033386888993
best_error: 1.8387033245742799
best_error: 1.8352043482320963
best_error: 1.8352043323992793
best_error: 1.8349009978411022
best_error: 1.83490098309623
best_error: 1.8349007911930113
best_error: 1.8280018323886633
best_error: 1.8280018168359824
best_error: 1.8014052717789628
best_error: 1.801405239777064
best_error: 1.801405063278534
best_error: 1.7879739685124565
best_error: 1.7879739400524897
best_error: 1.7879737570979555
best_error: 1.7775782253506955
best_error: 1.7775781975952323
best_error: 1.777578011780802
best_error: 1.7768310458097967
best_error: 1.7768310182723919
best_error: 1.7768308332082299
best_error: 1.7767247510978268
best_error: 1.7767247235638872
best_error: 1.7767245384806816
best_error: 1.7767163079360766
best_error: 1.7767162804024013
best_error: 1.7767160953176933
best_error: 1.776715931253314
best_error: 1.7767159037197293
best_error: 1.77671571863482
best_error: 1.7744465110940277
best_error: 1.7744464842717826
best_error: 1.7744462970872572
best_error: 1.7661321826617051
best_error: 1.76613215889432
best_error: 1.7661319642859077
best_error: 1.751138680367988
best_error: 1.7511386791550385
best_error: 1.7511384399810286
best_error: 1.750709735322865
best_error: 1.7507097336597361
best_error: 1.7507094957370213
best_error: 1.7505019273374347
best_error: 1.7505019237425001
best_error: 1.7505016918715857
best_error: 1.7504947490611293
best_error: 1.7504947457617912
best_error: 1.7504945131726655
best_error: 1.7504892360476298
best_error: 1.7504892327763908
best_error: 1.7504890001060998
best_error: 1.750480280198376
best_error: 1.7504802769779024
best_error: 1.7504800441611468
best_error: 1.7504778513751054
best_error: 1.7504778489661033
best_error: 1.7504776148062198
best_error: 1.7504529164441158
best_error: 1.7504529132290234
best_error: 1.7504526803908145
best_error: 1.7503481045198903
best_error: 1.7503481012792728
best_error: 1.7503478684910188
best_error: 1.7498315998276759
best_error: 1.749831596484611
best_error: 1.7498313638875365
best_error: 1.746866353648766
best_error: 1.746866349730202
best_error: 1.746866118189976
best_error: 1.74686185404236
best_error: 1.7468618501339723
best_error: 1.7468616185642292
best_error: 1.7468444016236222
best_error: 1.7468443977559902
best_error: 1.7468441660681933
best_error: 1.7467833323867201
best_error: 1.7467833286822585
best_error: 1.7467830965235436
best_error: 1.7467512727839383
best_error: 1.7467512694290446
best_error: 1.7467510363960237
best_error: 1.746745545471342
best_error: 1.7467455421548737
best_error: 1.7467453090118799
best_error: 1.7449210652299652
best_error: 1.7449210619105322
best_error: 1.7449208285289561
best_error: 1.7436786741506791
best_error: 1.7436786716287707
best_error: 1.7436784367754865
best_error: 1.7430913584915273
best_error: 1.7430913559686272
best_error: 1.7430911210383753
best_error: 1.7426547750608794
best_error: 1.7426547725372514
best_error: 1.7426545375497728
best_error: 1.7424671716617592
best_error: 1.742467169137818
best_error: 1.742466934125753
best_error: 1.7424490483722122
best_error: 1.7424490365895984
best_error: 1.7424489999267252
best_error: 1.7424482260263445
best_error: 1.7424482235039191
best_error: 1.742447988484903
best_error: 1.7424261043190477
best_error: 1.7424261017983835
best_error: 1.7424258667712609
best_error: 1.7424241258054312
best_error: 1.742424123284923
best_error: 1.7424238882570664
best_error: 1.7424231976906726
best_error: 1.7424231951702551
best_error: 1.7424229601420502
best_error: 1.7424226620595764
best_error: 1.7424226595391916
best_error: 1.7414160946853101
best_error: 1.7414160942583559
best_error: 1.7414158531642376
best_error: 1.741414400920155
best_error: 1.741414158559356
best_error: 1.7414039856667263
best_error: 1.7414037434937968
best_error: 1.741403476505413
best_error: 1.7414034764210449
best_error: 1.7414032344356827
best_error: 1.7414026704184924
best_error: 1.741402670344796
best_error: 1.7414024283280831
best_error: 1.741402219406213
best_error: 1.7414019772549008
best_error: 1.7414015584794276
best_error: 1.7414015584097737
best_error: 1.7414013163810624
