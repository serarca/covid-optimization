ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.302377179835087
best_error: 11.302377064539176
best_error: 10.225687026596328
best_error: 10.225686828434256
best_error: 9.204445157887578
best_error: 9.20444490578052
best_error: 8.693913139123378
best_error: 8.693912893283741
best_error: 8.54277081630773
best_error: 8.542770595573833
best_error: 7.15519806171749
best_error: 7.1551979617165
best_error: 7.155197907779734
best_error: 7.132287327083165
best_error: 7.1322872258004715
best_error: 7.132287172718222
best_error: 7.114650099717693
best_error: 7.114649996588725
best_error: 7.114649945067745
best_error: 7.105908996347486
best_error: 7.105908893453533
best_error: 7.105908841467474
best_error: 7.100756425296501
best_error: 7.1007563218669025
best_error: 7.100756270332665
best_error: 7.09664297391081
best_error: 7.096642870054302
best_error: 7.0966428188800865
best_error: 7.0948175286622215
best_error: 7.094817424616446
best_error: 7.094817373601768
best_error: 7.094713198662363
best_error: 7.094713094605776
best_error: 7.0947130436002315
best_error: 7.0946401775895005
best_error: 7.0946400735253405
best_error: 7.094640022526155
best_error: 7.094599857392007
best_error: 7.094599753323664
best_error: 7.094599702328005
best_error: 7.094571165402996
best_error: 7.094571061331675
best_error: 7.094571010338515
best_error: 7.094555739237266
best_error: 7.094555635164352
best_error: 7.094555584172538
best_error: 7.094544507696821
best_error: 7.094544403622746
best_error: 7.094544352631907
best_error: 7.0945386951098435
best_error: 7.094538591035156
best_error: 7.094538540044828
best_error: 7.09453433083654
best_error: 7.094534226761404
best_error: 7.094534175771479
best_error: 7.09453070110319
best_error: 7.09453059702769
best_error: 7.094530546038049
best_error: 7.09453006798992
best_error: 7.094529963914346
best_error: 7.09452991292477
best_error: 7.094529770345443
best_error: 7.0945296662698425
best_error: 7.094529615280305
best_error: 7.094529530986912
best_error: 7.094529426911277
best_error: 7.094529375921752
best_error: 7.0945292723341655
best_error: 6.181850342600523
best_error: 6.181850159516387
best_error: 5.5409707519814955
best_error: 5.540970396476351
best_error: 5.508597919814024
best_error: 5.508597575039835
best_error: 5.395306983887325
best_error: 5.3953066776665075
best_error: 5.331672438408539
best_error: 5.331672140938764
best_error: 5.299471633760731
best_error: 5.299471346194186
best_error: 5.239180261003423
best_error: 5.239179977951023
best_error: 5.196614752951505
best_error: 5.1966144774671115
best_error: 5.158963109343205
best_error: 5.158962832326182
best_error: 5.1346719458402195
best_error: 5.134671668057818
best_error: 5.122277603376981
best_error: 5.122277325099944
best_error: 4.517505409723252
best_error: 4.517505047937021
best_error: 4.503830894398307
best_error: 4.503830539703932
best_error: 4.454404773089926
best_error: 4.454404385606227
best_error: 4.453005263510683
best_error: 4.453004871127623
best_error: 4.299070538345811
best_error: 4.299070362821056
best_error: 4.256186297570927
best_error: 4.25618589106535
best_error: 4.238588999509032
best_error: 4.238588588613544
best_error: 4.233658830689678
best_error: 4.233658420029089
best_error: 4.227817189146507
best_error: 4.227816778780093
best_error: 4.226178782802315
best_error: 4.226178611270885
best_error: 4.2253988570608945
best_error: 4.225398446317287
best_error: 4.225241721941786
best_error: 4.225241550432553
best_error: 4.225122609309851
best_error: 4.22512219852317
best_error: 4.225097811928022
best_error: 4.225097401137472
best_error: 4.2250916210629
best_error: 4.225091210271401
best_error: 4.225089391627635
best_error: 4.225088980835768
best_error: 4.225088813299809
best_error: 4.225088641794146
best_error: 4.225088516630249
best_error: 4.225088142635508
best_error: 4.225088126303985
best_error: 4.225088066190524
best_error: 4.225088036645316
best_error: 4.159576551281581
best_error: 4.159576182309628
best_error: 4.146307877219494
best_error: 4.146307516369479
best_error: 4.012181609947123
best_error: 4.01218123960678
best_error: 4.004254431786215
best_error: 4.004254288953762
best_error: 3.9987681938778565
best_error: 3.998767823131793
best_error: 3.9937713336032092
best_error: 3.993770962221847
best_error: 3.9931645475185507
best_error: 3.9931641760600525
best_error: 3.993065183731822
best_error: 3.9930648122606724
best_error: 3.9930448576135675
best_error: 3.9930444861398353
best_error: 3.993043476879305
best_error: 3.9930434228444196
best_error: 3.993043390170471
best_error: 3.9930433229135742
best_error: 3.9930432688786963
best_error: 3.936759281373961
best_error: 3.9367588596150878
best_error: 3.890339742890215
best_error: 3.8903392924064244
best_error: 3.822422458722348
best_error: 3.8224219983828376
best_error: 3.8081337407001907
best_error: 3.8081332788223845
best_error: 3.7984407630367194
best_error: 3.7984403003871163
best_error: 3.79142552989191
best_error: 3.791425066607296
best_error: 3.78576873079465
best_error: 3.785768267455925
best_error: 3.7815260148238767
best_error: 3.781525552364731
best_error: 3.7774883292421375
best_error: 3.777487867533954
best_error: 3.7734835093247203
best_error: 3.7734830512308224
best_error: 3.7705075847754754
best_error: 3.7705071257159615
best_error: 3.7696750037471785
best_error: 3.769674544342683
best_error: 3.768930749598449
best_error: 3.7689302908116407
best_error: 3.768578145510536
best_error: 3.7685776865777774
best_error: 3.768485677408857
best_error: 3.7684852184378372
best_error: 3.7684485606594436
best_error: 3.768448101860281
best_error: 3.768412058767514
best_error: 3.7684119488490566
best_error: 3.768411938668174
best_error: 3.7684100114395673
best_error: 3.768409552366113
best_error: 3.7684083350699353
best_error: 3.7684078759952433
best_error: 3.768407067247209
best_error: 3.7684066081715817
best_error: 3.7684059623372232
best_error: 3.7684055032608033
best_error: 3.7684048568654216
best_error: 3.76840439778816
best_error: 3.7684037932492025
best_error: 3.7684033341711602
best_error: 3.768403121242607
best_error: 3.768402662164079
