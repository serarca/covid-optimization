ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.96823628470917
best_error: 12.968236258709114
best_error: 12.968236246321606
best_error: 12.88780408494064
best_error: 12.887804053613305
best_error: 12.887804040508303
best_error: 11.16103857002694
best_error: 11.161038391066361
best_error: 11.161038390147215
best_error: 8.117755313683226
best_error: 8.117754960272388
best_error: 7.783446085541819
best_error: 7.783445871376933
best_error: 7.768102485919192
best_error: 7.768102232259022
best_error: 7.7641238887549795
best_error: 7.764123668427476
best_error: 7.161158231378045
best_error: 7.161157990514662
best_error: 6.44407529079594
best_error: 6.44407495225164
best_error: 6.27638151069971
best_error: 6.276381253451781
best_error: 5.551729307830321
best_error: 5.551729050057198
best_error: 5.4756069692436
best_error: 5.4756067057284055
best_error: 5.442078489554001
best_error: 5.442078222225044
best_error: 5.440182168467963
best_error: 5.44018190092039
best_error: 5.439564794031275
best_error: 5.439564526412527
best_error: 5.43943392693872
best_error: 5.439433620040115
best_error: 5.439421764099704
best_error: 5.4394214962333445
best_error: 5.3688613623830905
best_error: 5.368861078447959
best_error: 4.955324958867125
best_error: 4.955324737246595
best_error: 4.87400021426319
best_error: 4.873999649377503
best_error: 4.865881718659253
best_error: 4.865881162368343
best_error: 4.7661393209222815
best_error: 4.766138873632526
best_error: 4.757324070725382
best_error: 4.757323631394804
best_error: 4.75178629954819
best_error: 4.751785865863951
best_error: 4.749736431172062
best_error: 4.749735999461204
best_error: 4.74534129132042
best_error: 4.745340866102276
best_error: 4.718912866923985
best_error: 4.718912440914915
best_error: 4.714083189166
best_error: 4.714082762572298
best_error: 4.71105724877927
best_error: 4.711056821819463
best_error: 4.71080648798919
best_error: 4.710806060998977
best_error: 4.710768027712376
best_error: 4.710767600717498
best_error: 4.710743958554104
best_error: 4.7107435315563
best_error: 4.710742300515922
best_error: 4.710741873517927
best_error: 4.710741836834596
best_error: 4.710741684076279
best_error: 4.710741598925006
best_error: 4.7107415989249874
best_error: 4.710741598920357
best_error: 4.71074157938326
best_error: 4.542978201057868
best_error: 4.542977728651861
best_error: 4.372124717193137
best_error: 4.372124280874938
best_error: 4.365379286957896
best_error: 4.365378851735505
best_error: 4.3648342208296445
best_error: 4.364833785613178
best_error: 4.364525605223722
best_error: 4.364525356211579
best_error: 4.359436510575314
best_error: 4.3594362632108075
best_error: 4.289130980069807
best_error: 4.289130740172559
best_error: 4.260813088574614
best_error: 4.260812929160259
best_error: 4.214864211539783
best_error: 4.21486399595714
best_error: 4.123107577777999
best_error: 4.123107364047418
best_error: 3.9894802052922773
best_error: 3.9894800332343987
best_error: 3.967389455376037
best_error: 3.9673890906944376
best_error: 3.8868992850265274
best_error: 3.8868989333436854
best_error: 3.886064687218952
best_error: 3.8860645295677285
best_error: 3.8845943864357313
best_error: 3.884594034528469
best_error: 3.8766930428888924
best_error: 3.876692973922184
best_error: 3.8766928819675304
best_error: 3.8389060775022354
best_error: 3.838905960817521
best_error: 3.7973234247944085
best_error: 3.7973230909812554
best_error: 3.606285232810115
best_error: 3.6062848644099645
best_error: 3.6010559346994446
best_error: 3.601055516918368
best_error: 3.587052015527837
best_error: 3.587051519275448
best_error: 3.2494795689496927
best_error: 3.2494791248397052
best_error: 3.217659621718476
best_error: 3.2176591768142915
best_error: 3.213673912414476
best_error: 3.2136734677711694
best_error: 3.2117189612810515
best_error: 3.211718516360828
best_error: 3.210481416189073
best_error: 3.210480971093598
best_error: 3.209993810046291
best_error: 3.2099937913343606
best_error: 3.2099936436140006
best_error: 3.209991814513149
best_error: 3.209991369348372
best_error: 3.2000507863912553
best_error: 3.200050770900169
best_error: 3.2000506199239194
best_error: 3.1992326449640665
best_error: 3.1992322000832694
best_error: 3.190914806274069
best_error: 3.1909147927128254
best_error: 3.190914639788561
best_error: 3.190575227260849
best_error: 3.1905747822945605
best_error: 3.1844676661387483
best_error: 3.1844676548596036
best_error: 3.184467499568665
best_error: 3.1841119171557173
best_error: 3.184111471127798
best_error: 3.17930447002612
best_error: 3.1793040240644084
best_error: 3.179192040653531
best_error: 3.179191594676823
best_error: 3.1791889213799456
best_error: 3.1791884754028175
best_error: 3.1791880705838986
best_error: 3.17918762460667
best_error: 3.179187527302842
best_error: 3.1791874959326085
best_error: 3.1788853165192297
best_error: 3.1788853053391355
best_error: 3.178885149874628
best_error: 3.1779806177368926
best_error: 3.177980605627
best_error: 3.174781025979059
best_error: 3.174780567233684
best_error: 3.1746091515304715
best_error: 3.1746086870785737
best_error: 3.1743238904507756
best_error: 3.174323426007591
best_error: 3.174231125532402
best_error: 3.1742306610920594
best_error: 3.1742205180466367
best_error: 3.174220513126082
best_error: 3.1742158473429707
best_error: 3.1742158456552105
best_error: 3.1742158141642047
best_error: 3.174184416547925
best_error: 3.1741839475687463
