ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 13.00814477907814
best_error: 13.008144590781017
best_error: 11.195736753728124
best_error: 11.195736706147713
best_error: 10.749309376686858
best_error: 10.749309297245036
best_error: 9.727032615497567
best_error: 9.727032449661593
best_error: 9.186625589060547
best_error: 9.18662551545274
best_error: 9.18662545163573
best_error: 9.114714546965256
best_error: 9.11471448724902
best_error: 9.114714401324624
best_error: 8.736728071314424
best_error: 8.736728002342817
best_error: 8.736727921057575
best_error: 8.416859039239762
best_error: 8.416858980003353
best_error: 8.416858885200787
best_error: 8.190849455109618
best_error: 8.190849410538
best_error: 8.19084929729219
best_error: 8.047274617869729
best_error: 8.04727458009793
best_error: 8.047274458735913
best_error: 7.95591984650614
best_error: 7.955919809771382
best_error: 7.955919685746123
best_error: 7.88385872978902
best_error: 7.88385869389059
best_error: 7.883858567511555
best_error: 7.845903532627847
best_error: 7.845903496428528
best_error: 7.8459033697399265
best_error: 7.815497393838176
best_error: 7.8154973557984615
best_error: 7.815497230216529
best_error: 7.800312602099187
best_error: 7.800312562551234
best_error: 7.800312438102439
best_error: 7.787815625304814
best_error: 7.787815584523127
best_error: 7.787815460999813
best_error: 7.785355558426586
best_error: 7.785355517403997
best_error: 7.78535539406392
best_error: 7.783698435977207
best_error: 7.783698394792484
best_error: 7.783698271575689
best_error: 7.782676022057774
best_error: 7.782675980773088
best_error: 7.782675857632333
best_error: 7.7820051660933505
best_error: 7.782005124743073
best_error: 7.782005001652198
best_error: 7.7815764708950805
best_error: 7.781576429502927
best_error: 7.781576306443848
best_error: 7.781306015949342
best_error: 7.781305974530746
best_error: 7.781305851491797
best_error: 7.781123859952661
best_error: 7.781123818516271
best_error: 7.781123695490834
best_error: 7.781015818283014
best_error: 7.781015776836073
best_error: 7.781015653818669
best_error: 7.780927332911108
best_error: 7.780927291455522
best_error: 7.78092716844469
best_error: 7.780856419131057
best_error: 7.780856377668539
best_error: 7.780856254662957
best_error: 7.780824881295042
best_error: 7.780824839829442
best_error: 7.780824716826223
best_error: 7.780822218124342
best_error: 7.780822176658485
best_error: 7.780822053655455
best_error: 7.780820244621337
best_error: 7.780820203155285
best_error: 7.780820080152413
best_error: 7.78081847278881
best_error: 7.780818431322593
best_error: 7.7808183083198585
best_error: 7.780818069883169
best_error: 7.7808180284169115
best_error: 7.780817905414183
best_error: 7.780817861319994
best_error: 7.780817819853715
best_error: 7.780817696851003
best_error: 7.780817690970611
best_error: 7.780817526501619
best_error: 5.6307842633377465
best_error: 5.630784021959304
best_error: 5.217218171456052
best_error: 5.217217743715381
best_error: 5.176450251925764
best_error: 5.176449845026457
best_error: 4.985224739504309
best_error: 4.985224399960467
best_error: 4.971533583161333
best_error: 4.971533244920777
best_error: 4.964069784192064
best_error: 4.9640694455490255
best_error: 4.957927602109933
best_error: 4.957927265829266
best_error: 4.954717756803725
best_error: 4.954717420150551
best_error: 4.952507616698562
best_error: 4.952507279635432
best_error: 4.950730961051413
best_error: 4.950730623890773
best_error: 4.94958223939084
best_error: 4.949581904379389
best_error: 4.948646028082524
best_error: 4.948645692896487
best_error: 4.948022738451327
best_error: 4.9480224031491185
best_error: 4.946962651472947
best_error: 4.94696231598881
best_error: 4.946116112464857
best_error: 4.946115776835493
best_error: 4.9457285747078945
best_error: 4.945728239012057
best_error: 4.945554713225372
best_error: 4.9455543774997235
best_error: 4.945505242701607
best_error: 4.945504906967476
best_error: 4.945492134953106
best_error: 4.945491799216719
best_error: 4.945487791279657
best_error: 4.945487455542537
best_error: 4.945485199489547
best_error: 4.945484863751988
best_error: 4.945483275204943
best_error: 4.945482939467039
best_error: 4.945482253270176
best_error: 4.945481917532103
best_error: 4.9454809212527175
best_error: 4.945480585514424
best_error: 4.945480326645605
best_error: 4.945480324578286
best_error: 4.945480313496375
best_error: 4.945480308971203
best_error: 4.945480300020803
best_error: 4.945480297895993
best_error: 4.945480210360491
best_error: 4.940621472438233
best_error: 4.940621136107888
best_error: 4.922005726959763
best_error: 4.922005590891148
best_error: 4.820494983951672
best_error: 4.820494859367148
best_error: 4.7481880670652465
best_error: 4.748187940077407
best_error: 4.7300768711484995
best_error: 4.7300767431744095
best_error: 4.727646727110181
best_error: 4.7276465989622345
best_error: 4.7266360128850735
best_error: 4.726635884763949
best_error: 4.7261748138066215
best_error: 4.72617468569787
best_error: 4.725949475224752
best_error: 4.725949347120508
best_error: 4.725903674276631
best_error: 4.725903546173392
best_error: 4.7258848237677995
best_error: 4.72588469566487
best_error: 4.725884278277564
best_error: 4.725884150174613
best_error: 4.725884086801246
best_error: 4.721623062677568
best_error: 4.721622935376915
best_error: 4.706420532932789
best_error: 4.706420408539005
best_error: 4.670434835390084
best_error: 4.670434715636937
best_error: 4.5935431282634624
best_error: 4.5935426871016585
best_error: 4.549575453609391
best_error: 4.5495749936282035
best_error: 4.544535899734553
best_error: 4.5445354404291045
best_error: 4.542621032281109
best_error: 4.542620572728837
best_error: 4.5417747547907625
best_error: 4.541774638902279
best_error: 4.541669232487302
best_error: 4.541668772805413
best_error: 4.540299207125584
best_error: 4.54029874727434
best_error: 4.535282122195326
best_error: 4.535282006043689
best_error: 4.535020060041734
best_error: 4.535019599529155
best_error: 4.492846681309841
best_error: 4.492846566588234
best_error: 4.483251822007217
best_error: 4.48325134217527
best_error: 4.417002158895093
best_error: 4.417002046729001
best_error: 4.415142758519901
best_error: 4.415142250063093
best_error: 4.410039500538734
best_error: 4.410038963650997
best_error: 4.401450445160786
best_error: 4.401449911712668
best_error: 4.39057903982065
best_error: 4.39057850812989
best_error: 4.384162498814755
best_error: 4.384161969309411
best_error: 4.380378362672994
best_error: 4.380377834119383
best_error: 4.37812082064419
best_error: 4.378120291904064
best_error: 4.37670667539439
best_error: 4.376706146538108
best_error: 4.375800736408975
best_error: 4.375800208896798
best_error: 4.373579521042549
best_error: 4.3735789947420365
best_error: 4.373462355369934
best_error: 4.373461829061011
best_error: 4.37342935882803
best_error: 4.37342925294963
best_error: 4.330842267617362
best_error: 4.330841732447298
best_error: 4.330703103612862
best_error: 4.330702568429136
best_error: 4.330697457112189
best_error: 4.330697353238633
best_error: 4.289381230892106
best_error: 4.289381134820443
best_error: 4.2705271450894235
best_error: 4.270526614081193
best_error: 4.262178951639388
best_error: 4.262178423774577
best_error: 4.258793904791345
best_error: 4.258793378063539
best_error: 4.257232046817294
best_error: 4.257231519968669
best_error: 4.256480817348991
best_error: 4.256480290442322
best_error: 4.256112346380952
best_error: 4.256111819445807
best_error: 4.255997633060281
best_error: 4.255997533847986
best_error: 4.255959722243443
best_error: 4.255959195296798
best_error: 4.255955836409904
best_error: 4.255955309462984
best_error: 4.25595398399644
best_error: 4.255953457049365
best_error: 4.255953079037799
best_error: 4.255952552090665
best_error: 4.255948123717678
best_error: 4.255947596737108
best_error: 4.255945178159809
best_error: 4.255944651179024
best_error: 4.255943724645559
best_error: 4.255943435271901
best_error: 4.255943400484464
best_error: 4.255943383641684
best_error: 4.255943373665264
best_error: 4.255943369640442
best_error: 4.255943364553008
best_error: 4.255943333030974
