ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 20.49666577363854
best_error: 20.496665503406618
best_error: 13.323746737678718
best_error: 13.323746733486766
best_error: 13.323746721765167
best_error: 13.265006621348768
best_error: 13.265006616657512
best_error: 13.265006613308802
best_error: 12.94978143929156
best_error: 12.949781431803206
best_error: 12.949781426970816
best_error: 12.113317592047244
best_error: 12.11331758150208
best_error: 12.091509887129837
best_error: 12.09150987678009
best_error: 11.887093519532147
best_error: 11.887093503776248
best_error: 10.949555178818095
best_error: 10.949555068635174
best_error: 8.246596437980674
best_error: 8.246596245512336
best_error: 7.750510443453164
best_error: 7.750510300949582
best_error: 7.750510283114447
best_error: 7.645809379925988
best_error: 7.645809250331463
best_error: 7.645809216020263
best_error: 7.568120977720056
best_error: 7.5681208482848685
best_error: 7.568120811057952
best_error: 7.54045447082721
best_error: 7.540454340211721
best_error: 7.540454303056309
best_error: 7.524773153785528
best_error: 7.524773023786558
best_error: 7.524772985687854
best_error: 7.5076993286242715
best_error: 7.507699197709678
best_error: 7.507699159884431
best_error: 7.500700675102676
best_error: 7.500700543228446
best_error: 7.500700506096466
best_error: 7.496435333665886
best_error: 7.4964352012089
best_error: 7.496435164497445
best_error: 7.491582644253885
best_error: 7.491582512562749
best_error: 7.491582474943735
best_error: 7.48834808142943
best_error: 7.488347949310675
best_error: 7.488347912015517
best_error: 7.487181038740093
best_error: 7.487180906467242
best_error: 7.4871808692887605
best_error: 7.486484452743195
best_error: 7.4864843203783895
best_error: 7.48648428326951
best_error: 7.485869414007101
best_error: 7.485869281561155
best_error: 7.485869244513717
best_error: 7.485581694151177
best_error: 7.48558156166727
best_error: 7.485581524648528
best_error: 7.485327001104651
best_error: 7.485326868587153
best_error: 7.485326831593841
best_error: 7.4852136394323
best_error: 7.485213506898756
best_error: 7.485213470221775
best_error: 7.485096810336146
best_error: 7.485096677787172
best_error: 7.485096641121844
best_error: 7.4850567113453295
best_error: 7.485056578791065
best_error: 7.485056542129756
best_error: 7.485033187795915
best_error: 7.485033055238549
best_error: 7.485033018579571
best_error: 7.4850121962455765
best_error: 7.485012063685431
best_error: 7.485012027028555
best_error: 7.48500253169215
best_error: 7.485002399130729
best_error: 7.4850023624748285
best_error: 7.484998753467519
best_error: 7.484998620905508
best_error: 7.484998584249919
best_error: 7.484995369117879
best_error: 7.484995236555346
best_error: 7.4849951999000695
best_error: 7.4849936536419035
best_error: 7.484993521079111
best_error: 7.484993484423955
best_error: 7.484992113760274
best_error: 7.484991981197231
best_error: 7.484991944542206
best_error: 7.484991344196989
best_error: 7.484991211633832
best_error: 7.4849911749789015
best_error: 7.484990650786993
best_error: 7.484990518223727
best_error: 7.484990481568843
best_error: 7.484990312894492
best_error: 7.484990180331177
best_error: 7.48499014367633
best_error: 7.484990006448069
best_error: 7.484989837229859
best_error: 7.3875483588933495
best_error: 7.387548220333315
best_error: 6.826614720288467
best_error: 6.826614572905218
best_error: 5.593453893558737
best_error: 5.593453448310153
best_error: 5.581722474818625
best_error: 5.581722005834481
best_error: 5.5583195457191925
best_error: 5.558319072043583
best_error: 5.532033317009259
best_error: 5.5320328467087005
best_error: 5.526409899347914
best_error: 5.526409427095368
best_error: 5.504666311260843
best_error: 5.50466583874693
best_error: 5.442511328585067
best_error: 5.442510895138957
best_error: 5.442390998243598
best_error: 5.44239056467897
best_error: 5.4418054119950785
best_error: 5.441804979823794
best_error: 5.440800487974286
best_error: 5.440800056075295
best_error: 5.43658849847804
best_error: 5.43658806991477
best_error: 5.436455714376159
best_error: 5.4364552884114925
best_error: 5.425006521122782
best_error: 5.425006093445477
best_error: 5.420144286955738
best_error: 5.420143857286844
best_error: 5.417209281890445
best_error: 5.417209147298264
best_error: 5.416638211144574
best_error: 5.4166377782818635
