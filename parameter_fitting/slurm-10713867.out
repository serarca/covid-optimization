ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 13.332125069362345
best_error: 13.332125064527002
best_error: 13.332125054826466
best_error: 12.695097928583076
best_error: 12.695097906535688
best_error: 12.695097880773782
best_error: 10.70092631982848
best_error: 10.700926235451004
best_error: 10.530641244012994
best_error: 10.530641148847018
best_error: 9.815156479103324
best_error: 9.815156357641952
best_error: 9.55118176743651
best_error: 9.551181764532942
best_error: 9.551181717552485
best_error: 9.317533578874531
best_error: 9.31753351665323
best_error: 9.317533506986035
best_error: 8.682141610120901
best_error: 8.682141222242109
best_error: 5.053148646484633
best_error: 5.053148624740054
best_error: 5.0531485933125335
best_error: 4.9548798086217705
best_error: 4.9548797797314625
best_error: 4.954879773213017
best_error: 4.937654515045681
best_error: 4.937654486414628
best_error: 4.937654479020905
best_error: 4.933313802158029
best_error: 4.933313774150193
best_error: 4.933313765955585
best_error: 4.931854550161486
best_error: 4.931854522178507
best_error: 4.931854513898401
best_error: 4.931232389183272
best_error: 4.931232361212542
best_error: 4.931232352894762
best_error: 4.931065734286439
best_error: 4.931065033731668
best_error: 4.930882766351406
best_error: 4.930882738387547
best_error: 4.930882730048605
best_error: 4.930847931267435
best_error: 4.930847903304238
best_error: 4.930847894963209
best_error: 4.930843686106565
best_error: 4.930843658143479
best_error: 4.930843649802165
best_error: 4.930840751522798
best_error: 4.9308407235597524
best_error: 4.930840715218279
best_error: 4.930839450268023
best_error: 4.930839422305015
best_error: 4.930839413963451
best_error: 4.930838810702729
best_error: 4.930838679683157
best_error: 4.853270241809146
best_error: 4.853270227942794
best_error: 4.853270204431792
best_error: 4.853270202397312
best_error: 4.820059530284325
best_error: 4.820059527537987
best_error: 4.820059452421638
best_error: 4.802837967178794
best_error: 4.802837857253706
best_error: 4.741247467484868
best_error: 4.7412468438608695
best_error: 4.732785536062011
best_error: 4.732785181166925
best_error: 4.721390569142493
best_error: 4.721390183595007
best_error: 4.720877906315659
best_error: 4.720877906296424
best_error: 4.682003338200323
best_error: 4.6820029461520285
best_error: 4.591647879216021
best_error: 4.591647440034034
best_error: 4.579192573153194
best_error: 4.579192132392031
best_error: 4.572062030540166
best_error: 4.572061589472659
best_error: 4.568966903165749
best_error: 4.568966461694258
best_error: 4.568583121251407
best_error: 4.568583121232695
best_error: 4.568583119235713
best_error: 4.568583007815547
best_error: 4.544029005863498
best_error: 4.544028620869016
best_error: 4.512585030537004
best_error: 4.51258464939615
best_error: 4.511697533496146
best_error: 4.511697157489079
best_error: 4.5110780032129805
best_error: 4.511077634402977
best_error: 4.510835051382061
best_error: 4.510834682456215
best_error: 4.509714118260529
best_error: 4.509713748889367
best_error: 4.509149449317718
best_error: 4.509149079757334
best_error: 4.508934224412135
best_error: 4.508933854783674
best_error: 4.508890741877064
best_error: 4.508890741856104
best_error: 4.508890629319299
best_error: 4.508880181398094
best_error: 4.508879811756147
best_error: 4.508877369492342
best_error: 4.50887736947141
best_error: 4.508877256935023
best_error: 4.50887694632062
best_error: 4.50887657667773
best_error: 4.508857932183249
best_error: 4.50885756260319
best_error: 4.508823922633295
best_error: 4.5088235533014025
best_error: 4.508475481806814
best_error: 4.508475115762508
best_error: 4.508349986663072
best_error: 4.508349617752774
best_error: 4.508324738541473
best_error: 4.508324369865436
best_error: 4.508270639897624
best_error: 4.508270274327459
best_error: 4.508256267930028
best_error: 4.50825590245256
best_error: 4.508230058076879
best_error: 4.508229692723553
best_error: 4.508161770390336
best_error: 4.508161405267703
best_error: 4.508100534568758
best_error: 4.508100169606553
best_error: 4.50804637200265
best_error: 4.508046010821565
best_error: 4.508039586577295
best_error: 4.508039225453246
best_error: 4.508037075300834
best_error: 4.508036714196186
best_error: 4.508032194928043
best_error: 4.508032194906844
best_error: 4.5080320829244585
best_error: 4.508028485208609
best_error: 4.508028124186158
best_error: 4.507998347519022
best_error: 4.507997986314887
best_error: 4.50796040582451
best_error: 4.507960037323883
best_error: 4.507570783874435
best_error: 4.507570416066212
best_error: 4.507296611070538
best_error: 4.507296246813657
best_error: 4.507294052803992
best_error: 4.507294052782896
best_error: 4.507293940959204
best_error: 4.507286837154858
best_error: 4.507286472937535
best_error: 4.50728206329855
best_error: 4.507282063277452
best_error: 4.507281951446117
best_error: 4.5072814367907545
best_error: 4.507281384296537
best_error: 4.507281325482121
best_error: 4.507246871955118
best_error: 4.50724650754864
best_error: 4.507243140916113
best_error: 4.507243078127737
best_error: 4.507243024034132
best_error: 4.507243024034128
