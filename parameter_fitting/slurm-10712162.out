ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 13.483562726589769
best_error: 13.483562714190501
best_error: 13.48356266838124
best_error: 10.876417846665161
best_error: 10.876417763038848
best_error: 7.776978772853116
best_error: 7.776978598028609
best_error: 6.874216048148071
best_error: 6.874215932251835
best_error: 6.325486371615471
best_error: 6.325486270467634
best_error: 5.998522958023137
best_error: 5.998522880655699
best_error: 5.998522868956379
best_error: 5.754545515601499
best_error: 5.7545454494271535
best_error: 5.7545454279892745
best_error: 5.625868870372722
best_error: 5.625868804075067
best_error: 5.625868781900921
best_error: 5.5687307062625235
best_error: 5.568730637946391
best_error: 5.568730616877631
best_error: 5.55822470915127
best_error: 5.558224641120165
best_error: 5.558224619782773
best_error: 5.5453410932707845
best_error: 5.545341024610916
best_error: 5.545341003649953
best_error: 5.544565464661552
best_error: 5.544565395963968
best_error: 5.54456537502557
best_error: 5.54449821867976
best_error: 5.5444981499789066
best_error: 5.544498129042463
best_error: 5.544446580160672
best_error: 5.544446511457301
best_error: 5.544446490522356
best_error: 5.544423636174658
best_error: 5.544423567470174
best_error: 5.544423546535905
best_error: 5.544418391215146
best_error: 5.54441832251041
best_error: 5.544418301576275
best_error: 5.5444149819265025
best_error: 5.544414913221601
best_error: 5.5444148922875645
best_error: 5.5444141520317665
best_error: 5.544414083326828
best_error: 5.544414062392829
best_error: 5.544413865073199
best_error: 5.544413796368241
best_error: 5.544413775434247
best_error: 5.544413686934163
best_error: 5.544413618229201
best_error: 5.544413597295214
best_error: 5.544413581822036
best_error: 5.544413492183068
best_error: 5.544413379945249
best_error: 5.54441330186649
best_error: 5.544413300204917
best_error: 5.5444132788638045
best_error: 5.54441303834456
best_error: 5.544413020249991
best_error: 5.544412249251415
best_error: 5.544412180546377
best_error: 5.54441215961245
best_error: 5.544411972882136
best_error: 5.544411904177089
best_error: 5.544411883243166
best_error: 5.544410867405498
best_error: 5.544410798700385
best_error: 5.544410777766544
best_error: 5.544406445506695
best_error: 5.544406376801363
best_error: 5.544406355867698
best_error: 5.544388758034807
best_error: 5.544388689328568
best_error: 5.544388668395703
best_error: 5.5443180101206355
best_error: 5.5443179414107835
best_error: 5.54431792048107
best_error: 5.544035050036763
best_error: 5.5440349813124445
best_error: 5.544034960395312
best_error: 5.542903714739927
best_error: 5.542903645957836
best_error: 5.542903625091105
best_error: 5.53838644618506
best_error: 5.538386377172655
best_error: 5.5383863565070435
best_error: 5.520446021765748
best_error: 5.520445951845494
best_error: 5.520445931975292
best_error: 5.450881086040047
best_error: 5.450881011903018
best_error: 5.450880995651479
best_error: 5.210310417207445
best_error: 5.210310316790636
best_error: 4.955774477364658
best_error: 4.955774270722717
best_error: 4.858613482492567
best_error: 4.858613285666215
best_error: 4.750749864632554
best_error: 4.750749697573572
best_error: 4.585203818685068
best_error: 4.58520370078891
best_error: 4.583553509958479
best_error: 4.583553391915963
best_error: 4.581971182032051
best_error: 4.581971063850924
best_error: 4.581169802001042
best_error: 4.581169683750353
best_error: 4.58040183363129
best_error: 4.580401715314334
best_error: 4.580017831299175
best_error: 4.580017712949241
best_error: 4.579649703162183
best_error: 4.579649584780732
best_error: 4.579469310879562
best_error: 4.579469192482693
best_error: 4.579443485098793
best_error: 4.579443366699721
best_error: 4.579418772812328
best_error: 4.579418654411143
best_error: 4.579406338737179
best_error: 4.579406220334924
best_error: 4.579394438401219
best_error: 4.579394319997943
best_error: 4.579388473945254
best_error: 4.579388355541475
best_error: 4.579382763231104
best_error: 4.5793826448268335
best_error: 4.579379922070296
best_error: 4.579379803665775
best_error: 4.579377199670796
best_error: 4.579377081266044
best_error: 4.579375864025748
best_error: 4.579375745620887
best_error: 4.579375476199381
best_error: 4.579375357794494
best_error: 4.579375104512139
best_error: 4.579374986107217
best_error: 4.579374922799069
best_error: 4.579374804394131
best_error: 4.579374792812661
best_error: 4.579374783572029
best_error: 4.57937477564452
best_error: 4.5697227316925595
best_error: 4.569722686378656
best_error: 4.533778026319963
best_error: 4.533777974516479
best_error: 4.51650772868478
best_error: 4.516507673762562
best_error: 4.508340071318748
best_error: 4.508339950771423
best_error: 4.506258321194568
best_error: 4.50625826440097
best_error: 4.496452985080075
best_error: 4.496452927735101
best_error: 4.486572863265314
best_error: 4.486572805364287
best_error: 4.477811486264456
best_error: 4.477811364856189
best_error: 4.46064480272474
best_error: 4.460644741691288
best_error: 4.416529802569121
best_error: 4.4165296799807425
best_error: 4.410534827767142
best_error: 4.410534761197583
best_error: 4.374276958684766
best_error: 4.3742768358505995
best_error: 4.374121503243606
best_error: 4.3722440309657635
best_error: 4.372243908110189
best_error: 4.371921588636953
best_error: 4.371921465777987
best_error: 4.371855157225278
best_error: 4.371846764038966
best_error: 4.371846641179333
best_error: 4.371839001128054
best_error: 4.371836491003005
best_error: 4.371630127308691
best_error: 4.371630004450171
best_error: 4.370806822269742
best_error: 4.37080669941612
best_error: 4.367524124599807
best_error: 4.367524001765913
best_error: 4.354470495891551
best_error: 4.3544703731386445
best_error: 4.314902080584236
best_error: 4.31490195811287
best_error: 4.134951223788456
best_error: 4.134951100575607
best_error: 4.0723856250026325
best_error: 4.072385502462673
best_error: 4.032681575275605
best_error: 4.032681450787898
best_error: 4.000728977308114
best_error: 4.000728855423263
best_error: 3.9797764674376133
best_error: 3.979776344554715
best_error: 3.96414277234537
best_error: 3.964142649859175
best_error: 3.951622384912187
best_error: 3.9516222613088816
best_error: 3.9437460122568635
best_error: 3.9437458879561254
best_error: 3.9354889387323766
best_error: 3.935488813704862
best_error: 3.9317640602017194
best_error: 3.931763934847808
best_error: 3.928543971106854
best_error: 3.928543845471808
best_error: 3.925824328862968
best_error: 3.925824202990992
best_error: 3.9245341502723936
best_error: 3.9245340242881825
best_error: 3.92342438246522
best_error: 3.9234242564692865
best_error: 3.923409650893764
best_error: 3.923409524896547
best_error: 3.9233998519075106
best_error: 3.923399725909446
best_error: 3.9233908552263563
best_error: 3.9233907292275125
best_error: 3.9233863307909065
best_error: 3.9233862047916777
best_error: 3.923381157639287
best_error: 3.9233810316396074
best_error: 3.923379313739349
best_error: 3.923379187739502
best_error: 3.923378253740932
best_error: 3.9233781277409947
best_error: 3.9233774111711766
best_error: 3.9233772851711817
best_error: 3.9233769076641334
best_error: 3.9233767816640794
best_error: 3.923376391309029
best_error: 3.9233762653089306
best_error: 3.9233761657312756
best_error: 3.9233760397311634
best_error: 3.923376023967923
best_error: 3.9233758979677926
best_error: 3.9233758852105334
best_error: 3.9233757592103933
best_error: 3.9233755958142758
best_error: 3.9233755921410336
best_error: 3.923375586119779
best_error: 3.9233755853578858
best_error: 3.9233755734534985
