ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.804052820113547
best_error: 10.804052818009575
best_error: 9.941458844205684
best_error: 9.941458804367247
best_error: 9.10501724172321
best_error: 9.105017147626487
best_error: 8.854982953586504
best_error: 8.854982744919718
best_error: 7.800107937734411
best_error: 7.800107753334071
best_error: 6.201769592320719
best_error: 6.201769552943615
best_error: 6.201769314690896
best_error: 6.195824441185642
best_error: 6.195824365323846
best_error: 6.195824175425979
best_error: 4.153026842567385
best_error: 4.153026762796213
best_error: 4.153026677491061
best_error: 3.878260347656531
best_error: 3.8782602781704583
best_error: 3.8782602195889946
best_error: 3.6995617561897856
best_error: 3.6995616933525106
best_error: 3.6995616380781895
best_error: 3.6090653495840694
best_error: 3.609065291580732
best_error: 3.609065231206129
best_error: 3.4750525343914713
best_error: 3.4750524788121533
best_error: 3.4750524120512076
best_error: 3.474912978352957
best_error: 3.474912966056852
best_error: 3.4532107567541663
best_error: 3.4532107283925857
best_error: 3.4532106089423484
best_error: 3.4359133945083995
best_error: 3.435913372680676
best_error: 3.4359132280691354
best_error: 3.3396705560658773
best_error: 3.339670539152275
best_error: 3.3396703935131296
best_error: 3.296634497077917
best_error: 3.2966344825742837
best_error: 3.2966343303019965
best_error: 3.2745529523717414
best_error: 3.2745529393698405
best_error: 3.274552783936623
best_error: 3.2618110100901783
best_error: 3.2618109972002607
best_error: 3.261810840246792
best_error: 3.252253534166374
best_error: 3.2522535221267255
best_error: 3.252253363267976
best_error: 3.2503827887722574
best_error: 3.2503827769145484
best_error: 3.250382617384758
best_error: 3.249667692709054
best_error: 3.249667680857897
best_error: 3.249667521241923
best_error: 3.2496165263555286
best_error: 3.249616514504849
best_error: 3.2496163548826997
best_error: 3.249602842136738
best_error: 3.2496028302861695
best_error: 3.2496026706623824
best_error: 3.249598142088028
best_error: 3.249598130237503
best_error: 3.2495979706131566
best_error: 3.2495951446384015
best_error: 3.249595132787916
best_error: 3.2495949731631883
best_error: 3.2495937095203695
best_error: 3.2495936976699
best_error: 3.2495935380449943
best_error: 3.2495926869245872
best_error: 3.2495926750741106
best_error: 3.2495925154491014
best_error: 3.249592244723213
best_error: 3.2495922328727493
best_error: 3.2495921954107017
best_error: 3.2491882804893817
best_error: 3.2491882631580915
best_error: 3.2339951225816685
best_error: 3.2339951026085565
best_error: 3.2280417314392387
best_error: 3.2280414952116847
best_error: 3.2277815755093933
best_error: 3.227781554005126
best_error: 3.2275544950600485
best_error: 3.227554473638736
best_error: 3.227536902270188
best_error: 3.227536880842303
best_error: 3.227534434002558
best_error: 3.227534197820341
best_error: 3.2275338809513094
best_error: 3.227533871557572
best_error: 3.227533863708999
best_error: 3.226215641785463
best_error: 3.2262154072767966
best_error: 3.2218691461077453
best_error: 3.221868917040216
best_error: 3.2207119485990567
best_error: 3.2207117211135823
best_error: 3.218027821379649
best_error: 3.218027592984595
best_error: 3.2107136924532225
best_error: 3.2107134583715644
best_error: 3.2032376827078064
best_error: 3.203237438095371
best_error: 3.1911995473677166
best_error: 3.1911992812024152
best_error: 3.1869571307603457
best_error: 3.1869571138554815
best_error: 3.1813858584059376
best_error: 3.1813855902260064
best_error: 3.1807005897938474
best_error: 3.1807005729122597
best_error: 3.1805282928988543
best_error: 3.180528025379838
best_error: 3.177662415438103
best_error: 3.1776621561311416
best_error: 3.1736891587257503
best_error: 3.1736888989138383
best_error: 3.170903360639508
best_error: 3.16272150729459
best_error: 3.162721257607263
best_error: 3.160661982617043
best_error: 3.1599516616460237
best_error: 3.1599516476865332
best_error: 3.159951441406421
best_error: 3.1541117230197155
best_error: 3.1541117171973125
best_error: 3.1541114852976744
best_error: 3.1495786351757373
best_error: 3.1436226244358894
best_error: 3.143622607242789
best_error: 3.1436224058059166
best_error: 3.132072854559097
best_error: 3.1308463678253213
best_error: 3.1308463368807185
best_error: 3.1308461582973797
best_error: 3.120478275500777
best_error: 3.1162988395674915
best_error: 3.1162988013315136
best_error: 3.1162986356718028
best_error: 3.105446849206102
best_error: 3.1054468054522966
best_error: 3.105446646711637
best_error: 3.1011757638684307
best_error: 3.1011757194123826
best_error: 3.101175560240971
best_error: 3.092563917802654
best_error: 3.08864939406417
best_error: 3.0886493450663397
best_error: 3.0886491902597055
best_error: 3.0570300935467616
best_error: 3.0570300184716848
best_error: 3.0570298911781313
best_error: 3.017667187225532
best_error: 3.017667151718266
best_error: 2.9805045480765653
best_error: 2.963265787019828
best_error: 2.9632657559028104
best_error: 2.9632655296366295
best_error: 2.9424006685940967
best_error: 2.9424006374917973
best_error: 2.942400407414566
best_error: 2.9419399284900027
best_error: 2.9419398971860913
best_error: 2.9419396674404994
best_error: 2.9418263180262936
best_error: 2.9418262866718736
best_error: 2.9418260570095747
best_error: 2.941789955758183
best_error: 2.9417899243875074
best_error: 2.9417896947520017
best_error: 2.9417770217942794
best_error: 2.941776990419393
best_error: 2.941776760791339
best_error: 2.941770035688684
best_error: 2.9417700043115462
best_error: 2.941769774687495
best_error: 2.941766299651011
best_error: 2.9417662682726555
best_error: 2.9417660386507585
best_error: 2.9417658222280636
best_error: 2.941765790849585
best_error: 2.9417655612279274
best_error: 2.941765482528008
best_error: 2.941765359503281
best_error: 2.94176535431943
best_error: 2.9417653492564533
best_error: 2.941765346242722
