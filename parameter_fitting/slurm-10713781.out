ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.681419192568274
best_error: 12.681419162385733
best_error: 12.681419146190084
best_error: 12.565871005477177
best_error: 12.565870968071604
best_error: 12.56587095060037
best_error: 11.006660019298774
best_error: 11.006659860781038
best_error: 11.006659846300604
best_error: 8.868273422959083
best_error: 8.868273137545314
best_error: 8.339705521224488
best_error: 8.339705272364856
best_error: 8.325262838353805
best_error: 8.325262612935504
best_error: 7.645832371350389
best_error: 7.6458321664637054
best_error: 6.3333051973185945
best_error: 6.3333049980771445
best_error: 6.036652021480554
best_error: 6.03665182206606
best_error: 5.946370496887088
best_error: 5.9463702966551555
best_error: 5.8996324645305105
best_error: 5.899632263687314
best_error: 5.868628602114251
best_error: 5.8686283979240415
best_error: 5.470261548367923
best_error: 5.470261262050242
best_error: 4.9413350331490005
best_error: 4.941334824566478
best_error: 4.69058804077582
best_error: 4.690587464686988
best_error: 4.687109001640164
best_error: 4.687108434370005
best_error: 4.662098268444246
best_error: 4.662097761992353
best_error: 4.654245526041063
best_error: 4.65424504727949
best_error: 4.639874942930305
best_error: 4.639874517052826
best_error: 4.586185377847723
best_error: 4.586184947622968
best_error: 4.55654217476604
best_error: 4.556541740958864
best_error: 4.548711515624964
best_error: 4.548711269613481
best_error: 4.547909522459653
best_error: 4.54790908759229
best_error: 4.543626240642711
best_error: 4.543625804927076
best_error: 4.537007043314387
best_error: 4.537006800443182
best_error: 4.528292819404468
best_error: 4.528292578546992
best_error: 4.520052103719273
best_error: 4.520051888829668
best_error: 4.506146445005292
best_error: 4.506146208490464
best_error: 4.494893339732572
best_error: 4.494893101190731
best_error: 4.3792585823738115
best_error: 4.3792583493458075
best_error: 4.267362397399651
best_error: 4.267362158243788
best_error: 4.233860096601313
best_error: 4.233859658554281
best_error: 4.169046465427915
best_error: 4.16904604473346
best_error: 4.076174979533367
best_error: 4.0761746121219815
best_error: 3.9619766237214504
best_error: 3.961976453344051
best_error: 3.9563697297212608
best_error: 3.9563693502631048
best_error: 3.9259249320643583
best_error: 3.9259245523068595
best_error: 3.84150985884896
best_error: 3.8415097263452713
best_error: 3.841509696268467
best_error: 3.7592744319273335
best_error: 3.7592740242078393
best_error: 3.729729513294955
best_error: 3.729729154836705
best_error: 3.6959205517121654
best_error: 3.695920173294472
best_error: 3.4643390262720724
best_error: 3.4643386408550336
best_error: 3.2832288330729327
best_error: 3.2832288127232805
best_error: 3.2832286662910337
best_error: 3.248966669345699
best_error: 3.248966655946365
best_error: 3.248966504302125
best_error: 3.224613135749225
best_error: 3.22461273678446
best_error: 3.2245837499817287
best_error: 3.224583734792616
best_error: 3.2245835857173026
best_error: 3.2245712156002644
best_error: 3.224570816630649
best_error: 3.224524470082927
best_error: 3.2245240711078638
best_error: 3.224518708796215
best_error: 3.2245183098204846
best_error: 3.22451484875684
best_error: 3.22451444978066
best_error: 3.224514433119639
best_error: 3.2245143970843726
best_error: 3.2245143723713454
best_error: 3.1884817116863364
best_error: 3.188481696468498
best_error: 3.1884815440216228
best_error: 3.172715479084747
best_error: 3.1727150003691476
best_error: 3.1509885897549283
best_error: 3.150988126534223
best_error: 3.1154107402998195
best_error: 3.1154102966940416
best_error: 3.102489771258192
best_error: 3.102489298902411
best_error: 3.0992842462288808
best_error: 3.099283783846584
best_error: 3.0977307734933817
best_error: 3.097730306943687
best_error: 3.0970343498471795
best_error: 3.097033882031786
best_error: 3.096694940664328
best_error: 3.0966944725872496
best_error: 3.0961825734039334
best_error: 3.0961821048644342
best_error: 3.0958130525220064
best_error: 3.0958125836490065
best_error: 3.0955334426070222
best_error: 3.0955329742711886
best_error: 3.0937152618100527
best_error: 3.093714796231713
best_error: 3.093634092102988
best_error: 3.09363362644475
best_error: 3.09357317472831
best_error: 3.093572709010065
best_error: 3.0935220267665344
best_error: 3.093521562258687
best_error: 3.0905242643389363
best_error: 3.0905237994674435
best_error: 3.0890840534527513
best_error: 3.0890835884066035
best_error: 3.088977601683359
best_error: 3.088977136624298
best_error: 3.0889398453014065
best_error: 3.0889393802377345
best_error: 3.0889238811050013
best_error: 3.088923416039412
best_error: 3.0889217562499196
best_error: 3.088921291184063
best_error: 3.088920641485994
best_error: 3.0889206374641285
best_error: 3.058896793129409
best_error: 3.058896375065725
best_error: 3.0568853723754312
best_error: 3.05688491108889
best_error: 2.9581126334755465
best_error: 2.9581122389876002
best_error: 2.952249864484393
best_error: 2.9522494703512296
best_error: 2.949527074479564
best_error: 2.949526681164519
best_error: 2.948211551730723
best_error: 2.948211158224694
best_error: 2.9473746680106876
best_error: 2.94737466801005
best_error: 2.9473745026980627
best_error: 2.9002551239678187
best_error: 2.900254699623713
best_error: 2.8973620693309368
best_error: 2.89736164516321
best_error: 2.8966262004199033
best_error: 2.8966257761580345
best_error: 2.8965138933450394
best_error: 2.896513469068796
best_error: 2.896445142046076
best_error: 2.8964447177610326
best_error: 2.896423591771872
best_error: 2.8964231674840635
best_error: 2.8964198728180994
best_error: 2.896419448529823
best_error: 2.8964182180949427
best_error: 2.8964177938064486
best_error: 2.8964171203204305
best_error: 2.896417049932106
best_error: 2.8964170047997904
best_error: 2.8964170047991376
best_error: 2.896417004141492
