ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 64
days_switch 45
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 100.55505692303674
best_error: 100.55505673331334
best_error: 100.55505671916802
best_error: 20.67293357333142
best_error: 20.67293357333082
best_error: 20.672933572217467
best_error: 20.67284209981771
best_error: 20.672842098701107
best_error: 20.672474024043762
best_error: 20.672474022916454
best_error: 20.67096591250281
best_error: 20.67096591133111
best_error: 20.66429715839465
best_error: 20.66429715701668
best_error: 20.621174178213572
best_error: 20.621174175184695
best_error: 20.55930483138944
best_error: 20.559304825142256
best_error: 20.443393190010184
best_error: 20.44339317487327
best_error: 16.15562224349708
best_error: 16.15562165972782
best_error: 14.753832895498313
best_error: 14.753832867867109
best_error: 14.722274240852133
best_error: 14.722274240110538
best_error: 14.722274165802311
best_error: 14.718660697738777
best_error: 14.71866069499502
best_error: 14.718660651724685
best_error: 14.717010532213731
best_error: 14.717010528933422
best_error: 14.717010494381984
best_error: 14.716478431998969
best_error: 14.716478428315725
best_error: 14.716478400203066
best_error: 14.716147788379914
best_error: 14.716147784676966
best_error: 14.716147756878847
best_error: 14.715931398722304
best_error: 14.71593139499902
best_error: 14.715931367527997
best_error: 14.71578827336015
best_error: 14.715788269615551
best_error: 14.715788242484503
best_error: 14.715688591694608
best_error: 14.71568858794933
best_error: 14.715688560813623
best_error: 14.715613374921585
best_error: 14.715613371175799
best_error: 14.715613344036576
best_error: 14.715558813864861
best_error: 14.715558810118706
best_error: 14.715558782976933
best_error: 14.715522088338902
best_error: 14.715522084592498
best_error: 14.715522057449006
best_error: 14.715486280508777
best_error: 14.715486276762135
best_error: 14.715486249616967
best_error: 14.715468424711162
best_error: 14.715468420964395
best_error: 14.715468393818394
best_error: 14.715454920719894
best_error: 14.715454916973052
best_error: 14.715454889826347
best_error: 14.715445390360404
best_error: 14.715445386613506
best_error: 14.71544535946631
best_error: 14.715437875228567
best_error: 14.715437871481624
best_error: 14.715437844334037
best_error: 14.715433407016986
best_error: 14.715433403270016
best_error: 14.715433376122192
best_error: 14.715428881954004
best_error: 14.715428878207003
best_error: 14.71542885105895
best_error: 14.715426900184776
best_error: 14.71542689643777
best_error: 14.715426869289608
best_error: 14.715425649880995
best_error: 14.71542564613398
best_error: 14.715425618985755
best_error: 14.715424450377068
best_error: 14.715424446630049
best_error: 14.715424419481762
best_error: 14.715423912313675
best_error: 14.715423908566645
best_error: 14.715423881418333
best_error: 14.715423504628287
best_error: 14.715423500881258
best_error: 14.715423473732926
best_error: 14.715423241539984
best_error: 14.715423237792951
best_error: 14.715423210644605
best_error: 14.715423053801526
best_error: 14.715423050054504
best_error: 14.715423022906142
best_error: 14.715422910088051
best_error: 14.715422906341022
best_error: 14.715422879192658
best_error: 14.715422821950245
best_error: 14.71542281820321
best_error: 14.715422791054841
best_error: 14.715422735036991
best_error: 14.715422731289959
best_error: 14.715422704141586
best_error: 14.715422695467193
best_error: 14.715422691720162
best_error: 14.715422664571788
best_error: 14.715422639016943
best_error: 14.715422638078802
best_error: 14.715065003404568
best_error: 14.71506497754128
best_error: 14.708908258927273
best_error: 14.708908233545479
best_error: 14.686699553646132
best_error: 14.686699530364088
best_error: 14.66956368375449
best_error: 14.669563662122863
best_error: 14.666559404963339
best_error: 14.66655938317669
best_error: 14.665825686871816
best_error: 14.665825665084183
best_error: 14.66581724280407
best_error: 14.66581715998143
best_error: 14.665659270668804
best_error: 14.665659248883856
best_error: 14.66539673202691
best_error: 14.665396649178412
best_error: 14.663028432906698
best_error: 14.66302835003555
best_error: 14.652853711004424
best_error: 14.652853689332016
best_error: 14.620647804420942
best_error: 14.620647780774707
best_error: 14.620647779806852
best_error: 14.608754638369213
best_error: 14.608754611423652
best_error: 14.60776621770127
best_error: 14.607766190747839
best_error: 14.603816154944113
best_error: 14.60381612805267
best_error: 14.588071779757737
best_error: 14.588071753112803
best_error: 14.52606766897961
best_error: 14.5260676433883
best_error: 14.463259155909048
best_error: 14.46325912746434
best_error: 14.462911232209546
best_error: 14.462911203721877
best_error: 14.461549545076359
best_error: 14.46154951082099
best_error: 14.45621309420041
best_error: 14.456213053212755
best_error: 14.436808229607454
best_error: 14.436808151161394
best_error: 14.382525626005753
best_error: 14.382525593357833
best_error: 14.382525011028507
best_error: 14.287715106715464
best_error: 14.287715097755658
best_error: 14.287715096639754
best_error: 13.92944085886764
best_error: 13.929440753439762
best_error: 13.648923915061143
best_error: 13.648923906452831
best_error: 13.601432989815454
best_error: 13.601432981917215
best_error: 13.597384086614763
best_error: 13.597384079201127
best_error: 13.44821549877066
best_error: 13.44821549648594
best_error: 13.448215334399787
best_error: 13.429868769135549
best_error: 13.42986876664399
best_error: 13.429868687094945
best_error: 13.428618365986075
best_error: 13.428618363420815
best_error: 13.428618284879567
best_error: 13.428060011539785
best_error: 13.42805998929462
best_error: 13.427776769095505
best_error: 13.427776766483976
best_error: 13.427776688591628
best_error: 13.427606333203599
best_error: 13.427606330571546
best_error: 13.42760625301499
best_error: 13.427584331277917
best_error: 13.427584328645588
best_error: 13.427584251088518
best_error: 13.427561271714687
best_error: 13.42756126908207
best_error: 13.42756119152447
best_error: 13.427538898909855
best_error: 13.427538896276962
best_error: 13.42753881871884
best_error: 13.42753561444016
best_error: 13.427535592202561
best_error: 13.427535566354518
best_error: 13.427522657924682
best_error: 13.427522655291586
best_error: 13.427522577733088
best_error: 13.427521159764805
best_error: 13.427521157131688
best_error: 13.42752107957314
best_error: 13.427519998149616
best_error: 13.427519995516494
best_error: 13.427519917957902
best_error: 13.427519212121023
best_error: 13.427519209487894
best_error: 13.427519131929277
best_error: 13.427518418474737
best_error: 13.427518415841593
best_error: 13.427518338282951
best_error: 13.427517764097145
best_error: 13.427517761464
best_error: 13.427517683905334
best_error: 13.427517530967103
best_error: 13.427517528333961
best_error: 13.42751745077528
best_error: 13.427517401486583
best_error: 13.42751739885343
best_error: 13.42751732129475
best_error: 13.427517295413548
best_error: 13.4275172927804
best_error: 13.427517215221714
best_error: 13.42751715147831
best_error: 13.427517077375342
best_error: 13.427517051015307
best_error: 13.427517049669998
best_error: 13.427517041920764
best_error: 13.427517040255124
best_error: 13.42751703452543
best_error: 13.42751703199103
best_error: 13.427517029343033
best_error: 13.427517024408152
