ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 90
days_switch 40
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 96.92880289686755
best_error: 96.92880275312466
best_error: 96.92880267147595
best_error: 13.82230778595688
best_error: 13.822307785948336
best_error: 13.8223077613771
best_error: 13.765122396282049
best_error: 13.765122370194035
best_error: 13.502800004737052
best_error: 13.502799972611726
best_error: 11.167703553790872
best_error: 11.16770337808108
best_error: 10.385723673172183
best_error: 10.385723670624479
best_error: 10.385723669258354
best_error: 10.385723666483788
best_error: 10.385326915034856
best_error: 10.385326908326272
best_error: 10.350030430506266
best_error: 10.350030423487135
best_error: 10.265374407412837
best_error: 10.265374402110753
best_error: 10.265374358202571
best_error: 10.177095865916295
best_error: 10.177095845532728
best_error: 10.055331511343388
best_error: 10.055331462050026
best_error: 9.437335251172346
best_error: 9.43733521682108
best_error: 9.397400953983162
best_error: 9.397400924002241
best_error: 9.199500534038599
best_error: 9.199500524133654
best_error: 9.199500498181338
best_error: 9.106707891256667
best_error: 9.106707792534669
best_error: 8.855465069514363
best_error: 8.855465039559387
best_error: 8.844458544721583
best_error: 8.844458484732721
best_error: 8.818204232483096
best_error: 8.818204179441103
best_error: 8.7606196291343
best_error: 8.760619581579821
best_error: 8.714519085717557
best_error: 8.71451905533071
best_error: 8.66636567396604
best_error: 8.666365654716103
best_error: 8.666365617938332
best_error: 8.648671448700084
best_error: 8.648671444704393
best_error: 8.648671407008907
best_error: 8.5269084329921
best_error: 8.526908410923683
best_error: 8.526908382326166
best_error: 8.172616331936027
best_error: 8.172616318954487
best_error: 8.172616303653003
best_error: 7.836633598595244
best_error: 7.836633590478138
best_error: 7.836633588113462
best_error: 7.7422432135855574
best_error: 7.742243207401065
best_error: 7.742243200565289
best_error: 7.592339944217589
best_error: 7.592339891521314
best_error: 7.422868401850971
best_error: 7.42286835531598
best_error: 7.264653886643326
best_error: 7.2646537835196385
best_error: 7.224878817541829
best_error: 7.224878789015887
best_error: 7.156355344837355
best_error: 7.156355317539687
best_error: 7.067637661856195
best_error: 7.067637303615464
best_error: 6.982599201472393
best_error: 6.982599180885784
best_error: 6.982599177306445
best_error: 6.926993693080483
best_error: 6.926993670766765
best_error: 6.926993670265462
best_error: 6.881116193660856
best_error: 6.881115946664481
best_error: 6.7921256265698835
best_error: 6.792125575387821
best_error: 6.7911329322878045
best_error: 6.7911328809987115
best_error: 6.79113152353239
best_error: 6.791131496513721
best_error: 6.784936628476555
best_error: 6.78493662802212
best_error: 6.784936613754913
best_error: 6.784885353798923
best_error: 6.784885353343961
best_error: 6.7848853390750135
best_error: 6.784855542914111
best_error: 6.784855542458849
best_error: 6.784855528188883
best_error: 6.7848383450627825
best_error: 6.78483834460734
best_error: 6.784838330336797
best_error: 6.784828536090163
best_error: 6.784828535634621
best_error: 6.784828521363744
best_error: 6.784823023239479
best_error: 6.784823022783876
best_error: 6.784823008512817
best_error: 6.784822921257494
best_error: 6.784822921245432
best_error: 6.784822906530819
best_error: 6.7848229022917455
best_error: 6.784822894906772
best_error: 6.784822857197098
best_error: 6.7848228286626355
best_error: 6.784822826869045
best_error: 6.75875072309014
best_error: 6.7587506997707845
best_error: 6.75342954421288
best_error: 6.753429319958644
best_error: 6.737460122596727
best_error: 6.737460102516139
best_error: 6.737460097384577
best_error: 6.733120889820481
best_error: 6.733120742539592
best_error: 6.731099116940741
best_error: 6.73109894025118
best_error: 6.722949484703854
best_error: 6.72294935226444
best_error: 6.702522146498199
best_error: 6.702522123503617
best_error: 6.692736728831946
best_error: 6.692736705883498
best_error: 6.668734779637936
best_error: 6.66873476298369
best_error: 6.618664828197369
best_error: 6.618664812188984
best_error: 6.606951713435316
best_error: 6.606951696671116
best_error: 6.595070844138095
best_error: 6.595070830357115
best_error: 6.588375998867198
best_error: 6.5883759810317235
best_error: 6.57137786528022
best_error: 6.57137784865651
best_error: 6.56758408372514
best_error: 6.567583897424697
best_error: 6.559248393143285
best_error: 6.559248377633543
best_error: 6.552897831947256
best_error: 6.5528978168602645
best_error: 6.552230387679361
best_error: 6.5522303726322
best_error: 6.551967168917311
best_error: 6.551967002452538
best_error: 6.551961924297967
best_error: 6.551961909254708
best_error: 6.5436295316747914
best_error: 6.543629516871838
best_error: 6.5428851468515
best_error: 6.542885135048088
best_error: 6.542497962823239
best_error: 6.542497948066795
best_error: 6.542092182160908
best_error: 6.542092170127326
