ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 8.131440839374662
best_error: 8.131440814910487
best_error: 7.308288997137732
best_error: 7.308288904624017
best_error: 3.8489868019176727
best_error: 3.8489864935755547
best_error: 3.4486692147851263
best_error: 3.448669075404635
best_error: 3.3896467411465174
best_error: 3.3896467379067174
best_error: 3.364611626973974
best_error: 3.364611620082644
best_error: 3.3646116181324333
best_error: 3.3636941124649353
best_error: 3.3636941062975994
best_error: 3.3636941035771564
best_error: 3.360291015903801
best_error: 3.360291014020823
best_error: 3.3602910068684464
best_error: 3.3580698858995524
best_error: 3.3580698856970153
best_error: 3.3580698767101493
best_error: 3.356964377592321
best_error: 3.3569643683725303
best_error: 3.356579903048362
best_error: 3.3565798938208316
best_error: 3.356460664421603
best_error: 3.356460660845113
best_error: 3.3564328141818485
best_error: 3.356432804941818
best_error: 3.3564199290865844
best_error: 3.3564199255107496
best_error: 3.356419532387163
best_error: 3.356419523146131
best_error: 3.3564190701775596
best_error: 3.3564190609364934
best_error: 3.356419043380827
best_error: 3.356419039805016
best_error: 3.3564189959269384
best_error: 3.356418986685867
best_error: 3.348945837055157
best_error: 3.348945833256733
best_error: 3.33899985351121
best_error: 3.3389998493993622
best_error: 3.298738114689286
best_error: 3.298738109076132
best_error: 3.270137464087766
best_error: 3.270137457529594
best_error: 3.266688146741528
best_error: 3.266688146741493
best_error: 3.264557821097123
best_error: 3.264557821097076
best_error: 3.2628178583178533
best_error: 3.262817858317817
best_error: 3.2626155205312792
best_error: 3.2626155205312406
best_error: 3.2625106541952995
best_error: 3.262510654195269
best_error: 3.262454711975528
best_error: 3.26245471197549
best_error: 3.262424594839949
best_error: 3.262424594839917
best_error: 3.262408303958273
best_error: 3.2624083039582423
best_error: 3.262399462340769
best_error: 3.2623994623407304
best_error: 3.2623903733857795
best_error: 3.26239037338575
best_error: 3.262389387038516
best_error: 3.2623893870384806
best_error: 3.2623889093638865
best_error: 3.262388909363851
best_error: 3.2623886707416636
best_error: 3.2623886707416347
best_error: 3.26238856730006
best_error: 3.262388560298094
best_error: 3.2623883464644345
best_error: 3.2623883464643937
best_error: 3.2623882670108153
best_error: 3.2623882670107833
best_error: 3.262388266846339
best_error: 3.262388262516736
best_error: 3.251985646543479
best_error: 3.2519856395667937
best_error: 3.247406968882008
best_error: 3.247406961915666
best_error: 3.2457700943827303
best_error: 3.2457700874267132
best_error: 3.1664413364831163
best_error: 3.166441327509831
best_error: 3.166359231568801
best_error: 3.1663591806736853
best_error: 3.166089111591349
best_error: 3.166089102585528
best_error: 3.166047656773246
best_error: 3.166047647768405
best_error: 3.1660436310971427
best_error: 3.1660436220923787
best_error: 3.1653399770756936
best_error: 3.165339927029419
best_error: 2.9707954023189482
best_error: 2.970795366766107
best_error: 2.970409394608427
best_error: 2.9704093585643356
best_error: 2.970233964378013
best_error: 2.970233928332764
best_error: 2.970172781799144
best_error: 2.970172745688549
best_error: 2.9701493759131425
best_error: 2.970149339803122
best_error: 2.970139820757424
best_error: 2.97013978464772
best_error: 2.970134269553152
best_error: 2.9701342334434218
best_error: 2.9701282214964286
best_error: 2.970128185386099
best_error: 2.970114556687728
best_error: 2.970114520574922
best_error: 2.970060222279762
best_error: 2.970060186317771
best_error: 2.962387496575933
best_error: 2.962387480942084
best_error: 2.9620223607731164
best_error: 2.962022347216304
best_error: 2.9618009347195717
best_error: 2.9618009230454754
best_error: 2.961643474586467
best_error: 2.9616434644743164
best_error: 2.961562310968506
best_error: 2.961562301027833
best_error: 2.9614602886129333
best_error: 2.9614602791092643
best_error: 2.9613462163666693
best_error: 2.9613462086602533
best_error: 2.961326956491524
best_error: 2.961326948821962
best_error: 2.9613134296142753
best_error: 2.961313422570343
best_error: 2.9612850209731207
best_error: 2.961285015209032
best_error: 2.9612819685395917
best_error: 2.9612819627726754
best_error: 2.961279077688652
best_error: 2.9612790719190634
best_error: 2.961277303045189
best_error: 2.961277297273955
best_error: 2.9612756475927826
best_error: 2.961275641820016
best_error: 2.9612742327159025
best_error: 2.9612742269418293
best_error: 2.9612729990946542
best_error: 2.9612729933194393
best_error: 2.961269050918021
best_error: 2.9612690451391557
best_error: 2.9612668778826494
best_error: 2.9612668723648032
best_error: 2.961264628779421
best_error: 2.9612646232594138
best_error: 2.961263075845161
best_error: 2.961263070367039
best_error: 2.9612629464534317
best_error: 2.9612629409751827
best_error: 2.961262824661106
best_error: 2.96126281918274
best_error: 2.961262735638344
best_error: 2.9612627301598904
best_error: 2.9612626548075154
best_error: 2.9612626493289866
best_error: 2.961262510021671
best_error: 2.9612625045480065
best_error: 2.9612622180739407
best_error: 2.9612622128650936
best_error: 2.961261921966174
best_error: 2.9612619168215897
best_error: 2.9612619119417967
best_error: 2.961261907323361
best_error: 2.961261904065481
best_error: 2.9612619010699635
best_error: 2.9612618965102837
best_error: 2.9612618928104397
best_error: 2.9612618745244474
best_error: 2.9612618745244292
