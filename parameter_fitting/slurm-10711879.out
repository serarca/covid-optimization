ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.868668848708095
best_error: 12.868668586163826
best_error: 11.70842197979005
best_error: 11.70842188342848
best_error: 10.750761591622686
best_error: 10.750761411291071
best_error: 10.166710152448083
best_error: 10.166709917837666
best_error: 9.737431815686545
best_error: 9.737431562634878
best_error: 9.070660705285942
best_error: 9.070660584453297
best_error: 9.070660564692721
best_error: 9.02506800917406
best_error: 9.025067896239346
best_error: 9.025067862413689
best_error: 8.943972805515408
best_error: 8.943972708509033
best_error: 8.943972647415658
best_error: 8.747512046391336
best_error: 8.74751196315311
best_error: 8.747511881766124
best_error: 8.529775115641618
best_error: 8.52977505331084
best_error: 8.529774943950246
best_error: 8.386617387323646
best_error: 8.386617330754792
best_error: 8.386617210156036
best_error: 8.309572887136088
best_error: 8.30957283402173
best_error: 8.309572706797987
best_error: 8.264610631103789
best_error: 8.264610574104768
best_error: 8.264610450286694
best_error: 8.259509884556467
best_error: 8.259509826968738
best_error: 8.2595097036552
best_error: 8.256176971042164
best_error: 8.256176913070236
best_error: 8.2561767900859
best_error: 8.254404433260568
best_error: 8.254404375084452
best_error: 8.25440425227508
best_error: 8.253180755048694
best_error: 8.253180696731675
best_error: 8.253180574043009
best_error: 8.252449540427204
best_error: 8.252449482026147
best_error: 8.252449359409685
best_error: 8.252166007804743
best_error: 8.252165949371095
best_error: 8.252165826782637
best_error: 8.251981786434756
best_error: 8.251981727979938
best_error: 8.251981605409672
best_error: 8.251885221479087
best_error: 8.251885163013172
best_error: 8.25188504045246
best_error: 8.25181833204376
best_error: 8.251818273570152
best_error: 8.251818151016014
best_error: 8.251785680747085
best_error: 8.251785622269722
best_error: 8.251785499718824
best_error: 8.251761475803198
best_error: 8.251761417323069
best_error: 8.251761294774568
best_error: 8.251747846185825
best_error: 8.25174778770414
best_error: 8.251747665156962
best_error: 8.251746234451591
best_error: 8.251746175969712
best_error: 8.251746053422679
best_error: 8.251745223271573
best_error: 8.251745164789579
best_error: 8.251745042242685
best_error: 8.251744675135921
best_error: 8.251744616653864
best_error: 8.251744494107012
best_error: 8.251744309023595
best_error: 8.251744250541492
best_error: 8.251744127994682
best_error: 8.251744062054481
best_error: 8.251743881025593
best_error: 6.656163369642815
best_error: 6.656163142660134
best_error: 5.971755032213441
best_error: 5.971754519834761
best_error: 5.942418863803976
best_error: 5.942418408466823
best_error: 5.923662739460086
best_error: 5.923662304643951
best_error: 5.8349826368883075
best_error: 5.8349822469550645
best_error: 5.719152402553689
best_error: 5.7191520321936125
best_error: 5.714787267212684
best_error: 5.714787086971377
best_error: 5.704965116998949
best_error: 5.704964745249603
best_error: 5.665624034747027
best_error: 5.665623663870826
best_error: 5.659375447231682
best_error: 5.659375075103583
best_error: 5.6559909584707935
best_error: 5.655990585665888
best_error: 5.653438447874029
best_error: 5.6534380745592525
best_error: 5.652117383537464
best_error: 5.652117010233343
best_error: 5.651305342925545
best_error: 5.651304969459039
best_error: 5.650685713856142
best_error: 5.650685340265758
best_error: 5.650376424460605
best_error: 5.650376050808404
best_error: 5.650133273735928
best_error: 5.650132900035125
best_error: 5.649913872612065
best_error: 5.649913498867409
best_error: 5.649912737891764
best_error: 5.649912364146895
best_error: 5.649911891302153
best_error: 5.649911517557104
best_error: 5.6499114520040274
best_error: 5.649911078258887
best_error: 5.649910742687518
best_error: 5.649910742239204
best_error: 5.649910706609705
best_error: 5.6499106650045405
best_error: 5.543893908377993
best_error: 5.543893511366173
best_error: 5.495082442580845
best_error: 5.495082032580283
best_error: 5.495054703860696
best_error: 5.49505429385643
best_error: 5.494943773835882
best_error: 5.494943363816841
best_error: 5.49450045133268
best_error: 5.494500041254658
best_error: 5.492745123657622
best_error: 5.492744710687836
best_error: 5.4859083738979635
best_error: 5.485907959689252
best_error: 5.463218379493695
best_error: 5.463217948109495
best_error: 5.434091074514612
best_error: 5.434090600154676
best_error: 5.425885889178165
best_error: 5.42588540009105
best_error: 5.401324546323741
best_error: 5.401324048870276
best_error: 5.3589632874826645
best_error: 5.358962810980879
best_error: 5.3571986636072
best_error: 5.357198190288372
best_error: 5.352438612174533
best_error: 5.3524381457955315
best_error: 5.350782099230882
best_error: 5.3507816395668275
best_error: 5.347087495226857
best_error: 5.3470870355467035
best_error: 5.344655517083627
best_error: 5.344655058066564
best_error: 5.3442882198432855
best_error: 5.344287760783335
best_error: 5.344040285835968
best_error: 5.344039826747096
best_error: 5.343203964501116
best_error: 5.343203505314929
best_error: 5.342959663531083
best_error: 5.342959204457135
best_error: 5.342904489622545
best_error: 5.342904030541969
best_error: 5.342853665905928
best_error: 5.342853206819221
best_error: 5.342816832737064
best_error: 5.342816373645929
best_error: 5.342784472497007
best_error: 5.34278401340199
best_error: 5.342735652712904
best_error: 5.3427351936120075
best_error: 5.34270154608369
best_error: 5.3427010869787
best_error: 5.342604068956982
best_error: 5.342603906489196
best_error: 5.342589858107003
best_error: 5.342589400638484
best_error: 5.3425893687035195
best_error: 5.34258891123503
best_error: 5.342588483016822
best_error: 5.3425883849988605
best_error: 5.342587927530392
best_error: 5.342585271086014
best_error: 5.342584813617639
best_error: 5.34257793444248
best_error: 5.342577477833711
best_error: 5.342577461597682
best_error: 5.342577445640973
best_error: 5.3425721624901
best_error: 5.3425720000235515
best_error: 5.329203940168974
best_error: 5.329203464095866
best_error: 5.305293241681676
best_error: 5.305292759727587
best_error: 5.294781624895968
best_error: 5.294781140799106
best_error: 5.2542542409483435
best_error: 5.254253742074752
best_error: 5.136205581275875
best_error: 5.1362050139302795
best_error: 5.093680312458039
best_error: 5.093680176815001
best_error: 5.080334409464983
best_error: 5.080333777503499
best_error: 5.079171254672947
best_error: 5.079170622471348
best_error: 5.0786280255054095
best_error: 5.078627393191704
best_error: 5.078425038459712
best_error: 5.078424406104132
best_error: 5.078423764941428
best_error: 5.078423634121398
best_error: 5.078423208536023
best_error: 5.078422576180076
best_error: 5.078421653992608
best_error: 5.07842160177265
best_error: 5.0784215883388715
best_error: 5.078421536118915
best_error: 5.0784214621968315
best_error: 5.078421409976897
best_error: 5.078421409387978
best_error: 5.078421409385655
best_error: 5.078421408846644
best_error: 5.078421401508996
best_error: 5.07842138332993
best_error: 5.078421383327617
best_error: 5.078421382788585
best_error: 5.078421382324081
best_error: 5.0784213789074855
