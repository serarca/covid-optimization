ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.837470075625749
best_error: 10.8374700577749
best_error: 10.451156077042555
best_error: 10.451156014120652
best_error: 6.5877432893390395
best_error: 6.587743288585315
best_error: 6.503063560857686
best_error: 6.503063558424975
best_error: 6.503052394348998
best_error: 6.503052394348996
best_error: 6.503052391916358
best_error: 6.5030447963287425
best_error: 6.503044796328742
best_error: 6.503044793896161
best_error: 6.503040360441806
best_error: 6.503040264116334
best_error: 6.503036261193529
best_error: 6.503036258754639
best_error: 6.503020109136067
best_error: 6.503020109136065
best_error: 6.503020106696274
best_error: 6.502956940423613
best_error: 6.502956844601471
best_error: 6.502704960869752
best_error: 6.502704865036637
best_error: 6.501682041100516
best_error: 6.5016819452219465
best_error: 6.497542955910376
best_error: 6.497542955910374
best_error: 6.497542953159764
best_error: 6.480874698992439
best_error: 6.480874695129904
best_error: 6.474039684143884
best_error: 6.474039684143882
best_error: 6.474039679591522
best_error: 6.472114113215166
best_error: 6.472114109353887
best_error: 6.471375563303431
best_error: 6.471375560064631
best_error: 6.4706659690484924
best_error: 6.470665965556361
best_error: 6.466491620466234
best_error: 6.466491615517503
best_error: 6.460524306085229
best_error: 6.460524300193794
best_error: 6.460510807258565
best_error: 6.46051080135575
best_error: 6.460498870950507
best_error: 6.460498865037661
best_error: 6.460492173017087
best_error: 6.460492167098631
best_error: 6.460486365797806
best_error: 6.460486365797804
best_error: 6.460486359874511
best_error: 6.460482909414358
best_error: 6.460482909414357
best_error: 6.460482903488182
best_error: 6.460479998693286
best_error: 6.460479992764682
best_error: 6.460477978136296
best_error: 6.4604779722060215
best_error: 6.460476397603633
best_error: 6.460476397603631
best_error: 6.460476391672046
best_error: 6.460474747137241
best_error: 6.4604747412042824
best_error: 6.46047377750902
best_error: 6.460473777509018
best_error: 6.460473771575254
best_error: 6.4604730994964426
best_error: 6.460473093562112
best_error: 6.4604725440134985
best_error: 6.460472544013497
best_error: 6.4604725380787
best_error: 6.46047210691456
best_error: 6.460472100979393
best_error: 6.46047179165501
best_error: 6.460471791655008
best_error: 6.460471785719601
best_error: 6.460471370248851
best_error: 6.460471364313082
best_error: 6.460471170827136
best_error: 6.460471164891207
best_error: 6.460470845163205
best_error: 6.460470845163203
best_error: 6.460470839226997
best_error: 6.460470788484019
best_error: 6.4604707884840185
best_error: 6.460470782547768
best_error: 6.4604707556191645
best_error: 6.460470749682882
best_error: 6.460470700149895
best_error: 6.460470694213571
best_error: 6.460470680550204
best_error: 6.460470674613863
best_error: 6.4604706731949335
best_error: 6.460470667258579
best_error: 6.460470660782393
best_error: 6.4604706548460396
best_error: 6.4604706255003945
best_error: 6.460465451548842
best_error: 6.460465445612267
best_error: 6.460427984479791
best_error: 6.460427978541704
best_error: 6.4602781117650725
best_error: 6.460278105820974
best_error: 6.459678724679324
best_error: 6.459678718778332
best_error: 6.457280710586285
best_error: 6.457280710586284
best_error: 6.457280704588267
best_error: 6.447676593065516
best_error: 6.447676593065514
best_error: 6.44767658683553
best_error: 6.409274110714373
best_error: 6.409274103709142
best_error: 6.257286821706859
best_error: 6.257286821706857
best_error: 6.257286811119144
best_error: 6.1834969061227785
best_error: 5.487279989607023
best_error: 5.389080468184929
best_error: 5.389080468184928
best_error: 5.389080439875837
best_error: 5.3512331853243404
best_error: 5.351233110003006
best_error: 5.319750669571385
best_error: 5.319750669571384
best_error: 5.2432099143100235
best_error: 5.243209898131349
best_error: 5.232356452278976
best_error: 5.232356443813603
best_error: 5.232356437899755
best_error: 5.231261131671822
best_error: 5.23126113167182
best_error: 5.229991992057364
best_error: 5.229991979403088
best_error: 5.229991977554414
best_error: 5.2278606350808765
best_error: 5.227860621100864
best_error: 5.227178041650247
best_error: 5.2271780279120375
best_error: 5.227122494553189
best_error: 5.227122480626162
best_error: 5.227092747917392
best_error: 5.2270927339830155
best_error: 5.227071128470658
best_error: 5.2270711145309345
best_error: 5.227068376674985
best_error: 5.227068361019446
best_error: 5.2270673013430855
best_error: 5.227067287402366
best_error: 5.227067009245184
best_error: 5.227066995304394
best_error: 5.2270669118381665
best_error: 5.22706689789735
best_error: 5.227066844254986
best_error: 5.227066830314149
best_error: 5.227066814194371
best_error: 5.2270668141943695
best_error: 5.227066814194361
best_error: 5.226450058609186
best_error: 5.226450042710889
best_error: 5.226162521765074
best_error: 5.2261625011268364
best_error: 5.22616218043799
best_error: 5.226162159602234
best_error: 5.2261619358542575
best_error: 5.226161915016613
best_error: 5.226161802670267
best_error: 5.226161781831578
best_error: 5.226161763354956
best_error: 5.226161742643949
best_error: 5.226161727296059
best_error: 5.226161710806068
best_error: 5.226161607692862
best_error: 5.226161586981809
best_error: 5.226161112413115
best_error: 5.22616109170169
best_error: 5.226159150075963
best_error: 5.226159129420615
best_error: 5.226151551407019
best_error: 5.2261515307638815
best_error: 5.226127004508574
best_error: 5.226126984710291
best_error: 5.2261022700496484
best_error: 5.226102252064868
best_error: 5.226099926633511
best_error: 5.226099908446315
best_error: 5.226099425550127
best_error: 5.226099407189027
best_error: 5.226005045637128
best_error: 5.226005027593504
best_error: 5.225939798765344
best_error: 5.22593978104781
best_error: 5.225891010648503
best_error: 5.225890993667919
best_error: 5.225821027494402
best_error: 5.225821010550326
best_error: 5.225819563887745
best_error: 5.2258195481529075
best_error: 5.225810758979315
best_error: 5.225810742031153
best_error: 5.2257794066001395
best_error: 5.225779390077717
best_error: 5.225769584505336
best_error: 5.225769567979327
best_error: 5.225768985436976
best_error: 5.225768968910752
best_error: 5.225768493909057
best_error: 5.225768477382656
best_error: 5.225768243563907
best_error: 5.225768227037415
best_error: 5.225768036018067
best_error: 5.225768019491499
best_error: 5.2257679338656455
best_error: 5.22576791733904
best_error: 5.225767847798279
best_error: 5.225767831271638
best_error: 5.225767821116752
best_error: 5.225767804590102
best_error: 5.225767798671201
best_error: 5.225767793333368
best_error: 5.225728056176811
best_error: 5.225728038155152
best_error: 5.2256892539758395
best_error: 5.225689234723
best_error: 5.225688215442074
best_error: 5.225688194577991
best_error: 5.225684559415828
best_error: 5.2256845394626215
best_error: 5.2256843035579585
best_error: 5.225684283588579
best_error: 5.2256841832421665
best_error: 5.225684163273484
best_error: 5.22568404395549
best_error: 5.225684023986604
best_error: 5.225683298421364
best_error: 5.225683278451884
best_error: 5.2256803170811
best_error: 5.22568029710922
best_error: 5.22566989724626
best_error: 5.2256698778639645
best_error: 5.225640057170812
best_error: 5.22564003898672
best_error: 5.225639880337073
best_error: 5.225639862195635
best_error: 5.225639348257787
best_error: 5.225639332536145
best_error: 5.225639259070115
best_error: 5.225639240927691
best_error: 5.22563907484827
best_error: 5.225639056705551
