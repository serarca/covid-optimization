ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 74
days_switch 30
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.54842470818086
best_error: 101.54842454284588
best_error: 101.54842452636545
best_error: 19.728260464116197
best_error: 19.728260464113994
best_error: 19.728260459694624
best_error: 19.726902613236685
best_error: 19.726902608777884
best_error: 19.72135595889022
best_error: 19.7213559542782
best_error: 19.697169072654567
best_error: 19.697169067354338
best_error: 19.55434194742488
best_error: 19.55434193745014
best_error: 19.262872198122665
best_error: 19.262872176245303
best_error: 17.921707690188263
best_error: 17.92170752792062
best_error: 16.77245613575292
best_error: 16.77245583269336
best_error: 15.077314292895679
best_error: 15.07731379092796
best_error: 12.373712430564854
best_error: 12.373712418993975
best_error: 12.373712416707782
best_error: 12.373158584403058
best_error: 12.37315857285056
best_error: 12.373158570562186
best_error: 12.372674456568507
best_error: 12.3726744450452
best_error: 12.372674442741829
best_error: 12.372283403670647
best_error: 12.372283392160448
best_error: 12.372283389855516
best_error: 12.372059855202151
best_error: 12.372059843699446
best_error: 12.372059841393636
best_error: 12.371986581407604
best_error: 12.371986362609768
best_error: 12.371980707742878
best_error: 12.371980696240445
best_error: 12.371980693933772
best_error: 12.371121087205928
best_error: 12.371121075708382
best_error: 12.371121073394018
best_error: 12.367680672329456
best_error: 12.36768066085142
best_error: 12.36768065850634
best_error: 12.354303395908484
best_error: 12.354303176529768
best_error: 12.302387768264882
best_error: 12.302387551712147
best_error: 12.096184883720344
best_error: 12.096184705053801
best_error: 11.993279786603772
best_error: 11.993279613235607
best_error: 11.980901244442176
best_error: 11.980901231682578
best_error: 11.980901228760462
best_error: 11.966930794372267
best_error: 11.966930781706019
best_error: 11.966930778662629
best_error: 11.914483362734993
best_error: 11.914483350640497
best_error: 11.91448334691773
best_error: 11.736976003353188
best_error: 11.736975988784675
best_error: 11.736975985928774
best_error: 11.664706150214858
best_error: 11.6647061365565
best_error: 11.664706133125863
best_error: 11.634497049600263
best_error: 11.634497041439516
best_error: 11.634496866762355
best_error: 11.615442383318193
best_error: 11.615442381071572
best_error: 11.615442367033959
best_error: 11.605889972029871
best_error: 11.60588997202987
best_error: 11.60588996986987
best_error: 11.605889955830113
best_error: 11.596472895502256
best_error: 11.596472887317354
best_error: 11.596472713507689
best_error: 11.582059228380622
best_error: 11.582059226103988
best_error: 11.582059212080827
best_error: 11.541994635454996
best_error: 11.541994633260995
best_error: 11.541994619230818
best_error: 11.422007261016304
best_error: 11.422007244611445
best_error: 11.422006937234546
best_error: 11.198466344822842
best_error: 11.198466335444387
best_error: 11.198466133204844
best_error: 11.177132513234843
best_error: 11.177132510497243
best_error: 11.177132497089012
best_error: 11.050045210384923
best_error: 11.05004520754559
best_error: 10.99909719880642
best_error: 10.99909719708134
best_error: 10.99909719272062
best_error: 10.997738796038607
best_error: 10.997738795846725
best_error: 10.997738793954698
best_error: 10.99279517493624
best_error: 10.992795170108803
best_error: 10.985618059426972
best_error: 10.985618058298547
best_error: 10.985618018479576
best_error: 10.982453049797849
best_error: 10.982453048664457
best_error: 10.982453008392964
best_error: 10.971849198508021
best_error: 10.971849196822117
best_error: 10.97184914783659
best_error: 10.964603445807247
best_error: 10.96460343555442
best_error: 10.962851049900395
best_error: 10.962851045106586
best_error: 10.962489855178447
best_error: 10.962489850413172
best_error: 10.962248294838224
best_error: 10.962248292845244
best_error: 10.961862995313568
best_error: 10.961862993335185
best_error: 10.961570285716766
best_error: 10.961570283725516
best_error: 10.96136592395785
best_error: 10.961365921942493
best_error: 10.961164595104835
best_error: 10.961164593080603
best_error: 10.961060482952263
best_error: 10.961060482945964
best_error: 10.96106048092345
best_error: 10.96093325657262
best_error: 10.960933253377702
best_error: 10.960859373273548
best_error: 10.96085937006847
best_error: 10.960829664796117
best_error: 10.960829661588585
best_error: 10.960826862663573
best_error: 10.96082685945581
best_error: 10.960824897440485
best_error: 10.960824894232559
best_error: 10.960822124705302
best_error: 10.960822121497145
best_error: 10.96082090100081
best_error: 10.960820897792555
best_error: 10.960820198312462
best_error: 10.96082019510415
best_error: 10.960819072965576
best_error: 10.960819069757171
best_error: 10.96081806269115
best_error: 10.96081805948266
best_error: 10.960818024675268
best_error: 10.960818021466775
best_error: 10.960817988918729
best_error: 10.960817985710236
best_error: 10.960817947473501
best_error: 10.960817944265003
best_error: 10.960817910421637
best_error: 10.960817908116729
best_error: 10.960817845400616
best_error: 10.960817842306959
best_error: 10.960476509803978
best_error: 10.96047650640455
best_error: 10.959437142333918
best_error: 10.959437134222252
best_error: 10.959312662757638
best_error: 10.959312645674881
best_error: 10.954259464663396
best_error: 10.954259461528737
best_error: 10.95392058956039
best_error: 10.95392058642551
best_error: 10.953906499098704
best_error: 10.953906495964873
best_error: 10.953208546940987
best_error: 10.953208543807577
best_error: 10.952134737710342
best_error: 10.952134734613253
best_error: 10.951321114329684
best_error: 10.951321111214302
best_error: 10.951254239984475
best_error: 10.95125423686721
best_error: 10.95121523565356
best_error: 10.951215232521635
best_error: 10.951194387810938
best_error: 10.951194384679132
best_error: 10.944144167017209
best_error: 10.944144166452073
best_error: 10.944144132340181
best_error: 10.943880246976079
best_error: 10.943880243800269
best_error: 10.92031733769025
best_error: 10.920317334502652
best_error: 10.838635811563327
best_error: 10.838635810747725
best_error: 10.838635778834
best_error: 10.81991184229577
best_error: 10.819911839288098
best_error: 10.819911771612588
best_error: 10.677688189206608
best_error: 10.67768812523959
best_error: 10.654475754583716
best_error: 10.654475738071815
best_error: 10.654475737856558
best_error: 10.65111979587905
best_error: 10.651119779436748
best_error: 10.651119779220842
best_error: 10.651046736241982
best_error: 10.651046420748473
best_error: 10.620338272531656
best_error: 10.620338170447912
best_error: 10.61493062840239
best_error: 10.614930525171202
best_error: 10.61324297035421
best_error: 10.613242866831833
best_error: 10.613112212952416
best_error: 10.613111925081283
best_error: 10.612335209886602
best_error: 10.612335199218768
best_error: 10.612335199182292
best_error: 10.604651667168667
best_error: 10.604651655329588
best_error: 10.604651655258689
best_error: 10.603793374656357
best_error: 10.603793370877806
