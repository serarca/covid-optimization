ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.695718716860267
best_error: 10.695718714356778
best_error: 9.107288702122855
best_error: 9.107288615439174
best_error: 7.99013016074459
best_error: 7.990129997481032
best_error: 6.833324152252806
best_error: 6.833324140100558
best_error: 6.833323912335921
best_error: 6.741098304811961
best_error: 6.741098247565819
best_error: 6.741098059565946
best_error: 4.2577699500767014
best_error: 4.257769851839706
best_error: 4.2577697696960275
best_error: 3.84799776892169
best_error: 3.8479976840511085
best_error: 3.8479976243783547
best_error: 3.6066947020386535
best_error: 3.606694628603712
best_error: 3.6066945736467595
best_error: 3.4702279140290404
best_error: 3.470227843079408
best_error: 3.470227783363357
best_error: 3.457767443380508
best_error: 3.4577673737148
best_error: 3.457767311736746
best_error: 3.4516559942167424
best_error: 3.4516559247840743
best_error: 3.4516558629642855
best_error: 3.4468013860815767
best_error: 3.4468013166181954
best_error: 3.446801254456091
best_error: 3.4455204109123887
best_error: 3.4455203414409468
best_error: 3.4455202791885027
best_error: 3.4447128738219397
best_error: 3.444712804345434
best_error: 3.4447127420360397
best_error: 3.4443910067949544
best_error: 3.444390937316431
best_error: 3.4443908749843306
best_error: 3.44438859646612
best_error: 3.4443885269875727
best_error: 3.4443884646553076
best_error: 3.444387784968918
best_error: 3.4443877154903677
best_error: 3.4443876531580546
best_error: 3.444387259857746
best_error: 3.444387190379193
best_error: 3.44438710940869
best_error: 3.4443870970871924
best_error: 3.441768671723981
best_error: 3.4417686024900775
best_error: 3.4417685397051248
best_error: 3.4314515157425554
best_error: 3.4314514470854682
best_error: 3.4314513824738304
best_error: 3.3939005855133884
best_error: 3.393900522717863
best_error: 3.393900447444336
best_error: 3.282432534764596
best_error: 3.2824324991371787
best_error: 3.2824323584411346
best_error: 3.280565028781666
best_error: 3.2805649957444283
best_error: 3.2805648449279055
best_error: 3.2784368973324973
best_error: 3.278436864200536
best_error: 3.2784367122000053
best_error: 3.2729271748609374
best_error: 3.2729271445311365
best_error: 3.272926978732543
best_error: 3.2643918964029597
best_error: 3.2643918628257493
best_error: 3.264391696864993
best_error: 3.2520919226463634
best_error: 3.2520918753892603
best_error: 3.2520917086214487
best_error: 3.2494443000369766
best_error: 3.249444251415756
best_error: 3.2494440946113956
best_error: 3.248642049759842
best_error: 3.2486420000688456
best_error: 3.24864184542675
best_error: 3.2476802078395597
best_error: 3.2476801554965915
best_error: 3.2476800123234675
best_error: 3.1987538551802963
best_error: 3.1987537923987848
best_error: 3.1987536409112947
best_error: 3.170619429816647
best_error: 3.170619361136068
best_error: 3.1706192092438936
best_error: 3.1461583161300317
best_error: 3.1461582589860293
best_error: 3.1461580947473604
best_error: 3.049410804056373
best_error: 3.049410750262706
best_error: 3.0494105755618883
best_error: 3.028236691207077
best_error: 3.0282366395149194
best_error: 3.0282364582916084
best_error: 3.019588994848381
best_error: 3.019588943394912
best_error: 3.0195887628545908
best_error: 3.0156275566672304
best_error: 3.01562750522071
best_error: 3.0156273242350427
best_error: 3.0143553769926648
best_error: 3.0143553687457705
best_error: 3.014355338743029
best_error: 3.0140035083426264
best_error: 3.014003456994362
best_error: 3.014003275718336
best_error: 2.992868184755358
best_error: 2.9928681649889657
best_error: 2.992867907346702
best_error: 2.977013635986714
best_error: 2.9770136044074844
best_error: 2.977013401846559
best_error: 2.9744422463483238
best_error: 2.97444221772163
best_error: 2.9744420003310994
best_error: 2.973708153582077
best_error: 2.9737081242955172
best_error: 2.973707909740188
best_error: 2.9721495284899047
best_error: 2.9721494961306365
best_error: 2.97214929326903
best_error: 2.9691098733681915
best_error: 2.96910984034026
best_error: 2.969109641129036
best_error: 2.963897126386932
best_error: 2.9638970913970097
best_error: 2.9638968970558435
best_error: 2.9612559150769413
best_error: 2.961255879971394
best_error: 2.9612556856143453
best_error: 2.960770132309391
best_error: 2.9607700971824897
best_error: 2.9607699028226944
best_error: 2.9605305984317063
best_error: 2.96053056329424
best_error: 2.9605303689331546
best_error: 2.9603519234220226
best_error: 2.960351888276679
best_error: 2.960351693914605
best_error: 2.9602676189513195
best_error: 2.960267583802292
best_error: 2.9602673894397338
best_error: 2.9602046948706073
best_error: 2.9602046597188663
best_error: 2.960204465355898
best_error: 2.9601745710029546
best_error: 2.9601745358499496
best_error: 2.9601743414867547
best_error: 2.960152102291989
best_error: 2.9601520671380275
best_error: 2.960151872774672
best_error: 2.9601416435299495
best_error: 2.9601416083755447
best_error: 2.960141414012112
best_error: 2.960133742872732
best_error: 2.9601337077179837
best_error: 2.960133513354504
best_error: 2.960130150392606
best_error: 2.960130115237699
best_error: 2.9601299208742127
best_error: 2.96012790193339
best_error: 2.9601278667783855
best_error: 2.960127672414874
best_error: 2.960126365945023
best_error: 2.960126330789959
best_error: 2.9601261364264353
best_error: 2.960125528622428
best_error: 2.960125493467311
best_error: 2.960125299103787
best_error: 2.9601249397852167
best_error: 2.9601249046300975
best_error: 2.960124710266566
best_error: 2.960124631722122
best_error: 2.960124596566976
best_error: 2.9601244022034505
best_error: 2.9601243717935946
best_error: 2.9601241774300435
best_error: 2.9601241285115205
best_error: 2.9601240933563773
best_error: 2.960124078585986
best_error: 2.960124070495319
best_error: 2.9601240654769905
best_error: 2.9601240641295403
best_error: 2.9601240630833328
best_error: 2.9601240573693994
best_error: 2.9577086683457887
best_error: 2.957708635227786
best_error: 2.957708434310711
best_error: 2.9547228428027297
best_error: 2.954722810444779
best_error: 2.954722606080792
best_error: 2.9544352530571523
best_error: 2.954435223027347
best_error: 2.9544350106280284
best_error: 2.9537647696626776
best_error: 2.953764740196444
best_error: 2.9537645259942042
best_error: 2.9537049932752684
best_error: 2.9537049638116306
best_error: 2.9537047495990127
best_error: 2.953670376815093
best_error: 2.9536703473529426
best_error: 2.9536701331343336
best_error: 2.953652941344604
best_error: 2.9536529118832346
best_error: 2.9536526976615747
best_error: 2.9536413495450216
best_error: 2.953641320084146
best_error: 2.9536411058604823
best_error: 2.9535304388041927
best_error: 2.9535304101670206
best_error: 2.9535301931538323
best_error: 2.9534871196738504
best_error: 2.9534870913604854
best_error: 2.9534868732947044
best_error: 2.9533355355251016
best_error: 2.9533355072168783
best_error: 2.953335289130102
best_error: 2.953221392986774
best_error: 2.953221364682385
best_error: 2.9532211465798346
best_error: 2.9531865466647322
best_error: 2.9531865402049533
best_error: 2.953186506024017
best_error: 2.953182478154492
best_error: 2.9531824498514156
best_error: 2.953182231743493
best_error: 2.9531812289089885
best_error: 2.9531812224487224
best_error: 2.95318118826831
best_error: 2.9531804618513746
best_error: 2.9531804335483507
best_error: 2.9531802154401543
best_error: 2.953177262891198
best_error: 2.9531772345882645
best_error: 2.9531770164796445
best_error: 2.9531769225632836
best_error: 2.9531768942603964
best_error: 2.9531766761516978
best_error: 2.95317667127791
best_error: 2.9531764531692044
