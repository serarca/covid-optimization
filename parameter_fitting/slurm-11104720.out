ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 88
days_switch 65
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 96.68138105134203
best_error: 96.68138096154556
best_error: 96.68138091856495
best_error: 14.529527786884373
best_error: 14.529527786872926
best_error: 14.529527762469844
best_error: 14.339662946872489
best_error: 14.339662946859786
best_error: 14.339662916101036
best_error: 12.619841607450695
best_error: 12.619841606858476
best_error: 12.61984152031983
best_error: 12.407840739665168
best_error: 12.407840738724513
best_error: 12.407840667636085
best_error: 12.27669695987791
best_error: 12.276696958623043
best_error: 12.276696886566743
best_error: 12.157153947151155
best_error: 12.157153945528174
best_error: 12.157153877347506
best_error: 11.726841207251418
best_error: 11.72684120370713
best_error: 11.726841196883159
best_error: 11.723035358526245
best_error: 11.723035349345441
best_error: 11.714919196191905
best_error: 11.714919190609782
best_error: 11.714919188490358
best_error: 11.545171469019635
best_error: 11.545171461653519
best_error: 11.545171459503903
best_error: 11.420129310510092
best_error: 11.420129301739024
best_error: 11.420129300098878
best_error: 11.371629867226227
best_error: 11.371629863110027
best_error: 11.37162986195633
best_error: 11.298158280173821
best_error: 11.298158280173809
best_error: 11.298158279876155
best_error: 11.289950029717696
best_error: 11.289950010293289
best_error: 10.871453189480802
best_error: 10.871453189480771
best_error: 10.871453189080713
best_error: 10.08726159594794
best_error: 10.087261595947796
best_error: 10.087261595295153
best_error: 9.729551142722821
best_error: 9.729551133058028
best_error: 9.609721691959283
best_error: 9.609721691958887
best_error: 9.609721691140827
best_error: 9.410159153697085
best_error: 9.410159153696366
best_error: 9.410159152457679
best_error: 9.197385814292202
best_error: 9.197385814290856
best_error: 9.197385812718831
best_error: 8.665142133715893
best_error: 8.665142121956263
best_error: 8.66514207972938
best_error: 8.520347065345726
best_error: 8.52034704876708
best_error: 7.7549659872865
best_error: 7.754965942404498
best_error: 7.75496590861801
best_error: 7.196572727611103
best_error: 7.196572522437066
best_error: 7.0788634969451865
best_error: 7.078863420679822
best_error: 7.061687108768977
best_error: 7.061687060748625
best_error: 7.04419949715418
best_error: 7.044199466855131
best_error: 7.037449382792824
best_error: 7.037449351658834
best_error: 7.033679577090327
best_error: 7.03367954671334
best_error: 7.032031364804596
best_error: 7.032031334503033
best_error: 7.031063527028076
best_error: 7.031063496478277
best_error: 7.0308404361316805
best_error: 7.030840405524688
best_error: 7.030699056299019
best_error: 7.030699025655799
best_error: 7.030695768949935
best_error: 7.030695738305873
best_error: 7.030693804991972
best_error: 7.030693774347406
best_error: 7.030693477448583
best_error: 7.030693460102809
best_error: 7.030693446070218
best_error: 7.030693428724435
best_error: 7.030693424919916
best_error: 7.030693407574135
best_error: 7.0306933939067395
best_error: 7.030693381565501
best_error: 7.030693376433144
best_error: 7.02875358687545
best_error: 7.028753516938839
best_error: 7.027630591628246
best_error: 7.027630521365906
best_error: 7.023164846530453
best_error: 7.023164773786577
best_error: 7.00557041449481
best_error: 7.005570337646996
best_error: 6.946034890320123
best_error: 6.94603478885905
best_error: 6.7597636100801965
best_error: 6.759763511040507
best_error: 6.748740469925334
best_error: 6.748740437780841
best_error: 6.748740437023076
best_error: 6.642561369517676
best_error: 6.642561338791476
best_error: 6.567643118587514
best_error: 6.567643009220218
best_error: 6.552525944887842
best_error: 6.552525915979459
best_error: 6.5333176309532135
best_error: 6.533317604590343
best_error: 6.531185615955174
best_error: 6.531185483024451
best_error: 6.522881410453136
best_error: 6.52288138515058
best_error: 6.516298393823247
best_error: 6.516298369517568
best_error: 6.482737381843913
best_error: 6.482737106303441
best_error: 6.4822696612093615
best_error: 6.48226964850025
best_error: 6.481290955862195
best_error: 6.481290939660479
best_error: 6.47965167908753
best_error: 6.479651663679679
best_error: 6.475415273259
best_error: 6.4754149931190685
best_error: 6.470488749182296
best_error: 6.4704884595104355
best_error: 6.468775854842348
best_error: 6.468775559897443
best_error: 6.468247527403317
best_error: 6.46824752566351
best_error: 6.468247522654943
best_error: 6.46824751457239
best_error: 6.4666942249188235
best_error: 6.466693863031896
best_error: 6.46550588643143
best_error: 6.46550588053628
best_error: 6.465505876162463
best_error: 6.461923777200532
best_error: 6.461923768668222
best_error: 6.461923768575508
best_error: 6.437910733418908
best_error: 6.437910420070566
best_error: 6.435513915967076
best_error: 6.435513530206681
best_error: 6.329447280081279
best_error: 6.329447044262845
best_error: 6.321865334092049
best_error: 6.3218649782483896
best_error: 6.314566567913583
best_error: 6.314566317165999
best_error: 6.291846255764628
best_error: 6.291845901895623
best_error: 6.277851874774125
best_error: 6.277851482236066
best_error: 6.2544971797328275
best_error: 6.254496703480306
best_error: 6.22825424430371
best_error: 6.22825414046099
best_error: 6.188599989727125
best_error: 6.18859996590876
