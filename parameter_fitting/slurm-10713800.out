ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 11.870294235348023
best_error: 11.870294195265409
best_error: 11.870294171630894
best_error: 11.624823802555799
best_error: 11.624823748842957
best_error: 11.624823722502985
best_error: 10.562738624859406
best_error: 10.562738506144095
best_error: 10.562738487406438
best_error: 9.510685461300184
best_error: 9.510685290768588
best_error: 9.07159928354717
best_error: 9.071599109168952
best_error: 9.027471873667446
best_error: 9.02747170158139
best_error: 8.057235357098891
best_error: 8.05723522158334
best_error: 7.831131360755812
best_error: 7.831131238325549
best_error: 7.636577767965588
best_error: 7.636577650870295
best_error: 7.469222972154584
best_error: 7.46922286473969
best_error: 7.469222850949089
best_error: 7.0927412576289175
best_error: 7.092741166007102
best_error: 7.092741128367216
best_error: 6.8566703331962735
best_error: 6.856670242803446
best_error: 6.856670198788154
best_error: 6.721209141427645
best_error: 6.721209048881095
best_error: 6.721209005938293
best_error: 6.705787740221789
best_error: 6.70578764732632
best_error: 6.7057876043944535
best_error: 6.695737444988353
best_error: 6.6957373511954295
best_error: 6.695737309012712
best_error: 6.68224398496181
best_error: 6.682243765909387
best_error: 3.366952302406653
best_error: 3.3669520196165803
best_error: 3.283461973262519
best_error: 3.2834614221062397
best_error: 3.0239983385183677
best_error: 3.0239979555319945
best_error: 3.0019853230034257
best_error: 3.001984937174929
best_error: 2.9953015341350424
best_error: 2.995301146909452
best_error: 2.992536543870623
best_error: 2.9925361558621884
best_error: 2.992529585807745
best_error: 2.992529197798412
best_error: 2.9925259711996413
best_error: 2.992525583189844
best_error: 2.992525525510452
best_error: 2.9925254331737863
best_error: 2.9925254331674878
best_error: 2.9877328620888424
best_error: 2.987732465347002
best_error: 2.9851112471130365
best_error: 2.9851108378978983
best_error: 2.970262224048975
best_error: 2.9702618137812786
best_error: 2.914383757811453
best_error: 2.9143833448649796
best_error: 2.7691227084105066
best_error: 2.769122317967908
best_error: 2.7152971334036398
best_error: 2.715296721105612
best_error: 2.6723305203611023
best_error: 2.6723300814426687
best_error: 2.6365994901590426
best_error: 2.6365990209054826
best_error: 2.623218426748389
best_error: 2.6232179580653385
best_error: 2.613397553710019
best_error: 2.6133970716789547
best_error: 2.359549368318256
best_error: 2.3595489384117925
best_error: 2.2957458007437035
best_error: 2.2957453712277536
best_error: 2.274120257833264
best_error: 2.2741198277695363
best_error: 2.2626640876892603
best_error: 2.2626636563219966
best_error: 2.2601521278319887
best_error: 2.260152127830328
best_error: 2.2601519672676287
best_error: 2.2398362266933107
best_error: 2.2398357978684142
best_error: 2.22124583327495
best_error: 2.2212454262750034
best_error: 2.2175509319447206
best_error: 2.2175509319431734
best_error: 2.217550771581661
best_error: 2.2111130675973696
best_error: 2.211112618285302
best_error: 2.1922594852442328
best_error: 2.1922594852426296
best_error: 2.1922593248822766
best_error: 2.190166356596166
best_error: 2.1901659247380882
best_error: 2.18644574294236
best_error: 2.186445309672534
best_error: 2.185690600435482
best_error: 2.185690600433852
best_error: 2.1856904397765016
best_error: 2.1826385520096023
best_error: 2.1826385520079867
best_error: 2.182638391455515
best_error: 2.18179959676981
best_error: 2.18179916378586
best_error: 2.1792553576146014
best_error: 2.1792549243922408
best_error: 2.179030361121156
best_error: 2.17902992787498
best_error: 2.1789480110460064
best_error: 2.1789475777911034
best_error: 2.1789366850127383
best_error: 2.178936251756646
best_error: 2.1789296256524864
best_error: 2.1789291923956617
best_error: 2.1789291482793622
best_error: 2.178929127832916
best_error: 2.1789286945760216
best_error: 2.1789286561966277
best_error: 2.178928573832102
best_error: 2.1789285082773366
best_error: 2.1789285082697534
best_error: 2.1778434070233708
best_error: 2.177842969752315
best_error: 2.1775723396861046
best_error: 2.1775719023854188
best_error: 2.177359155965825
best_error: 2.1773587186406353
best_error: 2.1773502188886518
best_error: 2.1773497815624325
best_error: 2.1773494671429496
best_error: 2.177349467141365
best_error: 2.177349396398985
best_error: 2.1773493671475794
best_error: 2.1773493423775037
best_error: 2.1773493305533123
best_error: 2.177331622811122
best_error: 2.1773316228095396
best_error: 2.1773314622710456
best_error: 2.1772410750130384
best_error: 2.177241075011453
best_error: 2.1772347821201095
best_error: 2.1772347821185143
best_error: 2.1772346215764724
best_error: 2.1771439720169914
best_error: 2.1771435346708676
best_error: 2.1771320458861045
best_error: 2.1771316085385015
best_error: 2.177130348317845
best_error: 2.177129910970045
best_error: 2.177129496438061
best_error: 2.177129417506425
best_error: 2.1771292226831784
best_error: 2.1771292226815677
best_error: 2.177129210134222
best_error: 2.1771292101264668
best_error: 2.1771292068654162
best_error: 2.177129206597492
