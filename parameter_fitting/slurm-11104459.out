ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 68
days_switch 20
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 101.9745108717245
best_error: 101.9745106633781
best_error: 20.445505886614836
best_error: 20.445505886613873
best_error: 20.445505884594404
best_error: 20.445265127135254
best_error: 20.445265125109017
best_error: 20.44429520766338
best_error: 20.444295205613678
best_error: 20.44030241739902
best_error: 20.4403024152518
best_error: 20.422305647209413
best_error: 20.422305644603664
best_error: 20.29132867267795
best_error: 20.291328665389578
best_error: 20.289283621918532
best_error: 20.289283614530405
best_error: 20.018893502168446
best_error: 20.01889347286268
best_error: 15.680032991364694
best_error: 15.680032376383632
best_error: 14.735181533008916
best_error: 14.73518148774815
best_error: 14.338665102169498
best_error: 14.338665069963229
best_error: 14.315852651322217
best_error: 14.31585257024108
best_error: 14.309374106861258
best_error: 14.309374106453008
best_error: 14.309374037802499
best_error: 14.30033938012658
best_error: 14.300339377931373
best_error: 14.30033933417323
best_error: 14.293228080014336
best_error: 14.293228077704072
best_error: 14.293228035537833
best_error: 14.293180989191026
best_error: 14.293180960820163
best_error: 14.293168391983734
best_error: 14.293168389673504
best_error: 14.293168347502455
best_error: 14.293086223195857
best_error: 14.293086220885673
best_error: 14.293086178708016
best_error: 14.293077604122196
best_error: 14.29307760181202
best_error: 14.293077559633668
best_error: 14.293071874887099
best_error: 14.293071872576924
best_error: 14.293071830398109
best_error: 14.293069445886623
best_error: 14.293069443576453
best_error: 14.293069401397437
best_error: 14.293069016147891
best_error: 14.29306898777856
best_error: 14.293068547976404
best_error: 14.29306854566623
best_error: 14.29306850348715
best_error: 14.293068452035754
best_error: 14.293068449725585
best_error: 14.293068445793454
best_error: 14.293068442898264
best_error: 14.281283423509162
best_error: 14.281282912532497
best_error: 14.202172683599567
best_error: 14.202172288944992
best_error: 14.200253040103753
best_error: 14.200252953156308
best_error: 14.199330441753084
best_error: 14.199330052706816
best_error: 14.199329170599384
best_error: 14.199329083494462
best_error: 14.199327748678733
best_error: 14.199327359632168
best_error: 14.199326801830171
best_error: 14.199326714724851
best_error: 14.199326695077236
best_error: 14.19932649754061
best_error: 14.199326402289703
best_error: 14.198791535920375
best_error: 14.198791455846234
best_error: 14.197509487657943
best_error: 14.197509407456089
best_error: 14.196215561122987
best_error: 14.196215481119847
best_error: 14.19496190864988
best_error: 14.194961828855243
best_error: 14.190046612502897
best_error: 14.190046532883393
best_error: 14.189559504403224
best_error: 14.189559478028546
best_error: 14.189479693477308
best_error: 14.1894796931733
best_error: 14.189479619382464
best_error: 14.188443472599038
best_error: 14.188443446243749
best_error: 14.17510117083301
best_error: 14.175101144268467
best_error: 14.129628809557506
best_error: 14.129628807378296
best_error: 14.129628752871016
best_error: 14.092354700793875
best_error: 14.092354697871402
best_error: 14.092354652044968
best_error: 13.946178184213723
best_error: 13.946178178033634
best_error: 13.946178173471186
best_error: 13.834206091056876
best_error: 13.834206084174891
best_error: 13.834206084146933
best_error: 13.83420608073557
best_error: 13.834206080468135
best_error: 13.834202358722077
best_error: 13.834202351840174
best_error: 13.834202351812218
best_error: 13.83420234840084
best_error: 13.834202348133399
best_error: 13.834187430034067
best_error: 13.834187423152487
best_error: 13.834187423124547
best_error: 13.834187419713103
best_error: 13.834187419445652
best_error: 13.834127725700565
best_error: 13.834127718820287
best_error: 13.834127718792416
best_error: 13.834127715380703
best_error: 13.83412771511319
best_error: 13.833889075033841
best_error: 13.833889068158758
best_error: 13.83388906813116
best_error: 13.833889064718388
best_error: 13.833889064450643
best_error: 13.832954924123317
best_error: 13.832954917647411
best_error: 13.832954917629644
best_error: 13.83295491317715
best_error: 13.830312119845996
best_error: 13.830312114818776
best_error: 13.83031209883666
best_error: 13.829269381558127
best_error: 13.82926937405372
best_error: 13.82926937401287
best_error: 13.82926937259618
best_error: 13.829269370953387
best_error: 13.828368689791455
best_error: 13.8283686829481
best_error: 13.82836868292635
best_error: 13.828368679485202
best_error: 13.828368679214954
best_error: 13.823545507513712
best_error: 13.823545502922958
best_error: 13.823545479857305
best_error: 13.822111986319946
best_error: 13.82211197883733
best_error: 13.822111978803648
best_error: 13.822111977401313
best_error: 13.822111975718009
best_error: 13.820013452096916
best_error: 13.820013446373368
best_error: 13.820013441283217
best_error: 13.820013440700315
best_error: 13.819619131614449
best_error: 13.819619124623
best_error: 13.819619124604221
best_error: 13.81961912192655
best_error: 13.819619121044054
best_error: 13.81692720088546
best_error: 13.816927195978609
best_error: 13.816927177890202
best_error: 13.815559370050043
best_error: 13.815559363017577
best_error: 13.815559363000343
best_error: 13.815559360470546
best_error: 13.815559359472628
best_error: 13.812491956945484
best_error: 13.812491952406285
best_error: 13.812491928269193
best_error: 13.757883208917168
best_error: 13.757883204352485
best_error: 13.757883181525013
best_error: 13.751275338093382
best_error: 13.751275333585596
best_error: 13.751275309723857
best_error: 13.440167391259045
best_error: 13.440167382005985
best_error: 13.440167380845825
best_error: 13.145707460310609
best_error: 13.145707452311331
best_error: 13.145707450682949
best_error: 13.008734756699173
best_error: 13.008734749622349
best_error: 13.00873474770302
best_error: 12.976531580436138
best_error: 12.976531558086766
best_error: 12.972505530582488
best_error: 12.97250551435057
best_error: 12.970601396910471
best_error: 12.970601385566205
best_error: 12.968517999387943
best_error: 12.968517992832892
best_error: 12.968517992483374
best_error: 12.96851799061084
best_error: 12.931015118307691
best_error: 12.931015097636681
best_error: 12.63145463724966
best_error: 12.63145454704406
best_error: 12.610272637543776
best_error: 12.610272631223289
best_error: 12.61027248371772
best_error: 12.610151503076677
best_error: 12.610151496122391
best_error: 12.598660647442369
best_error: 12.598660640686994
best_error: 12.594392969628295
best_error: 12.594392962922715
best_error: 12.593627328429758
best_error: 12.593627321763705
best_error: 12.59336419337945
best_error: 12.593364186714151
best_error: 12.593245564326647
best_error: 12.593245557661682
best_error: 12.593131527918175
best_error: 12.593131521253502
best_error: 12.593129420022038
best_error: 12.593129413357378
best_error: 12.593129007431983
best_error: 12.593129000767322
best_error: 12.593128904654568
best_error: 12.593128897989907
best_error: 12.593128860320768
best_error: 12.593128860320764
best_error: 12.59312885365611
best_error: 12.593128840606418
best_error: 12.593128840606415
best_error: 12.593128833941758
best_error: 12.593128828730325
best_error: 12.593128822065673
best_error: 12.593128818304127
best_error: 12.590988231589169
best_error: 12.590988213957083
best_error: 12.590987851114718
best_error: 12.583090936968588
best_error: 12.583090930767549
best_error: 12.58309078338089
best_error: 12.578789895124334
best_error: 12.578789741596932
best_error: 12.577351448382391
best_error: 12.577351294874795
best_error: 12.577123326445419
best_error: 12.577123172940942
best_error: 12.576973789792708
best_error: 12.57697363629028
best_error: 12.576711556682216
best_error: 12.576711403701525
best_error: 12.576487275818188
best_error: 12.576487127111083
best_error: 12.576452760533382
best_error: 12.576452611824585
best_error: 12.576431611560057
best_error: 12.57643146285023
best_error: 12.576420250620554
best_error: 12.57642010191018
best_error: 12.576412729073546
best_error: 12.576412580362803
best_error: 12.576408967905495
best_error: 12.576408819194581
best_error: 12.576406279883704
best_error: 12.576406131172643
best_error: 12.576405046063831
best_error: 12.576404897352708
best_error: 12.576404094246165
best_error: 12.576403945535008
