ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 80
days_switch 85
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 107.02219367897612
best_error: 107.0221935426177
best_error: 107.02219351319378
best_error: 18.109775518625916
best_error: 18.109775518620435
best_error: 18.109775508771023
best_error: 18.099682693974835
best_error: 18.09968268385053
best_error: 18.056401106415276
best_error: 18.05640109508586
best_error: 17.816746314434923
best_error: 17.81674629498451
best_error: 15.403098050807774
best_error: 15.40309801683432
best_error: 14.590825250618629
best_error: 14.590825140511765
best_error: 13.178194720472163
best_error: 13.17819466794033
best_error: 12.984743389060592
best_error: 12.984743356314112
best_error: 12.913164182507352
best_error: 12.91316416041608
best_error: 12.742313368886645
best_error: 12.74231335968426
best_error: 12.742313351102874
best_error: 12.621602522000734
best_error: 12.62160249070268
best_error: 11.917112109492887
best_error: 11.91711209130229
best_error: 11.569227952270726
best_error: 11.56922786029218
best_error: 11.252565769389726
best_error: 11.252565760840012
best_error: 11.252565760400644
best_error: 11.177123183534587
best_error: 11.177123177423944
best_error: 11.177123174154481
best_error: 11.140239043573825
best_error: 11.140239040276615
best_error: 11.140239030777153
best_error: 11.135158634776962
best_error: 11.135158374153473
best_error: 11.133489720443029
best_error: 11.133489718735754
best_error: 11.133489706397754
best_error: 11.129953530889646
best_error: 11.129953281192758
best_error: 11.102866656882028
best_error: 11.102866656804455
best_error: 11.10286664028435
best_error: 11.094076219667434
best_error: 11.094076219667432
best_error: 11.094076219667263
best_error: 11.094076204080022
best_error: 11.063409913171517
best_error: 11.06340991317138
best_error: 11.063409901464421
best_error: 10.957533429417808
best_error: 10.95753319239738
best_error: 10.837470546499633
best_error: 10.837470526104042
best_error: 10.80888463202244
best_error: 10.80888458025813
best_error: 10.799793353946509
best_error: 10.799793135698845
best_error: 10.7888038441133
best_error: 10.788803653135293
best_error: 10.77414464963105
best_error: 10.774144496443682
best_error: 10.772703174997883
best_error: 10.772703158730236
best_error: 10.758354317523402
best_error: 10.758354302022575
best_error: 10.758097893289031
best_error: 10.758097877780656
best_error: 10.757855032395458
best_error: 10.757855016879892
best_error: 10.757683401616603
best_error: 10.757683385443764
best_error: 10.757424998573752
best_error: 10.757424982392454
best_error: 10.757253521832965
best_error: 10.75725350564603
best_error: 10.757176926803082
best_error: 10.757176874287511
best_error: 10.750863874079872
best_error: 10.750863825337255
best_error: 10.635771735924212
best_error: 10.635771733710838
best_error: 10.63577173016885
best_error: 10.634268124848912
best_error: 10.634268079644551
best_error: 10.612065141673998
best_error: 10.612065096438453
best_error: 10.612065095998114
best_error: 10.593199179967037
best_error: 10.593199135312142
best_error: 10.575906126420493
best_error: 10.57590607981025
best_error: 10.575906078643872
best_error: 10.566944363696361
best_error: 10.566944350200433
best_error: 10.47705015261439
best_error: 10.47705014421605
best_error: 10.40580685614427
best_error: 10.405806809714953
best_error: 10.40580679233858
best_error: 10.337698076606966
best_error: 10.33769803444542
best_error: 10.33769802144232
best_error: 10.273850074387394
best_error: 10.273850038975379
best_error: 10.273850036762648
best_error: 9.959588565641457
best_error: 9.959588510550024
best_error: 9.959588483162971
best_error: 9.897060320521653
best_error: 9.897060028175009
best_error: 9.822406866475875
best_error: 9.822406764969735
best_error: 9.786078831290482
best_error: 9.786078799039874
best_error: 9.764416062621716
best_error: 9.764416061333918
best_error: 9.764416057314046
best_error: 9.76441605658917
best_error: 9.76329644550575
best_error: 9.76329640502388
best_error: 9.763296396425206
best_error: 9.759985884765047
best_error: 9.7599858573802
best_error: 9.70584303455815
best_error: 9.705842989592659
best_error: 9.705842963634307
best_error: 9.67421877223413
best_error: 9.674218703848167
best_error: 9.644771014725164
best_error: 9.644771001277565
best_error: 9.63055816961081
best_error: 9.63055816820563
best_error: 9.630558167067392
best_error: 9.630558163597797
best_error: 9.630337533341379
best_error: 9.630337530189834
best_error: 9.63033752732174
best_error: 9.629637666610929
best_error: 9.629637663429408
best_error: 9.629637660583256
best_error: 9.629308169741437
best_error: 9.629308166568388
best_error: 9.629308163709883
best_error: 9.629114803117814
best_error: 9.62911479994975
best_error: 9.629114797083957
best_error: 9.62900266471744
best_error: 9.629002661516758
best_error: 9.629002658682248
best_error: 9.628950975748566
best_error: 9.62895097254923
best_error: 9.62895096971275
best_error: 9.628950530849593
best_error: 9.628950527650275
best_error: 9.628950524813758
best_error: 9.628950374459242
best_error: 9.628950371259931
best_error: 9.628950368423402
best_error: 9.628950330860347
best_error: 9.628950327661038
best_error: 9.628950324824507
best_error: 9.62895030221571
best_error: 9.628950299016397
best_error: 9.628950296179866
best_error: 9.62895025731267
best_error: 9.628950254113361
best_error: 9.628950251276827
best_error: 9.628950240570381
best_error: 9.628950216976095
best_error: 9.62895021517555
