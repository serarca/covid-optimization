ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 12.442496800169714
best_error: 12.442496771349298
best_error: 12.442496749669049
best_error: 12.320146951424835
best_error: 12.320146915829607
best_error: 12.320146891740409
best_error: 10.969683356473704
best_error: 10.969683228944701
best_error: 10.969683191753521
best_error: 9.309490922295462
best_error: 9.309490701095887
best_error: 8.839886335313068
best_error: 8.839886119954949
best_error: 8.816249696135118
best_error: 8.816249481753943
best_error: 8.202210766960237
best_error: 8.20221061297143
best_error: 7.73684228491976
best_error: 7.736842140142306
best_error: 7.386052436161082
best_error: 7.386052299091874
best_error: 7.1530509327016
best_error: 7.153050812498619
best_error: 7.002439727145466
best_error: 7.002439612039065
best_error: 7.0024396026560245
best_error: 6.902112144733929
best_error: 6.902112030366383
best_error: 6.902112016834545
best_error: 6.865942791915712
best_error: 6.865942682159095
best_error: 6.865942662166532
best_error: 6.742230418327109
best_error: 6.742230145057311
best_error: 4.598036492433698
best_error: 4.598036492433181
best_error: 4.384922226533707
best_error: 4.384921934996713
best_error: 4.1626919783719725
best_error: 4.162691606144735
best_error: 3.846424234771089
best_error: 3.8464238819659053
best_error: 3.487799783884612
best_error: 3.4877994674992383
best_error: 3.3295557348058114
best_error: 3.3295554252483353
best_error: 3.225629812902344
best_error: 3.225629504330092
best_error: 3.174879097998497
best_error: 3.174878787426346
best_error: 3.13721927777607
best_error: 3.137218964368964
best_error: 3.1371976586653325
best_error: 3.137197658664884
best_error: 3.1355083377288393
best_error: 3.135508024083424
best_error: 3.1343575296146815
best_error: 3.134357215809013
best_error: 3.134024819968908
best_error: 3.134024506116921
best_error: 3.133810193226713
best_error: 3.1338098793448506
best_error: 3.133797116362981
best_error: 3.133796802479292
best_error: 3.1337931771402676
best_error: 3.1337928632560175
best_error: 3.1337906364268657
best_error: 3.1337905830955646
best_error: 3.133790549391928
best_error: 3.13379050878342
best_error: 3.1337904554521407
best_error: 3.1337904217484724
best_error: 3.1337904213406853
best_error: 3.1337903680094206
best_error: 3.1151483282833805
best_error: 3.1151479959334543
best_error: 3.113632137703691
best_error: 3.113631797266169
best_error: 3.107986333203563
best_error: 3.107985990484562
best_error: 3.0907258685090753
best_error: 3.090725509835747
best_error: 3.021606313998483
best_error: 3.0216059499556263
best_error: 2.992781997931372
best_error: 2.9927816909034304
best_error: 2.9538384718326562
best_error: 2.95383812531618
best_error: 2.938025508024514
best_error: 2.9380251871359215
best_error: 2.9173620829984226
best_error: 2.917361746874843
best_error: 2.910755532466685
best_error: 2.9107551628332704
best_error: 2.852078769066232
best_error: 2.8520783711909408
best_error: 2.840246408582411
best_error: 2.840246009130964
best_error: 2.840245913309435
best_error: 2.840245530023288
best_error: 2.840244396330001
best_error: 2.8402439968783244
best_error: 2.840238263743816
best_error: 2.840237864291413
best_error: 2.8402137332868254
best_error: 2.840213333831548
best_error: 2.840115609663781
best_error: 2.8401152101969926
best_error: 2.83972308644824
best_error: 2.839722686935445
best_error: 2.8381525339616536
best_error: 2.838152134264739
best_error: 2.831879642274964
best_error: 2.8318792429771875
best_error: 2.806731760911151
best_error: 2.8067313617137017
best_error: 2.7071527042734607
best_error: 2.70715231331151
best_error: 2.668039493560342
best_error: 2.668039103566084
best_error: 2.6653781670390195
best_error: 2.6653777773926652
best_error: 2.6651384726101908
best_error: 2.6651384726096796
best_error: 2.6644894377317407
best_error: 2.6644890479766365
best_error: 2.6636053747087796
best_error: 2.6636049848454926
best_error: 2.6634505281457064
best_error: 2.663450138263472
best_error: 2.6633487870959907
best_error: 2.6633483972013177
best_error: 2.663317992274422
best_error: 2.663317992273915
best_error: 2.650015047879002
best_error: 2.65001465835073
best_error: 2.626799136685527
best_error: 2.626799136685004
best_error: 2.621378216588752
best_error: 2.6213782165882886
best_error: 2.6141762556285317
best_error: 2.6141762556280677
best_error: 2.609711914457522
best_error: 2.6097115436032876
best_error: 2.574127059168007
best_error: 2.574127059167594
best_error: 2.5591775527260534
best_error: 2.5591775527256324
best_error: 2.525305564543527
best_error: 2.525305564543037
best_error: 2.5253053889495156
best_error: 2.5102048418564173
best_error: 2.510204398541741
best_error: 2.4808862555294193
best_error: 2.4808858158549616
best_error: 2.479081474922979
best_error: 2.4790814749225376
best_error: 2.4790813006669548
best_error: 2.4775962458307967
best_error: 2.477595805823801
best_error: 2.475630980676509
best_error: 2.4756305404707595
best_error: 2.4752581714761592
best_error: 2.475257731232703
best_error: 2.4751023411442494
best_error: 2.4751019008850292
best_error: 2.475087699634519
best_error: 2.4750872593732876
best_error: 2.475081626696581
best_error: 2.4750816266961366
best_error: 2.475081452551853
best_error: 2.475080395045465
best_error: 2.47508010712447
best_error: 2.47507997113075
best_error: 2.4750799711275455
best_error: 2.4738994515612585
best_error: 2.4738990111600505
best_error: 2.471202494306377
best_error: 2.4712020496027582
best_error: 2.4711048491308576
best_error: 2.471104404413797
best_error: 2.471053408852519
best_error: 2.4710529641283885
best_error: 2.471023879639735
best_error: 2.471023434911533
best_error: 2.4710098795427315
best_error: 2.471009434812611
best_error: 2.471002335716451
best_error: 2.4710018909852867
best_error: 2.4709970346940704
best_error: 2.470996589962172
best_error: 2.4709948422577326
best_error: 2.4709948422544676
best_error: 2.470227810619961
best_error: 2.4702273657423968
best_error: 2.470179977814198
best_error: 2.4701799778137263
best_error: 2.4701798034960376
best_error: 2.469934835048104
best_error: 2.469934835047674
best_error: 2.4696224866203726
best_error: 2.4696220413436536
best_error: 2.469621444590384
best_error: 2.4696214445899285
best_error: 2.469569921867963
best_error: 2.4695699218675093
best_error: 2.4695650326751526
best_error: 2.469564587303474
best_error: 2.4695566879494946
best_error: 2.46955660667056
best_error: 2.469556544247833
best_error: 2.469556505427321
best_error: 2.469556505426858
best_error: 2.469551264015597
best_error: 2.4695508186124444
best_error: 2.4695470229287064
best_error: 2.469547022928253
best_error: 2.469542940076077
best_error: 2.469542494605609
