ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 70
days_switch 80
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 108.80482754402175
best_error: 108.80482744447679
best_error: 108.80482734999079
best_error: 20.2321338841329
best_error: 20.23213388413143
best_error: 20.232133881493937
best_error: 20.230968098260238
best_error: 20.230968098258757
best_error: 20.23096809558899
best_error: 20.22615891188166
best_error: 20.226158911880102
best_error: 20.22615890907469
best_error: 20.20421390585686
best_error: 20.204213905854814
best_error: 20.20421390237808
best_error: 20.02220311711628
best_error: 20.02220311708229
best_error: 20.02220310513763
best_error: 20.015315875028055
best_error: 20.015315874991238
best_error: 20.01531586264283
best_error: 19.370389346651102
best_error: 19.370389345546126
best_error: 19.370389280486755
best_error: 14.846030490132463
best_error: 14.846030462458863
best_error: 14.846030008309516
best_error: 13.653560649785016
best_error: 13.653560630383733
best_error: 13.653560383462896
best_error: 13.623559305215451
best_error: 13.623559298630882
best_error: 13.623559295762286
best_error: 13.598990746121945
best_error: 13.598990733547911
best_error: 13.59539126692292
best_error: 13.595391254260303
best_error: 13.593094391916296
best_error: 13.593094379287795
best_error: 13.59172926911435
best_error: 13.591729256436917
best_error: 13.59091505440075
best_error: 13.590915041674315
best_error: 13.590469067415373
best_error: 13.590469054712194
best_error: 13.59020140682382
best_error: 13.590201393443568
best_error: 13.590145544106381
best_error: 13.59014554410638
best_error: 13.59014553072803
best_error: 13.59011196022125
best_error: 13.590111946844047
best_error: 13.590091795572185
best_error: 13.590091782195666
best_error: 13.590079710334662
best_error: 13.590079696958554
best_error: 13.59007248588135
best_error: 13.590072472505486
best_error: 13.590068182438852
best_error: 13.590068169063136
best_error: 13.590063776970599
best_error: 13.590063763594998
best_error: 13.590061409067475
best_error: 13.59006139569194
best_error: 13.590061249769839
best_error: 13.590061236394309
best_error: 13.59006116213538
best_error: 13.590061148759851
best_error: 13.59006111390655
best_error: 13.590061100531024
best_error: 13.59006108735368
best_error: 13.590061073978157
best_error: 13.590061043995723
best_error: 13.589378553081456
best_error: 13.589378550969133
best_error: 13.58937854038704
best_error: 13.586711163973757
best_error: 13.586711161831909
best_error: 13.58671115143208
best_error: 13.576222963829416
best_error: 13.576222961665291
best_error: 13.576222951577972
best_error: 13.558312739993287
best_error: 13.558312732163195
best_error: 13.55831273211879
best_error: 13.558312730842061
best_error: 13.543333908633528
best_error: 13.54333374551269
best_error: 13.53366175773718
best_error: 13.533661655520362
best_error: 13.533655655057153
best_error: 13.533655552840191
best_error: 13.533652445776367
best_error: 13.533652343559353
best_error: 13.53365075904162
best_error: 13.533650656824562
best_error: 13.533649876101732
best_error: 13.533649773884658
best_error: 13.53364953767108
best_error: 13.533649530136334
best_error: 13.533649530105562
best_error: 13.533649528670065
best_error: 13.533594016678771
best_error: 13.533593914697654
best_error: 13.533313816199879
best_error: 13.5333137241703
best_error: 13.532679083633267
best_error: 13.532678991524838
best_error: 13.53017822613949
best_error: 13.53017813800476
best_error: 13.520744346128316
best_error: 13.520744271571424
best_error: 13.357994849546465
best_error: 13.357994837454662
best_error: 13.357994837337351
best_error: 13.246350999044118
best_error: 13.246350966181371
best_error: 13.246350966031166
best_error: 13.096622194301862
best_error: 13.096622162089458
best_error: 13.096622162067789
best_error: 13.061819420758317
best_error: 13.061819388693682
best_error: 12.915671239523784
best_error: 12.915671208119768
best_error: 12.6718596870747
best_error: 12.671859642409794
best_error: 12.40642699483713
best_error: 12.406426983764714
best_error: 12.40642698311807
best_error: 12.375233202371719
best_error: 12.37523318871689
best_error: 12.371533249797844
best_error: 12.37153323622222
best_error: 12.368965999875982
best_error: 12.368965986564062
best_error: 12.365536503051183
best_error: 12.365536489794863
best_error: 12.363589074659734
best_error: 12.363589061436608
best_error: 12.363495714074856
best_error: 12.363495700853287
best_error: 12.363436898776232
best_error: 12.36343688555566
best_error: 12.363380047113775
best_error: 12.363380046058921
best_error: 12.363380044929704
best_error: 12.363380038098171
best_error: 12.363375655704296
best_error: 12.363375642484606
best_error: 12.363291116791014
best_error: 12.363291103572582
best_error: 12.36328269844734
best_error: 12.36328268522902
best_error: 12.363278647892667
best_error: 12.363278634674419
best_error: 12.363272058069253
best_error: 12.363272057014909
best_error: 12.363272055872814
best_error: 12.363272049053535
best_error: 12.360223315795176
best_error: 12.360223314879786
best_error: 12.360223312334616
best_error: 12.360223306908177
best_error: 12.358844035839844
best_error: 12.358844035064747
best_error: 12.358844030658284
best_error: 12.358844027004771
best_error: 12.358521603298744
best_error: 12.358521602260689
best_error: 12.358521602217921
best_error: 12.358521594422042
best_error: 12.358264727557074
best_error: 12.358264725781003
best_error: 12.35826471865233
best_error: 12.358200750863748
best_error: 12.358200749060888
best_error: 12.358200741944412
best_error: 12.353838012977466
best_error: 12.35383799895709
best_error: 12.352575918232942
best_error: 12.352575916456999
best_error: 12.35257590928159
best_error: 12.349395595036114
best_error: 12.34939559324054
best_error: 12.34939558608814
best_error: 12.349193396323654
best_error: 12.349193382348536
best_error: 12.343022712470566
best_error: 12.343022643445108
best_error: 12.342733353648786
best_error: 12.342733284238477
best_error: 12.342382316634794
best_error: 12.34238224586569
best_error: 12.342380051351439
best_error: 12.342379980581761
best_error: 12.311926227162136
best_error: 12.31192615705982
best_error: 12.304237795529607
best_error: 12.304237730400198
best_error: 12.304204617535374
best_error: 12.304204608341646
best_error: 12.304163987120559
best_error: 12.304163921983177
best_error: 12.304155875995004
best_error: 12.304155866801617
best_error: 12.304155835700602
best_error: 12.304155803904496
best_error: 12.30001987314586
best_error: 12.300019776844502
best_error: 12.28118672802879
best_error: 12.281186382194118
best_error: 12.28054029762476
best_error: 12.280540296835628
best_error: 12.280540292776315
best_error: 12.280540289017834
best_error: 12.271760922972767
best_error: 12.271760902007614
best_error: 12.27173702276261
best_error: 12.271736730609657
best_error: 12.271343910697066
best_error: 12.271343879507231
best_error: 12.2709517754366
best_error: 12.270951472166015
best_error: 12.26997060544498
best_error: 12.269970557048978
best_error: 12.268556285634087
best_error: 12.268556211473514
best_error: 12.259237822599074
best_error: 12.259237749855885
best_error: 12.256113485200565
best_error: 12.256113425076204
best_error: 12.255052745463743
best_error: 12.255052690590933
best_error: 12.254824077231522
best_error: 12.254824066518438
best_error: 12.254809451016987
best_error: 12.254809396114592
best_error: 12.254801920235819
best_error: 12.254801909522884
best_error: 12.25479609499648
best_error: 12.254796040091922
best_error: 12.24548849369256
best_error: 12.245488482411746
best_error: 12.245091024282527
best_error: 12.24509097059185
