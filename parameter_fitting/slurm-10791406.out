ParameterFittingRandomToPython.py:117: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:130: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:133: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:136: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:139: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:142: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:145: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:206: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.344958576474554
best_error: 9.34495855673932
best_error: 3.7733428996157414
best_error: 3.77334289959028
best_error: 3.7733428981284405
best_error: 3.3710864669909677
best_error: 3.371086466900067
best_error: 3.371086464700782
best_error: 2.9305577700710725
best_error: 2.9305577698296545
best_error: 2.9305577674285335
best_error: 2.8902694750039806
best_error: 2.8902694743438464
best_error: 2.890269472534235
best_error: 2.8850542403804598
best_error: 2.885054232234998
best_error: 2.8807630798078727
best_error: 2.880763078768209
best_error: 2.880763076924784
best_error: 2.8795488645816834
best_error: 2.8795488641248066
best_error: 2.8795488615678138
best_error: 2.8790692944504586
best_error: 2.8790692934772975
best_error: 2.8790692913926703
best_error: 2.8774590773921593
best_error: 2.8774590686466186
best_error: 2.8645815389864255
best_error: 2.86458151409909
best_error: 2.85167395495414
best_error: 2.8516739163862495
best_error: 2.839332422484139
best_error: 2.839332422127232
best_error: 2.8393236052208963
best_error: 2.8393235586615186
best_error: 2.8301239767890136
best_error: 2.8301239225313344
best_error: 2.8299825001850047
best_error: 2.829982442368128
best_error: 2.8272759810568546
best_error: 2.8272759221365638
best_error: 2.824816621076477
best_error: 2.8248165618732193
best_error: 2.8243421754853513
best_error: 2.8243421746013335
best_error: 2.8243376633454402
best_error: 2.824337603993432
best_error: 2.824275121007021
best_error: 2.8242750619981734
best_error: 2.8242539878972375
best_error: 2.824253928971123
best_error: 2.82424007843316
best_error: 2.8242400196328425
best_error: 2.8242269295681153
best_error: 2.8242269275296534
best_error: 2.824219951886547
best_error: 2.8242199510324255
best_error: 2.824215315140742
best_error: 2.8242153143004707
best_error: 2.8242151329712732
best_error: 2.8242151309169
best_error: 2.8242146383041327
best_error: 2.8242146374639026
best_error: 2.8242138939908044
best_error: 2.8242138931346585
best_error: 2.824105163527817
best_error: 2.824105162478012
best_error: 2.8240828928689288
best_error: 2.8240828918039385
best_error: 2.8240716808415987
best_error: 2.8240716797695735
best_error: 2.824065396376745
best_error: 2.8240653953053227
best_error: 2.8240624671756533
best_error: 2.8240624661044893
best_error: 2.824062092118092
best_error: 2.8240620898275344
best_error: 2.824062072556477
best_error: 2.8240620714853426
best_error: 2.82406078125622
best_error: 2.8240607801769517
best_error: 2.824060710481678
best_error: 2.8240607081911397
best_error: 2.8240278928781395
best_error: 2.82402789172865
best_error: 2.8240262657626203
best_error: 2.8240262633725317
best_error: 2.8240136034993757
best_error: 2.824013602284452
best_error: 2.823973128993054
best_error: 2.8239731277489053
best_error: 2.823886557027063
best_error: 2.823886554361366
best_error: 2.8237790129317704
best_error: 2.8237790125440774
best_error: 2.823720739264265
best_error: 2.8237206884534864
best_error: 2.8231439211219693
best_error: 2.823143872958446
best_error: 2.8231038622299973
best_error: 2.823103857850822
best_error: 2.8224551074426287
best_error: 2.822455104097272
best_error: 2.8219266316075524
best_error: 2.8219266275048183
best_error: 2.8195940118892047
best_error: 2.8195940073761876
best_error: 2.8168333281365845
best_error: 2.816833323668669
best_error: 2.813687553589162
best_error: 2.813687546795342
best_error: 2.8129064988971773
best_error: 2.8129064935752774
best_error: 2.798751988798082
best_error: 2.7987519839092734
best_error: 2.798149907199261
best_error: 2.7981499018044294
best_error: 2.797281968107802
best_error: 2.7972819633937065
best_error: 2.7969510173730097
best_error: 2.796951012605784
best_error: 2.7810412984225805
best_error: 2.7810412937771227
best_error: 2.781041290834013
best_error: 2.768703029365363
best_error: 2.7687030281265943
best_error: 2.758621539611556
best_error: 2.75862149047206
best_error: 2.757609205765462
best_error: 2.757609205590037
best_error: 2.757400313234316
best_error: 2.7574003130540663
best_error: 2.757183765442581
best_error: 2.7571837113609634
best_error: 2.756988927297236
best_error: 2.756988927065854
best_error: 2.7567140408635185
best_error: 2.756714040619104
best_error: 2.756694136664758
best_error: 2.756694136419949
best_error: 2.756682241021322
best_error: 2.756682240776276
best_error: 2.7566750617126274
best_error: 2.7566750614633
best_error: 2.756671293515951
best_error: 2.756671293266554
best_error: 2.756669379878263
best_error: 2.756669379628821
best_error: 2.7566684191961603
best_error: 2.7566684189466817
best_error: 2.7566679425824026
best_error: 2.7566679423329283
best_error: 2.756667631411447
best_error: 2.756667631161963
best_error: 2.756667541279842
best_error: 2.756667541030353
best_error: 2.7566675409191057
best_error: 2.7566675093909447
best_error: 2.7566675091414625
best_error: 2.756667498345254
best_error: 2.756667496704073
best_error: 2.7566674964545874
best_error: 2.7566674867785737
best_error: 2.756667486529079
