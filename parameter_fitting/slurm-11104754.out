ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 92
days_switch 15
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 100.07924753073645
best_error: 100.07924739753997
best_error: 100.07924737425324
best_error: 16.094828886188402
best_error: 16.094828884901094
best_error: 16.094828883251747
best_error: 16.094828883030996
best_error: 16.08985882237021
best_error: 16.089858820993364
best_error: 16.08985881921072
best_error: 16.07003402655313
best_error: 16.070034025265667
best_error: 16.07003402359689
best_error: 16.006362768249744
best_error: 16.006362768246813
best_error: 16.006362767974377
best_error: 16.0063627667842
best_error: 15.807173729068975
best_error: 15.807173729062939
best_error: 15.807173728780535
best_error: 15.522293628566253
best_error: 15.52229362855148
best_error: 15.40338068947982
best_error: 15.403380689464768
best_error: 14.842976017332115
best_error: 14.842976017291242
best_error: 14.842976013815097
best_error: 14.778631656497415
best_error: 14.778631656411614
best_error: 14.711127955744484
best_error: 14.711127955657322
best_error: 14.67395652805098
best_error: 14.673956527953528
best_error: 14.624344685371492
best_error: 14.62434468530526
best_error: 14.624344684776297
best_error: 14.59866770088988
best_error: 14.598667700829377
best_error: 14.598667698007066
best_error: 14.52363478267497
best_error: 14.523634782606539
best_error: 14.523634776617607
best_error: 14.501394558332393
best_error: 14.501394558267792
best_error: 14.501394554491302
best_error: 14.471071418249315
best_error: 14.47107141817732
best_error: 14.471071415376642
best_error: 14.466307080761569
best_error: 14.466307080689951
best_error: 14.46630707749692
best_error: 14.462679313732192
best_error: 14.462679313651389
best_error: 14.461587210562447
best_error: 14.461587210474406
best_error: 14.461587210288059
best_error: 14.459923439977933
best_error: 14.45992343989026
best_error: 14.45992343970202
best_error: 14.457097892871353
best_error: 14.45709789279302
best_error: 14.457097892297483
best_error: 14.449274379476309
best_error: 14.449274379406171
best_error: 14.4492743766466
best_error: 14.407093854575027
best_error: 14.407093854516928
best_error: 14.407093851020235
best_error: 14.401199299410788
best_error: 14.40119929934902
best_error: 14.401199296786814
best_error: 14.396370681527028
best_error: 14.396370681461828
best_error: 14.39637067977582
best_error: 14.39606453896392
best_error: 14.396064538894322
best_error: 14.395951610349197
best_error: 14.395951610281339
best_error: 14.395951610020733
best_error: 14.395939143318595
best_error: 14.395939143249102
best_error: 14.395936105742216
best_error: 14.395936105674346
best_error: 14.395936105374382
best_error: 14.395935062592985
best_error: 14.395935062523503
best_error: 14.395934978751022
best_error: 14.395934978683147
best_error: 14.395934978380701
best_error: 14.39592932661122
best_error: 14.395929326543314
best_error: 14.395929326241403
best_error: 14.39592832443918
best_error: 14.395928324371436
best_error: 14.395928324072091
best_error: 14.395928191535631
best_error: 14.39592819146773
best_error: 14.395928191165911
best_error: 14.395927711215021
best_error: 14.395927711147277
best_error: 14.395927710847886
best_error: 14.395927677218786
best_error: 14.395927677150853
best_error: 14.39592767684907
best_error: 14.395925074499022
best_error: 14.395925074429256
best_error: 14.39586664039407
best_error: 14.395866640319097
best_error: 14.395584212272846
best_error: 14.395584212172084
best_error: 14.393026192411174
best_error: 14.393026192074228
best_error: 14.377027924345427
best_error: 14.377027922190646
best_error: 13.92452435486393
best_error: 13.924524335606389
best_error: 13.924524295199932
best_error: 13.480594235600233
best_error: 13.480594235299309
best_error: 13.480594225156043
best_error: 13.480594176075865
best_error: 13.480124182533954
best_error: 13.480124181324616
best_error: 13.480124178521105
best_error: 13.480124121221774
best_error: 13.479705928629402
best_error: 13.479705928376497
best_error: 13.479705928336578
best_error: 13.479705925977894
best_error: 13.479705868764603
best_error: 13.475499914089095
best_error: 13.475499912593985
best_error: 13.475499854047928
best_error: 13.460672227662265
best_error: 13.460672227662261
best_error: 13.460672227660869
best_error: 13.460672166131332
best_error: 13.426537495447997
best_error: 13.42653749544649
best_error: 13.426537431717813
best_error: 13.416071522974596
best_error: 13.416071517816437
best_error: 13.41607146003982
best_error: 13.415062375081446
best_error: 13.415062372830011
best_error: 13.415062312151216
best_error: 13.413389330475033
best_error: 13.413389330475027
best_error: 13.413389330473603
best_error: 13.413389267278275
best_error: 13.407545756520417
best_error: 13.407545756518852
best_error: 13.407545691900044
best_error: 13.386547069114464
best_error: 13.386547069114462
best_error: 13.38654706911446
best_error: 13.38654706911295
best_error: 13.386547006392464
best_error: 13.306319171655481
best_error: 13.306319171291094
best_error: 13.306319162061389
best_error: 13.306319115005252
best_error: 13.114140938932929
best_error: 13.114140930921021
best_error: 13.114140892199696
best_error: 13.114140847288768
best_error: 12.911497978432589
best_error: 12.911497967911826
best_error: 12.91149790139158
best_error: 12.911497861705486
best_error: 12.550873276656656
best_error: 12.550873276654201
best_error: 12.534080818726368
best_error: 12.534080810107387
best_error: 12.533734916137998
best_error: 12.533734912969546
best_error: 12.533533780914436
best_error: 12.533533777566879
best_error: 12.532891400307175
best_error: 12.532891397026768
best_error: 12.532506667141384
best_error: 12.532506663791791
best_error: 12.532506659391526
best_error: 12.529395280264133
best_error: 12.529395280264131
best_error: 12.529395280261319
best_error: 12.529395280056896
best_error: 12.52936668557831
best_error: 12.529366685578307
best_error: 12.529366685575493
best_error: 12.529366685370782
best_error: 12.526904106413554
best_error: 12.526904098719603
best_error: 12.522987645956592
best_error: 12.522987637611815
best_error: 12.508205918728251
best_error: 12.508205918558737
best_error: 12.50820590598287
best_error: 12.508195825188588
best_error: 12.508195824148363
best_error: 12.508195805241673
best_error: 12.5081894866232
best_error: 12.50818948645016
best_error: 12.508189473875198
best_error: 12.508179308531659
best_error: 12.50817930742931
best_error: 12.508179288205813
best_error: 12.486455948342584
best_error: 12.486455948238756
best_error: 12.486455944292477
best_error: 12.486455938795558
