ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 14.534776816501761
best_error: 14.534776805750312
best_error: 14.5347767674556
best_error: 11.664215490635815
best_error: 11.664215403948669
best_error: 8.160011748049808
best_error: 8.160011654501476
best_error: 7.759688521563106
best_error: 7.759688443975451
best_error: 7.471156813981687
best_error: 7.471156753846543
best_error: 7.471156741842242
best_error: 7.287566863066852
best_error: 7.287566825486444
best_error: 7.287566797300876
best_error: 7.153778744803677
best_error: 7.153778711966497
best_error: 7.153778679763482
best_error: 7.080865986051153
best_error: 7.080865951789123
best_error: 7.080865920047303
best_error: 7.019336225850962
best_error: 7.019336195269272
best_error: 7.019336160653316
best_error: 6.989516710461721
best_error: 6.989516679576925
best_error: 6.98951664494237
best_error: 6.963967773403239
best_error: 6.96396774239555
best_error: 6.9639677076508395
best_error: 6.963927086952962
best_error: 6.96392705594389
best_error: 6.96392702119982
best_error: 6.963901910615487
best_error: 6.963901879605562
best_error: 6.963901844861884
best_error: 6.963881618412736
best_error: 6.963881587402115
best_error: 6.963881552658736
best_error: 6.9638712136366125
best_error: 6.963871182625635
best_error: 6.963871147882449
best_error: 6.963861665932367
best_error: 6.963861634921059
best_error: 6.963861600178035
best_error: 6.963857656769138
best_error: 6.963857625757699
best_error: 6.963857591014733
best_error: 6.963855100300881
best_error: 6.963855069289358
best_error: 6.963855034546427
best_error: 6.963853384329741
best_error: 6.9638533533181555
best_error: 6.963853318575239
best_error: 6.963852184944753
best_error: 6.963852153933125
best_error: 6.963852119190248
best_error: 6.963851402619983
best_error: 6.96385137160833
best_error: 6.96385133686546
best_error: 6.963850888207712
best_error: 6.963850857196039
best_error: 6.963850822453161
best_error: 6.9638505120032255
best_error: 6.963850480991537
best_error: 6.963850446248694
best_error: 6.963850232158596
best_error: 6.96385020114691
best_error: 6.963850166404056
best_error: 6.963850102295517
best_error: 6.963850071283814
best_error: 6.963850036540965
best_error: 6.963850016793666
best_error: 6.963849985781957
best_error: 6.963849951039097
best_error: 6.963849889484059
best_error: 6.963849808458576
best_error: 6.9638497427040384
best_error: 6.963849661574474
best_error: 6.963849660933801
best_error: 6.963849353437846
best_error: 6.963849287683264
best_error: 6.96384812089147
best_error: 6.963848089879687
best_error: 6.9638480551369035
best_error: 6.963846285102019
best_error: 6.963846254090152
best_error: 6.963846219347392
best_error: 6.963838941948763
best_error: 6.963838910936575
best_error: 6.963838876194001
best_error: 6.963809569409574
best_error: 6.963809538396079
best_error: 6.963809503654252
best_error: 6.96369208043426
best_error: 6.963692049415556
best_error: 6.96369201467668
best_error: 6.9632221434388715
best_error: 6.963222112399325
best_error: 6.963222077672262
best_error: 6.961342698125461
best_error: 6.961342667002547
best_error: 6.9613426323227525
best_error: 6.953829770670832
best_error: 6.953829739214658
best_error: 6.953829704724104
best_error: 6.923856424876105
best_error: 6.923856392089842
best_error: 6.923856358358403
best_error: 6.805312418558586
best_error: 6.805312379758692
best_error: 6.805312349601422
best_error: 6.355492040882758
best_error: 6.355491979149399
best_error: 6.3554919636070455
best_error: 5.756201806624162
best_error: 5.756201699847185
best_error: 5.756193285785244
best_error: 5.756193179060002
best_error: 5.736386018773679
best_error: 5.7363859174347045
best_error: 5.7179029630177265
best_error: 5.717902868092424
best_error: 5.685760108534634
best_error: 5.685760012505673
best_error: 5.633982670765782
best_error: 5.633982577669411
best_error: 5.625144358210724
best_error: 5.625144284994635
best_error: 5.598617591412414
best_error: 5.598617498979339
best_error: 5.593963211128802
best_error: 5.593963118466908
best_error: 5.59257151324477
best_error: 5.59257142050081
best_error: 5.5913124451985805
best_error: 5.591312352380628
best_error: 5.590681563915491
best_error: 5.590681471060556
best_error: 5.590109470573104
best_error: 5.590109377684678
best_error: 5.5898299257639845
best_error: 5.589829832859218
best_error: 5.58957507632347
best_error: 5.589574983403831
best_error: 5.589534470617984
best_error: 5.589534377695966
best_error: 5.589497506255904
best_error: 5.589497413331723
best_error: 5.589480076697303
best_error: 5.589479983772113
best_error: 5.58947947532754
best_error: 5.58947938240231
best_error: 5.589478931135858
best_error: 5.589478838210601
best_error: 5.58947873128586
best_error: 5.589478638360587
best_error: 5.589478619654114
best_error: 5.58947852672884
best_error: 5.589478404101032
best_error: 5.589478311175743
best_error: 5.58947823689774
best_error: 5.589478190061012
best_error: 5.589478171838759
