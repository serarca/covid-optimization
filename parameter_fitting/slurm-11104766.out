ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 92
days_switch 55
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 100.4593674405458
best_error: 100.45936730918591
best_error: 19.490648215472937
best_error: 19.490647949109714
best_error: 19.49064609805778
best_error: 15.333513668311545
best_error: 15.33351366825411
best_error: 15.333513655760356
best_error: 15.329573131493103
best_error: 15.32957313143544
best_error: 15.329573118960573
best_error: 15.32068489563527
best_error: 15.3206848955652
best_error: 15.320684889930206
best_error: 15.312851271736232
best_error: 15.312851271662096
best_error: 15.312851266499196
best_error: 15.290234494592955
best_error: 15.29023449452666
best_error: 15.290234485433288
best_error: 15.255976321833007
best_error: 15.255976321804377
best_error: 15.255976313972713
best_error: 15.225505050577025
best_error: 15.22550505049129
best_error: 15.225505050265008
best_error: 15.225505042180163
best_error: 15.156087657785692
best_error: 15.15608765741666
best_error: 15.156087640345856
best_error: 14.9014850643559
best_error: 14.901485061910135
best_error: 14.901485015966191
best_error: 14.837967804015133
best_error: 14.837967793473505
best_error: 14.837967742233623
best_error: 14.837389739203694
best_error: 14.837389735168912
best_error: 14.837389680835006
best_error: 14.717838724108502
best_error: 14.717838714366575
best_error: 14.71783865045441
best_error: 14.193194795510571
best_error: 14.19319477395917
best_error: 14.193194768292328
best_error: 14.028332279641436
best_error: 14.028332263258582
best_error: 14.028332152290034
best_error: 13.955523098361153
best_error: 13.955523082270693
best_error: 13.955523076043555
best_error: 13.923812989181371
best_error: 13.92381297439253
best_error: 13.603483279194968
best_error: 13.603483278768287
best_error: 13.60348327258326
best_error: 13.539830933146336
best_error: 13.539830930516075
best_error: 13.539830904728412
best_error: 13.48848949069837
best_error: 13.488489490285298
best_error: 13.488489487439548
best_error: 13.271610665338994
best_error: 13.271610655849955
best_error: 13.271610558765671
best_error: 12.88484722681731
best_error: 12.884847226816184
best_error: 12.884847226395056
best_error: 12.884847217330904
best_error: 12.883070450697545
best_error: 12.883070450696401
best_error: 12.883070450260721
best_error: 12.883070440942404
best_error: 12.882659352330435
best_error: 12.882659348145289
best_error: 12.882659341331479
best_error: 12.8823525152269
best_error: 12.882352515225767
best_error: 12.882352514770403
best_error: 12.88235250416985
best_error: 12.8822432891738
best_error: 12.88224328917266
best_error: 12.882243288712154
best_error: 12.882243278043116
best_error: 12.8820830551523
best_error: 12.882083055151153
best_error: 12.882083054680994
best_error: 12.882083043877374
best_error: 12.881907249886394
best_error: 12.88190724988523
best_error: 12.881907249403966
best_error: 12.881907238519522
best_error: 12.881795927806357
best_error: 12.88179592780519
best_error: 12.881795927318006
best_error: 12.881795916417085
best_error: 12.881672319746079
best_error: 12.8816723197449
best_error: 12.881672319251074
best_error: 12.881672308256851
best_error: 12.881636686924852
best_error: 12.881636686923708
best_error: 12.881636686424507
best_error: 12.881636674449974
best_error: 12.849132589402387
best_error: 12.849132588977678
best_error: 12.849132588910859
best_error: 12.84913257803531
best_error: 12.847697293114587
best_error: 12.847697293113571
best_error: 12.847697292601278
best_error: 12.847697280243725
best_error: 12.847572827024
best_error: 12.847572826616833
best_error: 12.847572826499674
best_error: 12.847572814132288
best_error: 12.847565322974287
best_error: 12.847565322566009
best_error: 12.847565322449425
best_error: 12.84756531008032
best_error: 12.847558911690609
best_error: 12.847558911281382
best_error: 12.847558911165304
best_error: 12.847558898794748
best_error: 12.847535901383345
best_error: 12.847535900970806
best_error: 12.847535900856471
best_error: 12.847535888480845
best_error: 12.847521278918112
best_error: 12.847521278504018
best_error: 12.847521278390255
best_error: 12.8475212660117
best_error: 12.847518328287414
best_error: 12.847518327872892
best_error: 12.847518327759362
best_error: 12.84751831538018
best_error: 12.847516319743631
best_error: 12.84751631932885
best_error: 12.847516319215448
best_error: 12.847516306835837
best_error: 12.847508958317492
best_error: 12.847508957902201
best_error: 12.847508957788826
best_error: 12.847508945407876
best_error: 12.847505811344
best_error: 12.847505810928268
best_error: 12.847505810815122
best_error: 12.847505798433506
best_error: 12.847505477294645
best_error: 12.847505476878863
best_error: 12.847505476765749
best_error: 12.847505464384062
best_error: 12.84750523298937
best_error: 12.847505232573559
best_error: 12.847505232460453
best_error: 12.84750522007872
best_error: 12.84750421120104
best_error: 12.847504211200024
best_error: 12.84750421068807
best_error: 12.847504198381056
best_error: 12.721525376806643
best_error: 12.721525357888972
best_error: 12.721525203987134
best_error: 12.612401010630816
best_error: 12.612400994981813
best_error: 12.612400879955642
best_error: 12.575595753275994
best_error: 12.575595751685801
best_error: 12.569996210833628
best_error: 12.569996199801043
best_error: 12.452065251720436
best_error: 12.45206524430886
best_error: 12.452065169389233
best_error: 12.435735662791405
best_error: 12.435735654993023
best_error: 12.435735577925165
best_error: 12.39639236969504
best_error: 12.396392357922728
best_error: 12.396392257715002
best_error: 12.389510936153933
best_error: 12.389510926386738
best_error: 12.38951083798102
best_error: 12.365000459461836
best_error: 12.36500041793899
best_error: 12.359842502947387
best_error: 12.359842500629494
best_error: 12.359842457800692
best_error: 12.353702223986465
best_error: 12.353702221124696
best_error: 12.353702175960862
best_error: 12.346605293106776
best_error: 12.346605278023102
best_error: 12.34490616276777
best_error: 12.344906159651906
best_error: 12.34490611381986
best_error: 12.337368369338467
best_error: 12.337368354694068
best_error: 12.333631682489191
best_error: 12.333631682359599
best_error: 12.33363167999643
best_error: 12.332905207510583
best_error: 12.332905193362475
best_error: 12.332905071271181
best_error: 12.32765319083982
best_error: 12.327653188581976
best_error: 12.327653140889128
best_error: 12.30949796391544
best_error: 12.309497961579217
best_error: 12.309497913753287
best_error: 12.279019841928484
best_error: 12.27901983295077
best_error: 12.279019736375599
best_error: 12.263093517981975
best_error: 12.26309351087695
best_error: 12.2630934273799
best_error: 12.251308457633943
best_error: 12.25130845145674
best_error: 12.251308373053917
best_error: 12.218081118348955
best_error: 12.218081115021612
best_error: 12.21808110981652
best_error: 12.218078753647706
best_error: 12.218078749548175
best_error: 12.218078745114804
best_error: 12.218078664882974
best_error: 12.218078660784025
best_error: 12.218078656350038
best_error: 12.21807842003962
best_error: 12.218078415942234
best_error: 12.218078411506593
best_error: 12.218078217590557
best_error: 12.21807821349448
best_error: 12.21807820905746
best_error: 12.218078121760572
best_error: 12.218078117665101
best_error: 12.218078113227437
best_error: 12.218078040837497
best_error: 12.218078036742549
best_error: 12.218078032304334
best_error: 12.218078031145357
best_error: 12.218078026707119
best_error: 12.218078026420553
best_error: 12.218078021982274
