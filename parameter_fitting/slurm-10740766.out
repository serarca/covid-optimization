ParameterFittingRandomToPython.py:122: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:149: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:150: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:211: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:213: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.773392431119026
best_error: 10.773392419331028
best_error: 10.388346182788748
best_error: 10.38834612886082
best_error: 6.39394998695507
best_error: 6.393949479156948
best_error: 5.3512226406524634
best_error: 5.351222422826592
best_error: 5.301548593908272
best_error: 5.301548593907732
best_error: 5.301548582777533
best_error: 5.301078840823107
best_error: 5.301078828754262
best_error: 5.301078826269968
best_error: 5.29691508007669
best_error: 5.29691508007613
best_error: 5.2969150670169665
best_error: 5.220794634468208
best_error: 5.220794634467698
best_error: 5.2207946247556185
best_error: 5.191576904304083
best_error: 5.191576904303674
best_error: 5.14306477053142
best_error: 5.143064770531018
best_error: 4.997323159005173
best_error: 4.997323159004825
best_error: 4.573360525687754
best_error: 4.573360525687333
best_error: 4.500070672338328
best_error: 4.500070672338077
best_error: 4.460486264043121
best_error: 4.460486170963917
best_error: 4.45922356996398
best_error: 4.459223569963717
best_error: 4.459223567897365
best_error: 4.456085644784992
best_error: 4.456085644784741
best_error: 4.45608564200495
best_error: 4.455528544045498
best_error: 4.455528501750788
best_error: 4.455303968483063
best_error: 4.455303968482807
best_error: 4.45530396568063
best_error: 4.4548664500726645
best_error: 4.454866449600538
best_error: 4.454866448217931
best_error: 4.45486644645273
best_error: 4.454857217614853
best_error: 4.45485719805726
best_error: 4.454723596617069
best_error: 4.454723596616821
best_error: 4.454723593000461
best_error: 4.4544346296005735
best_error: 4.454434629600334
best_error: 4.4544346259698795
best_error: 4.452693083181358
best_error: 4.4526930831811375
best_error: 4.452693080239872
best_error: 4.448322329778553
best_error: 4.448322329778366
best_error: 4.448322326509897
best_error: 4.428663446311429
best_error: 4.428663446311357
best_error: 4.4137887807046905
best_error: 4.4137887807045635
best_error: 4.413788777990138
best_error: 4.3837808410392975
best_error: 4.383780841039077
best_error: 4.381881148008399
best_error: 4.3818811480080795
best_error: 4.378383352590927
best_error: 4.378383352590582
best_error: 4.375030772551808
best_error: 4.375030772551504
best_error: 4.332396105290546
best_error: 4.3323961052902815
best_error: 4.282496901790797
best_error: 4.282496836961716
best_error: 4.209145863041741
best_error: 4.20914586304144
best_error: 4.20914583261148
best_error: 4.183182605462691
best_error: 4.183182605462448
best_error: 4.183182597141065
best_error: 4.183105123063714
best_error: 4.183105123063475
best_error: 4.183105114671965
best_error: 4.183102191684612
best_error: 4.183102191684367
best_error: 4.183102183293145
best_error: 4.183101037371769
best_error: 4.183101037371525
best_error: 4.18310102898049
best_error: 4.183100724915851
best_error: 4.18310072491561
best_error: 4.18310071652462
best_error: 4.1831006292909665
best_error: 4.183100629290726
best_error: 4.183100620899745
best_error: 4.183100613190378
best_error: 4.182811890250395
best_error: 4.182811834114048
best_error: 4.182242950992486
best_error: 4.182242890145899
best_error: 4.182163419063472
best_error: 4.18216335623116
best_error: 4.182149622119833
best_error: 4.182149559128967
best_error: 4.182148179004231
best_error: 4.182148116015604
best_error: 4.18214757540194
best_error: 4.182147512412096
best_error: 4.18214728774983
best_error: 4.18214722475941
best_error: 4.182147148953969
best_error: 4.182147085963268
best_error: 4.182147060781944
best_error: 4.182146997791066
best_error: 4.182146959948275
best_error: 4.182146044421015
best_error: 4.182145981412765
best_error: 4.182141339537434
best_error: 4.182141276529072
best_error: 4.182122521622197
best_error: 4.182122458606608
best_error: 4.182047293933155
best_error: 4.182047230790956
best_error: 4.1817487909229705
best_error: 4.181748726992145
best_error: 4.180853774030899
best_error: 4.18085370851426
best_error: 4.180816777864443
best_error: 4.180816712930213
best_error: 4.180736405132162
best_error: 4.180736342470848
best_error: 4.180671364121365
best_error: 4.180671301528495
best_error: 4.18042266282134
best_error: 4.1804226016225945
best_error: 4.179972740849623
best_error: 4.179972724386065
best_error: 4.179713961730603
best_error: 4.179713943387162
best_error: 4.17971172278333
best_error: 4.17971172278308
best_error: 4.1797117223811275
best_error: 4.179708739949922
best_error: 4.179708739949669
best_error: 4.179707906419694
best_error: 4.179707906419443
best_error: 4.17970371419808
best_error: 4.179703714197829
best_error: 4.179703673638238
best_error: 4.17970367363799
best_error: 4.179703634241815
best_error: 4.179703634241563
best_error: 4.179703614292581
best_error: 4.179703614292333
best_error: 4.17970359492655
best_error: 4.179703594926302
best_error: 4.179703585102476
best_error: 4.179703585102229
best_error: 4.179703575569794
best_error: 4.17970357556954
best_error: 4.179703570701123
best_error: 4.179703570700873
best_error: 4.179703565979786
best_error: 4.179703565979537
best_error: 4.17970356352984
best_error: 4.179703563529592
best_error: 4.1797035611568445
best_error: 4.179703561156596
best_error: 4.179703559886067
best_error: 4.179703559885816
best_error: 4.179703558658284
best_error: 4.179703558658031
best_error: 4.179703557951217
best_error: 4.1797035579509645
best_error: 4.179703488081353
best_error: 4.179703488081105
best_error: 4.179703475049288
best_error: 4.179703475049037
best_error: 4.179703466327289
best_error: 4.179703466327041
best_error: 4.179703466279419
best_error: 4.179703438530933
best_error: 4.17970343853068
best_error: 4.179703430904359
best_error: 4.179703430904108
best_error: 4.1797034236957815
best_error: 4.179703423695534
best_error: 4.17970342016737
best_error: 4.179703420167124
best_error: 4.179703416824683
best_error: 4.1797034168244345
best_error: 4.179703416579642
