ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 18.50259479738407
best_error: 18.50259451164272
best_error: 13.501608223843357
best_error: 13.501608220709269
best_error: 13.501608211982875
best_error: 13.470185514759507
best_error: 13.470185511352664
best_error: 13.470185508934076
best_error: 13.314284401139666
best_error: 13.314284396331402
best_error: 13.314284393174399
best_error: 12.161776656290497
best_error: 12.161776645051859
best_error: 12.14819629758803
best_error: 12.148196286692222
best_error: 12.14047953286278
best_error: 12.140479521149299
best_error: 10.978532633930156
best_error: 10.978532531034409
best_error: 10.978532503235634
best_error: 10.968356821016442
best_error: 10.968356760119937
best_error: 10.968356680436635
best_error: 10.967104175759264
best_error: 10.967104123461045
best_error: 10.96710403186427
best_error: 9.122556019103737
best_error: 9.122555918040305
best_error: 9.122555873804997
best_error: 8.554862507515196
best_error: 8.55486241320672
best_error: 8.554862361979174
best_error: 8.270902246547381
best_error: 8.270902155848528
best_error: 8.270902100820024
best_error: 8.12503998926383
best_error: 8.125039895328953
best_error: 8.125039842901657
best_error: 8.033801833530852
best_error: 8.033801733043735
best_error: 8.033801688015046
best_error: 7.994333650017813
best_error: 7.994333546344814
best_error: 7.994333504352914
best_error: 7.990742036878163
best_error: 7.990741894233816
best_error: 7.984272934487102
best_error: 7.984272832415748
best_error: 7.984272788634468
best_error: 7.983303882384264
best_error: 7.983303780193225
best_error: 7.9833037365161355
best_error: 7.983011145035804
best_error: 7.983011042808631
best_error: 7.983010999163011
best_error: 7.982857840204454
best_error: 7.982857737958353
best_error: 7.982857694329223
best_error: 7.982746142233475
best_error: 7.982746039973575
best_error: 7.982745996356446
best_error: 7.982606566331679
best_error: 7.982606464056234
best_error: 7.982606420454768
best_error: 7.9825443480486555
best_error: 7.982544245766281
best_error: 7.9825442021718125
best_error: 7.982535394911537
best_error: 7.982535292628167
best_error: 7.982535249034686
best_error: 7.982530979993193
best_error: 7.982530877709326
best_error: 7.9825308341163295
best_error: 7.982530479114578
best_error: 7.9825303364900115
best_error: 6.164844221312838
best_error: 6.164843886907011
best_error: 5.93983048170827
best_error: 5.9398299511690755
best_error: 5.920089872769978
best_error: 5.920089371853864
best_error: 5.913550810306505
best_error: 5.913550334777481
best_error: 5.904105536636168
best_error: 5.904105083367368
best_error: 5.864118160490367
best_error: 5.864117727089765
best_error: 5.82282981745411
best_error: 5.822829421451346
best_error: 5.778805809551814
best_error: 5.7788053780920094
best_error: 5.713428712353208
best_error: 5.713428259519995
best_error: 5.70064017068605
best_error: 5.700639706733368
best_error: 5.624482922531375
best_error: 5.624482772677714
best_error: 5.564337278922574
best_error: 5.564336813156178
best_error: 5.385335630230424
best_error: 5.385335176334332
best_error: 5.362860677107442
best_error: 5.362860222722949
best_error: 5.352088211589156
best_error: 5.352087757993554
best_error: 5.345038897864087
best_error: 5.345038443428402
best_error: 5.3430780751362565
best_error: 5.343077620372547
best_error: 5.3425210341957925
best_error: 5.342520579338931
best_error: 5.342180894619421
best_error: 5.342180439705677
best_error: 5.3420087189315915
best_error: 5.342008263989059
best_error: 5.34189162079535
best_error: 5.341891165833234
best_error: 5.341843825035042
best_error: 5.341843370064931
best_error: 5.341810108867948
best_error: 5.3418096538922
best_error: 5.341795118831495
best_error: 5.341794663853255
best_error: 5.341788809199947
best_error: 5.3417886640567325
best_error: 5.16497582534266
best_error: 5.164975704866114
best_error: 5.0762699574903
best_error: 5.076269307899359
best_error: 5.067673534521338
best_error: 5.067672893126781
best_error: 5.0657858126539175
best_error: 5.065785177653725
best_error: 5.065084910730766
best_error: 5.065084275679419
best_error: 5.06469103107592
best_error: 5.064690913232736
best_error: 5.064685284289199
best_error: 5.064684649213071
best_error: 5.064658380461994
best_error: 5.064657745386434
best_error: 5.064655476666227
best_error: 5.064655358825085
best_error: 5.064654221372985
best_error: 5.064653586297534
best_error: 5.064652420552068
best_error: 5.064652302710829
best_error: 5.064526405996868
best_error: 5.064526288155342
best_error: 5.064521035690129
best_error: 5.064520400627103
best_error: 5.064182851333212
best_error: 5.0641827364005625
best_error: 5.06393150637099
best_error: 5.063931391227824
best_error: 5.048632698552186
best_error: 5.048632072215208
best_error: 5.044780444431253
best_error: 5.044779821666192
best_error: 5.044230317174208
best_error: 5.044230197373462
best_error: 5.044011385116642
best_error: 5.044011265560057
best_error: 5.035775586859074
best_error: 5.035775459356856
best_error: 5.031243121329537
best_error: 5.031242496815955
best_error: 5.021180426972078
best_error: 5.021179805548943
best_error: 5.020490147893121
best_error: 5.020489526430188
best_error: 5.020128092471361
best_error: 5.020127470987605
best_error: 5.0201246039517295
best_error: 5.020124484187655
