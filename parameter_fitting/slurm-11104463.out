ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 68
days_switch 35
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 102.0516960493772
best_error: 102.05169584066643
best_error: 20.4376675307344
best_error: 20.43766753073341
best_error: 20.437667528788243
best_error: 20.437459809034255
best_error: 20.437459807082174
best_error: 20.436622593923396
best_error: 20.436622591947366
best_error: 20.43316937263673
best_error: 20.433169370560705
best_error: 20.417464317913456
best_error: 20.417464315359396
best_error: 20.299185430151887
best_error: 20.299185422911822
best_error: 20.296210524952116
best_error: 20.296210517566916
best_error: 20.119104075968465
best_error: 20.119103972187325
best_error: 18.454333248529775
best_error: 18.45433301665699
best_error: 14.127766014378677
best_error: 14.127765980981254
best_error: 14.095459156532584
best_error: 14.095459151987075
best_error: 14.095459127584128
best_error: 14.094650612646447
best_error: 14.09465060756881
best_error: 14.094650590830813
best_error: 14.091183254698201
best_error: 14.0911832486543
best_error: 14.091183246870273
best_error: 14.091183246286645
best_error: 14.091183245600842
best_error: 14.09075441299924
best_error: 14.090754406492891
best_error: 14.090754404523302
best_error: 14.090754403890164
best_error: 14.090096845970582
best_error: 14.090096815120827
best_error: 14.089992918498986
best_error: 14.089992911909011
best_error: 14.08999291000141
best_error: 14.089992909377255
best_error: 14.088146633966968
best_error: 14.088146626690804
best_error: 14.088146626061821
best_error: 14.08814662481159
best_error: 14.087527852053709
best_error: 14.087527821237813
best_error: 14.087524744411066
best_error: 14.0875247371007
best_error: 14.087524736577656
best_error: 14.087524735246438
best_error: 14.087425152727599
best_error: 14.087425145416686
best_error: 14.087425144893176
best_error: 14.087425143561484
best_error: 14.087402380593723
best_error: 14.087402373282714
best_error: 14.08740237275909
best_error: 14.087402371427299
best_error: 14.087399648950136
best_error: 14.087399641639117
best_error: 14.087399641115478
best_error: 14.087399639783674
best_error: 14.08739794692607
best_error: 14.087397939615041
best_error: 14.087397939091396
best_error: 14.087397937759583
best_error: 14.087396972674533
best_error: 14.087396965363496
best_error: 14.087396964839849
best_error: 14.087396963508032
best_error: 14.087396342429876
best_error: 14.087396335118838
best_error: 14.087396334595185
best_error: 14.087396333263367
best_error: 14.087395762085233
best_error: 14.08739575477419
best_error: 14.087395754250537
best_error: 14.08739575291872
best_error: 14.087395633476817
best_error: 14.087395626165772
best_error: 14.08739562564212
best_error: 14.087395624310295
best_error: 14.08739556192641
best_error: 14.08739555461537
best_error: 14.087395554091714
best_error: 14.08739555275989
best_error: 14.087395516824097
best_error: 14.087395509513055
best_error: 14.0873955089894
best_error: 14.087395507657579
best_error: 14.084303706597955
best_error: 14.084303699325119
best_error: 14.08430369877654
best_error: 14.084303697443161
best_error: 14.07281801184887
best_error: 14.072818005711973
best_error: 14.072818004208312
best_error: 14.072818002739988
best_error: 14.058386095035083
best_error: 14.058386090737027
best_error: 14.058386063687836
best_error: 14.056315719541953
best_error: 14.056315715316035
best_error: 14.056315687258515
best_error: 14.055760272258693
best_error: 14.055760268039212
best_error: 14.055760239905164
best_error: 14.055526588368704
best_error: 14.055526584151917
best_error: 14.055526555985677
best_error: 14.055421037644093
best_error: 14.05542103345335
best_error: 14.055421004904094
best_error: 14.055419033212672
best_error: 14.055418707403444
best_error: 14.05541775406072
best_error: 14.055417749870017
best_error: 14.055417721320318
best_error: 14.0554176897473
best_error: 14.055417651397217
best_error: 14.050775528620992
best_error: 14.05077552417054
best_error: 14.050775501147083
best_error: 14.050127399914523
best_error: 14.050127371976423
best_error: 14.04388302703282
best_error: 14.043883022360871
best_error: 14.043883004474488
best_error: 14.04072192105551
best_error: 14.040721916401079
best_error: 14.04072189843125
best_error: 14.039920841917352
best_error: 14.039920837269598
best_error: 14.039920819209316
best_error: 14.03958672100303
best_error: 14.039586716358059
best_error: 14.039586698260061
best_error: 14.039497280934068
best_error: 14.039497253128665
best_error: 14.039465452974731
best_error: 14.03946544833077
best_error: 14.039465430219082
best_error: 14.039443716039962
best_error: 14.039443688235533
best_error: 14.039372814242917
best_error: 14.039372786440932
best_error: 14.039091001501326
best_error: 14.039090973709113
best_error: 14.037992810768614
best_error: 14.03799278341378
best_error: 14.036740698895692
best_error: 14.03674069515187
best_error: 14.036740668765516
best_error: 14.036190610382397
best_error: 14.036190606669635
best_error: 14.036190579870983
best_error: 14.034141294175747
best_error: 14.034141290518964
best_error: 14.034141263166727
best_error: 14.03409254293113
best_error: 14.034092515918843
best_error: 14.034092514483838
best_error: 14.033961124088822
best_error: 14.033961120430536
best_error: 14.033961093074609
best_error: 14.033378865757822
best_error: 14.033378862072563
best_error: 14.033378835062699
best_error: 14.033255545441182
best_error: 14.033255541733045
best_error: 14.033255515077013
best_error: 14.033212412546849
best_error: 14.033212385570767
best_error: 14.033212384139704
best_error: 14.031721066094892
best_error: 14.031721039346035
best_error: 14.031721036738539
best_error: 14.020730727741945
best_error: 14.020730724054996
best_error: 14.020730690982209
best_error: 14.005434599233334
best_error: 14.005434595270966
best_error: 14.005434567270576
best_error: 14.005429479102308
best_error: 14.005429475139898
best_error: 14.005429447139484
best_error: 14.005425190910843
best_error: 14.005425186948395
best_error: 14.005425158947963
best_error: 14.005420659251701
best_error: 14.005420655289216
best_error: 14.00542062728876
best_error: 14.005410653640904
best_error: 14.005410649678332
best_error: 14.00541062167784
best_error: 14.00539261437575
best_error: 14.005392610396637
best_error: 14.005392582716347
best_error: 14.005378838878409
best_error: 14.005378834899169
best_error: 14.005378807218863
best_error: 14.005365486023987
best_error: 14.005365482044887
best_error: 14.005365454363012
best_error: 14.005358367713345
best_error: 14.005358363734324
best_error: 14.00535833605161
best_error: 14.0053579605017
best_error: 14.005357956522683
best_error: 14.00535792883992
best_error: 14.005357599818074
best_error: 14.005357595839058
best_error: 14.005357595244094
best_error: 14.005357593122692
best_error: 14.005357590643797
best_error: 14.005357590546296
best_error: 14.005357590438422
best_error: 14.005357590333961
best_error: 14.005357590230249
best_error: 14.005357590153901
best_error: 14.005357590082838
best_error: 14.005357589489094
best_error: 14.005357589467334
best_error: 14.005357589446952
best_error: 14.005357589430048
best_error: 14.005357589414913
best_error: 14.00535758929303
