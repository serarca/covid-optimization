ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 72
days_switch 90
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 110.12818163917888
best_error: 110.12818142750471
best_error: 19.985749523957967
best_error: 19.985749523956017
best_error: 19.985749520455286
best_error: 19.98518254089074
best_error: 19.985182537372467
best_error: 19.98288915710521
best_error: 19.982889153523416
best_error: 19.973286905537073
best_error: 19.97328690168178
best_error: 19.926284020678736
best_error: 19.92628401530591
best_error: 19.106744299927
best_error: 19.10674423454718
best_error: 19.01838498291778
best_error: 19.018384908863162
best_error: 18.907676265954414
best_error: 18.907676180704442
best_error: 18.439609220350512
best_error: 18.43960908876651
best_error: 17.64892726675455
best_error: 17.64892704621038
best_error: 14.835070520217833
best_error: 14.835070107086072
best_error: 13.99534217835357
best_error: 13.995341898350098
best_error: 13.74853384369812
best_error: 13.748533735300848
best_error: 13.731415225537706
best_error: 13.731415225086582
best_error: 13.731415210864316
best_error: 13.727937076454687
best_error: 13.727937064066623
best_error: 13.693653158426041
best_error: 13.693653141025624
best_error: 13.693651019034998
best_error: 13.693651007926526
best_error: 13.69365100704805
best_error: 13.692006935369749
best_error: 13.692006924237278
best_error: 13.692006923382323
best_error: 13.691958431941305
best_error: 13.69195842080813
best_error: 13.691958419953863
best_error: 13.691954401583285
best_error: 13.691954390450052
best_error: 13.69195438959584
best_error: 13.691954377209889
best_error: 13.691954359860997
best_error: 13.691954159121323
best_error: 13.691954156644439
best_error: 13.691954156385954
best_error: 13.691954155407794
best_error: 13.691954147131646
best_error: 13.669246428532709
best_error: 13.669246410829272
best_error: 13.480066864077557
best_error: 13.480066858058212
best_error: 13.480066856571668
best_error: 13.47759646134475
best_error: 13.477596455776094
best_error: 13.477596455038606
best_error: 13.477596453866663
best_error: 13.473276643624105
best_error: 13.47327663805497
best_error: 13.473276636919996
best_error: 13.473276636180191
best_error: 13.457707712973486
best_error: 13.457707710028702
best_error: 13.457707699174621
best_error: 13.416653063620803
best_error: 13.416653060948127
best_error: 13.416653050031972
best_error: 13.349999800080823
best_error: 13.349999798444237
best_error: 13.349999786307325
best_error: 13.307535009085289
best_error: 13.307534999058777
best_error: 13.305166878054054
best_error: 13.305166870064518
best_error: 13.303736820857914
best_error: 13.303736812912373
best_error: 13.298564945084859
best_error: 13.29856493849763
best_error: 13.298564937632019
best_error: 13.275719869519278
best_error: 13.275719866834459
best_error: 13.27571986291127
best_error: 13.275719862154816
best_error: 13.27308577532027
best_error: 13.273085773074428
best_error: 13.273085768790803
best_error: 13.273085767965458
best_error: 13.27288709375673
best_error: 13.27288709151302
best_error: 13.272887087230108
best_error: 13.272887086402676
best_error: 13.272882953881993
best_error: 13.272882725382027
best_error: 13.26764344937731
best_error: 13.26764344656597
best_error: 13.267643443444832
best_error: 13.267643442001784
best_error: 13.247405904946325
best_error: 13.247405901896826
best_error: 13.24740589934822
best_error: 13.24740589748175
best_error: 13.173298242592281
best_error: 13.173298236235635
best_error: 13.173298234739628
best_error: 13.170832903565822
best_error: 13.170832894581409
best_error: 13.16974698627462
best_error: 13.169746977159786
best_error: 13.159663185714976
best_error: 13.159663180184793
best_error: 13.15677326463543
best_error: 13.156773254077812
best_error: 13.149647553073471
best_error: 13.149647542625237
best_error: 13.042833958409929
best_error: 13.042833945009336
best_error: 12.972623331651276
best_error: 12.972623318751715
best_error: 12.960266071229011
best_error: 12.960266058111976
best_error: 12.954006648487285
best_error: 12.954006635404745
best_error: 12.950358845982882
best_error: 12.950358832914668
best_error: 12.726980457382545
best_error: 12.726980456423602
best_error: 12.726980454355598
best_error: 12.726980452274887
best_error: 12.726980448834723
best_error: 12.659753578253616
best_error: 12.65975355734282
best_error: 12.659753348213767
best_error: 12.647832061476532
best_error: 12.647832061293773
best_error: 12.647832060798464
best_error: 12.647832057522548
best_error: 12.647832056501816
best_error: 12.647832052938313
best_error: 12.646981539047673
best_error: 12.646981538813405
best_error: 12.646981535113877
best_error: 12.646981534105947
best_error: 12.646981530517632
best_error: 12.643866730865994
best_error: 12.643866730295732
best_error: 12.643866726995121
best_error: 12.6438667261403
best_error: 12.64386672240019
best_error: 12.643798330216795
best_error: 12.643798329623626
best_error: 12.64379832634887
best_error: 12.64379832550258
best_error: 12.643798321752696
best_error: 12.64373971744316
best_error: 12.643739716850188
best_error: 12.643739713576617
best_error: 12.643739712730007
best_error: 12.643739708980547
best_error: 12.643681879676391
best_error: 12.643681879083614
best_error: 12.643681875811208
best_error: 12.643681874964281
best_error: 12.64368187121524
best_error: 12.643626300086137
best_error: 12.643626299493548
best_error: 12.64362629622226
best_error: 12.64362629537503
best_error: 12.643626291626395
best_error: 12.643591080161235
best_error: 12.643591079568765
best_error: 12.64359107629819
best_error: 12.643591075450768
best_error: 12.643591071702385
best_error: 12.643573459477542
best_error: 12.643573438565266
best_error: 12.643573230978204
best_error: 12.643572123535737
best_error: 12.643572122943326
best_error: 12.643572119673117
best_error: 12.643572118825595
best_error: 12.643572115077344
best_error: 12.64357168915118
best_error: 12.643571688558767
best_error: 12.643571685288567
best_error: 12.643571684441046
best_error: 12.643571680692796
best_error: 12.643569951616836
best_error: 12.643569951024434
best_error: 12.643569947754266
best_error: 12.643569946906739
best_error: 12.6435699431585
best_error: 12.64356967079199
best_error: 12.643569670199588
best_error: 12.643569666929427
best_error: 12.643569666081891
best_error: 12.643569662333661
best_error: 12.643569661345797
best_error: 12.643569660498263
best_error: 12.643569656750032
best_error: 12.643569655951662
best_error: 12.64356965220343
best_error: 12.643569650641412
best_error: 12.64356964922982
best_error: 12.64356964880045
best_error: 12.643569648576145
best_error: 12.64356964797302
best_error: 12.643569647535333
best_error: 12.643569647140449
best_error: 12.643569643978209
best_error: 12.643569643645886
