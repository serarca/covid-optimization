ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 70
days_switch 50
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 102.61443197275511
best_error: 102.61443188260895
best_error: 102.61443178053119
best_error: 20.247411085674933
best_error: 20.24741108567303
best_error: 20.247411083135436
best_error: 20.24607592088803
best_error: 20.246075920886078
best_error: 20.246075918309728
best_error: 20.24052533749131
best_error: 20.240525337489135
best_error: 20.240525334748142
best_error: 20.214312522966672
best_error: 20.21431252296288
best_error: 20.214312519372704
best_error: 19.944645993117675
best_error: 19.944645992943205
best_error: 19.94464597555362
best_error: 19.930139252834962
best_error: 19.93013925263843
best_error: 19.93013923427089
best_error: 19.239841031080115
best_error: 19.239841028116686
best_error: 19.239840946871464
best_error: 14.451342305723376
best_error: 14.451342267701335
best_error: 14.451341673787786
best_error: 13.340052683604608
best_error: 13.340052670848848
best_error: 13.309219103294247
best_error: 13.309219102136892
best_error: 13.309219097060563
best_error: 13.30921909113031
best_error: 13.306774854253536
best_error: 13.306774839504627
best_error: 13.304918598225637
best_error: 13.304918583510123
best_error: 13.297877805646799
best_error: 13.297877797038272
best_error: 13.297877795006885
best_error: 13.297877793632264
best_error: 13.21989001851829
best_error: 13.219890018153063
best_error: 13.2198900153855
best_error: 13.219890006665139
best_error: 13.218353910391038
best_error: 13.218353897900943
best_error: 13.218353704909628
best_error: 13.205015790621093
best_error: 13.205015778505764
best_error: 13.191954590108258
best_error: 13.191954588395237
best_error: 13.191954577866053
best_error: 13.183723529281442
best_error: 13.183723521250922
best_error: 13.183723397898582
best_error: 13.181604127281295
best_error: 13.181604119263133
best_error: 13.181603996058156
best_error: 13.181453775517173
best_error: 13.181453773602485
best_error: 13.181453763351449
best_error: 13.181410054376899
best_error: 13.181410046357513
best_error: 13.181409923138336
best_error: 13.180868355380754
best_error: 13.180868351414107
best_error: 13.180868343230141
best_error: 13.179964700934544
best_error: 13.179964699582285
best_error: 13.179964688801466
best_error: 13.172724823942147
best_error: 13.172724823390903
best_error: 13.172724811868392
best_error: 13.15488989045981
best_error: 13.154889889976484
best_error: 13.154889878472154
best_error: 13.110351017610117
best_error: 13.110351013227863
best_error: 13.110351005713213
best_error: 12.796960175150993
best_error: 12.796960151826598
best_error: 12.79695979195068
best_error: 11.916236354502137
best_error: 11.916236336534395
best_error: 11.883923763830365
best_error: 11.883923749938113
best_error: 11.882862868539958
best_error: 11.882862735151727
best_error: 11.879860954998062
best_error: 11.879860949476917
best_error: 11.879860835417952
best_error: 11.87958503736402
best_error: 11.879585035401725
best_error: 11.879585033833145
best_error: 11.879522045328471
best_error: 11.879522043366322
best_error: 11.879522041797863
best_error: 11.879520658748156
best_error: 11.879520653433605
best_error: 11.879520543612978
best_error: 11.879429710084983
best_error: 11.879429594501913
best_error: 11.879428193276256
best_error: 11.879428178541815
best_error: 11.879428171731949
best_error: 11.879428166253668
best_error: 11.879428165748397
best_error: 11.879428158766734
best_error: 11.87942815744439
best_error: 11.87942815646576
best_error: 11.879410270490393
best_error: 11.879410255752518
best_error: 11.879186143207534
best_error: 11.879186140566022
best_error: 11.87918613970743
best_error: 11.879171293022747
best_error: 11.879171290381338
best_error: 11.87917128952266
best_error: 11.875795330112034
best_error: 11.87579532666077
best_error: 11.853739173858767
best_error: 11.853739170238677
best_error: 11.852634879466702
best_error: 11.852634875845887
best_error: 11.852007822317693
best_error: 11.852007822317692
best_error: 11.852007818696423
best_error: 11.851530214679224
best_error: 11.851530211057598
best_error: 11.851191319110594
best_error: 11.851191315488688
best_error: 11.850899371061807
best_error: 11.85089936743967
best_error: 11.850800323571196
best_error: 11.850800319948846
best_error: 11.848015147839973
best_error: 11.84801514427648
best_error: 11.833170755238854
best_error: 11.833170751684442
best_error: 11.820771319717291
best_error: 11.820771316669084
best_error: 11.820771252628411
best_error: 11.820095026084488
best_error: 11.820094962934235
best_error: 11.816871288803767
best_error: 11.81687127202298
best_error: 11.814806973403652
best_error: 11.81480697004584
best_error: 11.814806898420708
best_error: 11.81320506873331
best_error: 11.813205065094568
best_error: 11.811705580058298
best_error: 11.811705576449466
best_error: 11.808313971425564
best_error: 11.808313968342787
best_error: 11.808313902931634
best_error: 11.807857323617723
best_error: 11.807857306488023
best_error: 11.807857306354178
best_error: 11.80495066218213
best_error: 11.804950602791017
best_error: 11.804455189868417
best_error: 11.80445517341566
best_error: 11.80445517328058
best_error: 11.802586774206262
best_error: 11.802586770499836
best_error: 11.790079924892854
best_error: 11.790079920680359
best_error: 11.79007983350386
best_error: 11.784586536641621
best_error: 11.78458653218209
best_error: 11.784586439963498
best_error: 11.782287048548053
best_error: 11.782287044049054
best_error: 11.782286950928752
best_error: 11.782096412422543
best_error: 11.782096397291724
best_error: 11.782096098223509
best_error: 11.781789911122525
best_error: 11.78178990662001
best_error: 11.781789813413287
best_error: 11.781320395490688
best_error: 11.78132039098485
best_error: 11.781320297696862
best_error: 11.78129545878131
best_error: 11.781295443643142
best_error: 11.781295144522463
best_error: 11.781253602544796
best_error: 11.781253598038486
best_error: 11.781253504739041
best_error: 11.781192947353656
best_error: 11.781192942846923
best_error: 11.781192849537085
best_error: 11.78118196577269
best_error: 11.781181961265883
best_error: 11.78118186795416
best_error: 11.781174755993113
best_error: 11.781174751486255
best_error: 11.781174658173295
best_error: 11.781174656809595
best_error: 11.78117402013607
best_error: 11.781174015629205
best_error: 11.781173922316121
best_error: 11.78117389413178
best_error: 11.781173889624913
best_error: 11.78117379631181
best_error: 11.781173718582483
best_error: 11.781173688201651
best_error: 11.780587644343242
best_error: 11.780587639983935
best_error: 11.780587550951976
