ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 90
days_switch 25
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 98.07533478681893
best_error: 98.07533463978598
best_error: 98.07533454647525
best_error: 14.049308919585743
best_error: 14.049308919577438
best_error: 14.049308896122774
best_error: 14.000133166754031
best_error: 14.000133142490643
best_error: 13.80435573310441
best_error: 13.804355709526778
best_error: 12.219231368786602
best_error: 12.219231241425916
best_error: 11.415424762158821
best_error: 11.415424571131044
best_error: 10.63133102111457
best_error: 10.631330822157032
best_error: 10.30223691192273
best_error: 10.302236908865462
best_error: 10.302236906438484
best_error: 10.296316809315256
best_error: 10.296316797873454
best_error: 10.294832623774559
best_error: 10.29483261240627
best_error: 10.289556324486698
best_error: 10.289556320914464
best_error: 10.28955631874133
best_error: 10.27944850359988
best_error: 10.279448498428112
best_error: 10.277937261595383
best_error: 10.277937256475498
best_error: 10.277937256224146
best_error: 10.275535261913749
best_error: 10.275535256625055
best_error: 10.275387850871589
best_error: 10.275387845823401
best_error: 10.275387845518226
best_error: 10.274529880085689
best_error: 10.274529874776311
best_error: 10.2744748147516
best_error: 10.274474809517107
best_error: 10.274428032283891
best_error: 10.274428026970861
best_error: 10.27442707211129
best_error: 10.274427066878502
best_error: 10.274403277717418
best_error: 10.27440327241392
best_error: 10.256725352592484
best_error: 10.256725347345666
best_error: 10.230610608461147
best_error: 10.230610605528534
best_error: 10.230610500418353
best_error: 10.174864604613102
best_error: 10.174864601187226
best_error: 10.1748645928447
best_error: 10.109377762952814
best_error: 10.109377761969638
best_error: 10.109377736738143
best_error: 10.024123751636692
best_error: 10.024123744732456
best_error: 10.024123737315996
best_error: 9.964878914503544
best_error: 9.964878911498925
best_error: 9.96487888945895
best_error: 9.936718650802359
best_error: 9.936718647239692
best_error: 9.936718626230554
best_error: 9.908089603965736
best_error: 9.908089564170997
best_error: 9.90808952983223
best_error: 9.827578624653922
best_error: 9.827578612090974
best_error: 9.827578599531735
best_error: 9.800316786323101
best_error: 9.800316765449953
best_error: 9.800316753955766
best_error: 9.726709200392598
best_error: 9.726709197782242
best_error: 9.726709174625835
best_error: 9.726709168665506
best_error: 9.541195954269101
best_error: 9.54119594105566
best_error: 9.541195930568648
best_error: 9.221141439201903
best_error: 9.221141423204697
best_error: 9.221141404150107
best_error: 8.251252554010827
best_error: 8.251252547160428
best_error: 8.251252534848064
best_error: 8.251252534283369
best_error: 7.534822369276205
best_error: 7.534821995049484
best_error: 7.356847187262295
best_error: 7.356847150671624
best_error: 7.356847150640868
best_error: 7.281078011032687
best_error: 7.281077877286969
best_error: 7.2081503869149195
best_error: 7.2081503826463384
best_error: 7.208150374482578
best_error: 7.181842325693592
best_error: 7.181842299701019
best_error: 7.18184229950895
best_error: 7.177464738696686
best_error: 7.177464712840325
best_error: 7.1774647126380176
best_error: 7.1120773879178785
best_error: 7.112077357623458
best_error: 7.014630422498417
best_error: 7.014630271095299
best_error: 7.014517471734359
best_error: 7.014517453350232
best_error: 7.0145174512537665
best_error: 7.011212994979178
best_error: 7.011212976174044
best_error: 7.011212975463359
best_error: 7.004156742530975
best_error: 7.004156724430489
best_error: 7.004156723620467
best_error: 6.951252992607076
best_error: 6.9512527013144485
best_error: 6.942275868474908
best_error: 6.9422756402478285
best_error: 6.936877531524683
best_error: 6.936877312371841
best_error: 6.917743863941833
best_error: 6.917743714489012
best_error: 6.914119623417753
best_error: 6.914119579025191
best_error: 6.910811861669495
best_error: 6.910811839310458
best_error: 6.910811838056553
best_error: 6.8977461240223725
best_error: 6.897746107062193
best_error: 6.8977461065221615
best_error: 6.885920055521115
best_error: 6.885920037817748
best_error: 6.880206529149544
best_error: 6.880206399995995
best_error: 6.826082117712846
best_error: 6.8260819125681715
best_error: 6.811013452114743
best_error: 6.811013442239596
best_error: 6.811013441798952
best_error: 6.811013419160033
best_error: 6.777444383339296
best_error: 6.7774443706417395
best_error: 6.731745109253984
best_error: 6.731745097854018
best_error: 6.718089181615207
best_error: 6.718089168333973
best_error: 6.642068611254826
best_error: 6.642068601968388
best_error: 6.626374823215462
best_error: 6.626374813662532
best_error: 6.5892975692617135
best_error: 6.589297561886991
best_error: 6.568906557132016
best_error: 6.568906550458111
best_error: 6.568906538479644
best_error: 6.378218396696429
best_error: 6.378218391242193
best_error: 6.301003216210843
best_error: 6.3010032083220615
best_error: 6.30100319919996
best_error: 6.257044839539422
best_error: 6.257044839533535
best_error: 6.203962319038434
best_error: 6.203962318352695
