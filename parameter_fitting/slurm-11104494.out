ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 70
days_switch 60
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 103.6972334056917
best_error: 103.69723331129495
best_error: 103.69723321285818
best_error: 20.241007192136735
best_error: 20.241007192135303
best_error: 20.241007189580426
best_error: 20.23981083010791
best_error: 20.239810830106467
best_error: 20.239810827517875
best_error: 20.234863460111466
best_error: 20.234863460109953
best_error: 20.23486345737912
best_error: 20.212041745858777
best_error: 20.21204174585681
best_error: 20.212041742412563
best_error: 20.012514891223752
best_error: 20.012514891184907
best_error: 20.012514878489057
best_error: 20.00385372281685
best_error: 20.00385372277389
best_error: 20.003853709577555
best_error: 19.323441456623563
best_error: 19.32344145509737
best_error: 19.323441387504023
best_error: 14.061113048489341
best_error: 14.061113014861977
best_error: 14.06111243506213
best_error: 13.391289834524127
best_error: 13.391289827807544
best_error: 13.391289823190917
best_error: 13.371999064089206
best_error: 13.37199906407848
best_error: 13.371999050822648
best_error: 13.36852518031435
best_error: 13.368525160387247
best_error: 13.368525160129519
best_error: 13.364277474215523
best_error: 13.364277454379161
best_error: 13.364277454164226
best_error: 13.34764106610458
best_error: 13.34764104892713
best_error: 13.347641047842556
best_error: 13.288065254162
best_error: 13.288065246627198
best_error: 13.28806523975062
best_error: 13.28037237597772
best_error: 13.280372360691512
best_error: 13.280372107909468
best_error: 13.254826443649481
best_error: 13.254826442671115
best_error: 13.254826433087668
best_error: 13.243004808350621
best_error: 13.243004807390182
best_error: 13.243004797884801
best_error: 13.238194858939707
best_error: 13.238194848845566
best_error: 13.238194675979976
best_error: 13.221992463658005
best_error: 13.221992462923643
best_error: 13.22199245336742
best_error: 13.216854298696386
best_error: 13.216854298696385
best_error: 13.216854298202492
best_error: 13.216854288450197
best_error: 13.216788395088447
best_error: 13.216788385762666
best_error: 13.216788230655926
best_error: 13.216551303315093
best_error: 13.216551302992588
best_error: 13.216551293071367
best_error: 13.216498726077315
best_error: 13.216498725754835
best_error: 13.216498715834035
best_error: 13.21649158276992
best_error: 13.216491573485087
best_error: 13.216491418948927
best_error: 13.216490472195494
best_error: 13.216490471873012
best_error: 13.216490461952265
best_error: 13.214139655356288
best_error: 13.214139646414486
best_error: 13.214139503361668
best_error: 13.211186979026543
best_error: 13.211186970569251
best_error: 13.211186836389736
best_error: 13.207468830522151
best_error: 13.207468826405172
best_error: 13.20746882021648
best_error: 13.207097022257994
best_error: 13.207097018139585
best_error: 13.207097011949017
best_error: 13.206338449350177
best_error: 13.206338445228617
best_error: 13.206338439033928
best_error: 13.205891558505773
best_error: 13.205891554382841
best_error: 13.205891548186765
best_error: 13.204896679574041
best_error: 13.204896675447948
best_error: 13.204896669248633
best_error: 13.204118682775432
best_error: 13.20411868277543
best_error: 13.204118678646815
best_error: 13.204118672444885
best_error: 13.204108915215683
best_error: 13.204108911087037
best_error: 13.204108904885075
best_error: 13.204040598142516
best_error: 13.204040594013705
best_error: 13.2040405878116
best_error: 13.204037717661164
best_error: 13.204037713532346
best_error: 13.204037707330231
best_error: 13.204035177787969
best_error: 13.204035173659138
best_error: 13.204035167457022
best_error: 13.20403398215149
best_error: 13.20403397802266
best_error: 13.204033971820536
best_error: 13.204033825927576
best_error: 13.204033821798747
best_error: 13.204033815596626
best_error: 13.204033713851816
best_error: 13.204033709722982
best_error: 13.204033703520864
best_error: 13.204033623892418
best_error: 13.204033619763589
best_error: 13.204033613561464
best_error: 13.204033555453524
best_error: 13.204033551324692
best_error: 13.204033545122572
best_error: 13.20403348992583
best_error: 13.204033485796995
best_error: 13.204033479594878
best_error: 13.204033425973767
best_error: 13.204033421844931
best_error: 13.204033415642813
best_error: 13.20403340122996
best_error: 13.204033397101128
best_error: 13.204033390899006
best_error: 13.204033378334454
best_error: 13.204033374205618
best_error: 13.2040333680035
best_error: 13.19481997501124
best_error: 13.194819973287533
best_error: 13.194819964679787
best_error: 12.121490199323276
best_error: 12.121490193828132
best_error: 12.121489995808925
best_error: 12.072031320544516
best_error: 12.072031314362794
best_error: 12.072031295527443
best_error: 12.048082131113748
best_error: 12.048082126128651
best_error: 12.048082104867225
best_error: 12.044002829572513
best_error: 12.04400282506948
best_error: 12.044002823435907
best_error: 12.044002802720577
best_error: 12.041839518314386
best_error: 12.041839513951452
best_error: 12.041839510106723
best_error: 12.04183949152969
best_error: 12.01713030936068
best_error: 12.017130083289281
best_error: 12.016250398009
best_error: 12.016249905224605
best_error: 11.927755388043076
best_error: 11.927755374876181
best_error: 11.92691009617555
best_error: 11.926910083051125
best_error: 11.926910083018292
best_error: 11.926816012281684
best_error: 11.926815889372557
best_error: 11.924044444925181
best_error: 11.924044439358788
best_error: 11.92205292426076
best_error: 11.922052922068024
best_error: 11.922052920842638
best_error: 11.920340465616384
best_error: 11.920340463521153
best_error: 11.920340462187621
best_error: 11.91808154525583
best_error: 11.918081540286078
best_error: 11.913873988770556
best_error: 11.913873985381384
best_error: 11.913873985311227
best_error: 11.908197795362627
best_error: 11.908197795258564
best_error: 11.908197791917186
best_error: 11.907357155724064
best_error: 11.907357152280214
best_error: 11.906782038321046
best_error: 11.906782034874823
best_error: 11.906696199486731
best_error: 11.906696196020565
best_error: 11.901920692775738
best_error: 11.901920689307278
best_error: 11.900313690200711
best_error: 11.900313683127802
best_error: 11.900313568767517
best_error: 11.897140958745
best_error: 11.897140956793555
best_error: 11.897140955315134
best_error: 11.896074176329899
best_error: 11.89607416993779
best_error: 11.896074069766337
best_error: 11.89546090463638
best_error: 11.895460902738279
best_error: 11.89546090121424
best_error: 11.895451026193674
best_error: 11.89545101979665
best_error: 11.895450919564215
best_error: 11.894820483050735
best_error: 11.894820375992607
best_error: 11.892639729158624
best_error: 11.892639715557255
best_error: 11.891756214038546
best_error: 11.891756199841627
best_error: 11.890518345579128
best_error: 11.890518339939439
best_error: 11.890518259373945
best_error: 11.8884352884227
best_error: 11.888435285104425
best_error: 11.887173762256142
best_error: 11.887173758943252
best_error: 11.885681269398674
best_error: 11.885681263325663
best_error: 11.88568117243832
best_error: 11.884560747008027
best_error: 11.884560747008026
best_error: 11.884560744703583
best_error: 11.884560743721783
best_error: 11.882622032414698
best_error: 11.882622026273436
best_error: 11.882621939347926
best_error: 11.88225491212511
best_error: 11.882254912099825
best_error: 11.882254908854401
