ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.77573775956716
best_error: 10.775737707173477
best_error: 10.775737681854068
best_error: 10.241528220359541
best_error: 10.241528142876929
best_error: 10.241528124496929
best_error: 9.418891920992298
best_error: 9.418891811957891
best_error: 9.092558054320424
best_error: 9.092557932409594
best_error: 8.824215189367457
best_error: 8.824215059572627
best_error: 8.585945623845028
best_error: 8.585945480705004
best_error: 8.208979971358097
best_error: 8.208979927216257
best_error: 8.208979845933879
best_error: 7.64397879137656
best_error: 7.643978750203125
best_error: 7.643978656317611
best_error: 7.417664375735168
best_error: 7.417664351214026
best_error: 7.417664237333982
best_error: 7.265469795465312
best_error: 7.265469773341247
best_error: 7.265469653604055
best_error: 7.16114371664154
best_error: 7.161143696562322
best_error: 7.161143572370191
best_error: 7.091722068739398
best_error: 7.09172205168676
best_error: 7.091721922715582
best_error: 6.981299307695432
best_error: 6.981299208077521
best_error: 4.80701897799937
best_error: 4.807018715020973
best_error: 3.372145178609994
best_error: 3.3721448072326816
best_error: 3.2009432031914624
best_error: 3.200942832107643
best_error: 3.155287038976894
best_error: 3.1552866701687448
best_error: 3.151939340269612
best_error: 3.151939267947184
best_error: 3.141607697757126
best_error: 3.141607326473191
best_error: 3.059072266293757
best_error: 3.059072208044441
best_error: 3.0303710081453525
best_error: 3.0303709825139586
best_error: 2.9543039717307575
best_error: 2.9543039613722812
best_error: 2.6230143985404224
best_error: 2.6230140296528925
best_error: 2.615553066369856
best_error: 2.615553066360229
best_error: 2.5933668309574243
best_error: 2.593366460380322
best_error: 2.577330799669877
best_error: 2.577330799660275
best_error: 2.336166720407114
best_error: 2.3361663995316073
best_error: 2.2690982917853986
best_error: 2.2690979911534273
best_error: 2.119292444874681
best_error: 2.119292146333782
best_error: 2.0019445437527676
best_error: 2.0019445437411747
best_error: 1.892026162171724
best_error: 1.8920258474091636
best_error: 1.8650778499289085
best_error: 1.8650778499176983
best_error: 1.8533849753423226
best_error: 1.8533846353830767
best_error: 1.7389687928353608
best_error: 1.73896841251018
best_error: 1.5788001085648644
best_error: 1.578799726903954
best_error: 1.5749408686755295
best_error: 1.574940487316749
best_error: 1.5731772978021823
best_error: 1.5731769162624303
best_error: 1.5722145409227768
best_error: 1.5722141592842525
best_error: 1.5718010115321022
best_error: 1.5718006298511487
best_error: 1.5715198931647747
best_error: 1.5715198931536363
best_error: 1.5715197565825978
best_error: 1.571516701094897
best_error: 1.5715163193848838
best_error: 1.5065614185349931
best_error: 1.5065614185239529
best_error: 1.506561279784572
best_error: 1.5063564551494628
best_error: 1.5063560313309114
best_error: 1.5040905189626304
best_error: 1.504090094767614
best_error: 1.503711450850099
best_error: 1.5037110265920783
best_error: 1.5035545786947757
best_error: 1.5035541544106725
best_error: 1.5035504620677853
best_error: 1.503550462056798
best_error: 1.503550323335277
best_error: 1.503548451775584
best_error: 1.5035480274905832
best_error: 1.5035441303170898
best_error: 1.5035437060314796
best_error: 1.5035434832225656
best_error: 1.503543436305979
best_error: 1.5035433732691272
best_error: 1.5035432457668811
best_error: 1.5035432429191382
best_error: 1.5035432069036272
best_error: 1.503543198505793
best_error: 1.5035431984784584
best_error: 1.503543186112839
best_error: 1.5031771768058841
best_error: 1.503176752463466
best_error: 1.4870732318746698
best_error: 1.4870727811119695
best_error: 1.486962779464505
best_error: 1.4869623282377935
best_error: 1.4865638663376595
best_error: 1.486563414996298
best_error: 1.4864222810299605
best_error: 1.4864218291751028
best_error: 1.4863266403103914
best_error: 1.4863261877927467
best_error: 1.486212388831147
best_error: 1.486211936952937
best_error: 1.4862108030422068
best_error: 1.4862103511640583
best_error: 1.486204459333962
best_error: 1.4862040074560765
best_error: 1.4861790756130995
best_error: 1.4861786237362633
best_error: 1.4860775130300745
best_error: 1.4860770616378913
best_error: 1.4856733476665858
best_error: 1.4856728962911274
best_error: 1.4840272285122105
best_error: 1.4840267776425047
best_error: 1.4793162263497392
best_error: 1.4793157814389641
best_error: 1.4793153875525697
best_error: 1.4793149426418255
best_error: 1.479312032416861
best_error: 1.479311587506269
best_error: 1.479298612721275
best_error: 1.4792981678113448
best_error: 1.4792452434667847
best_error: 1.4792447985594634
best_error: 1.479032355714982
best_error: 1.479031910818194
best_error: 1.4781854246047685
best_error: 1.478184980863523
best_error: 1.475114811864188
best_error: 1.4751143694009838
best_error: 1.4746343244853155
best_error: 1.474633882049035
best_error: 1.4744467034384405
best_error: 1.4744462610127758
best_error: 1.474362526903998
best_error: 1.474362084483122
best_error: 1.4743239780613715
best_error: 1.474323872346118
best_error: 1.474323825687451
