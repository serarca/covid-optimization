ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 70
days_switch 65
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 104.83672493496479
best_error: 104.83672483804496
best_error: 104.83672474167413
best_error: 20.238292001141478
best_error: 20.23829200114003
best_error: 20.238291998565234
best_error: 20.23715964493867
best_error: 20.237159644937208
best_error: 20.23715964233075
best_error: 20.232487601311504
best_error: 20.232487601309977
best_error: 20.23248759857035
best_error: 20.211154384441148
best_error: 20.211154384439183
best_error: 20.21115438104079
best_error: 20.03628844306592
best_error: 20.036288443037346
best_error: 20.036288431737976
best_error: 20.025377530310998
best_error: 20.025377530278305
best_error: 20.02537751836742
best_error: 19.078146464379333
best_error: 19.078146462000205
best_error: 19.07814636943359
best_error: 13.700200074505524
best_error: 13.700200043454569
best_error: 13.700199541167514
best_error: 13.411839564597061
best_error: 13.411839559531007
best_error: 13.41183955358515
best_error: 13.381730005448404
best_error: 13.381729987641659
best_error: 13.378758551186802
best_error: 13.378758545971145
best_error: 13.378758531903445
best_error: 13.369168717174075
best_error: 13.369168693887675
best_error: 13.34946673816287
best_error: 13.349466703672519
best_error: 13.343775204058028
best_error: 13.343775162385388
best_error: 13.339080989606522
best_error: 13.339080946729204
best_error: 13.33845537174452
best_error: 13.338455353201224
best_error: 13.338455064234793
best_error: 13.338333914962039
best_error: 13.338333871983284
best_error: 13.33791990253495
best_error: 13.337919859499948
best_error: 13.337919746696528
best_error: 13.337862632539721
best_error: 13.337862613993044
best_error: 13.337862324998104
best_error: 13.280762863241971
best_error: 13.280762858280964
best_error: 13.280762853304136
best_error: 13.249815236347063
best_error: 13.249815226950867
best_error: 13.249815226866419
best_error: 13.249815226567867
best_error: 13.246003729552218
best_error: 13.246003719567405
best_error: 13.246003719462465
best_error: 13.244030685151472
best_error: 13.244030550898502
best_error: 13.240201641918993
best_error: 13.240201513892266
best_error: 13.239913715653886
best_error: 13.239913705193516
best_error: 13.23991370505877
best_error: 13.235581975819661
best_error: 13.235581965068814
best_error: 13.233381744905982
best_error: 13.23338162613609
best_error: 13.233280475003555
best_error: 13.233280464228539
best_error: 13.231522581465914
best_error: 13.231522570720985
best_error: 13.225341103051273
best_error: 13.225340980018363
best_error: 13.22330812457658
best_error: 13.223308113520067
best_error: 13.138939284451256
best_error: 13.138939282169428
best_error: 13.138939279975162
best_error: 13.138939274212518
best_error: 12.943773108884113
best_error: 12.943773076543206
best_error: 12.479192227604678
best_error: 12.47919222085077
best_error: 12.47919221586163
best_error: 12.373189019947274
best_error: 12.37318901391298
best_error: 12.33129992764773
best_error: 12.331299920944309
best_error: 12.331299916071194
best_error: 12.184275492662799
best_error: 12.18427542803995
best_error: 12.081166589898594
best_error: 12.081166506964454
best_error: 12.068637454250247
best_error: 12.068637454081555
best_error: 12.068637366692984
best_error: 12.06763250389929
best_error: 12.067632503715808
best_error: 12.067632416075966
best_error: 12.067090079725487
best_error: 12.067090079534129
best_error: 12.067089991823023
best_error: 12.066795665043081
best_error: 12.066795664847437
best_error: 12.066795577097615
best_error: 12.066318374175385
best_error: 12.06631835484593
best_error: 12.066318021839635
best_error: 11.98854797703705
best_error: 11.988547925190241
best_error: 11.976454563702386
best_error: 11.976454453243658
best_error: 11.976448536811958
best_error: 11.976448524593591
best_error: 11.976184674847588
best_error: 11.9761845742138
best_error: 11.976175749356706
best_error: 11.97617573658318
best_error: 11.97617037484828
best_error: 11.976170362075354
best_error: 11.976169067701083
best_error: 11.976169054928297
best_error: 11.976168830462248
best_error: 11.9761688176895
best_error: 11.976168691644965
best_error: 11.97616867887222
best_error: 11.976168621967922
best_error: 11.976168609195195
best_error: 11.976168591451755
best_error: 11.97616857867904
best_error: 11.976168575442475
best_error: 11.97616856266975
best_error: 11.97616855407411
best_error: 11.976168548886859
best_error: 11.976168546473245
best_error: 11.976168544778613
best_error: 11.976168544260423
