ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 78
days_switch 65
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 104.95735985437794
best_error: 104.95735976976681
best_error: 104.95735968173828
best_error: 18.76644720153215
best_error: 18.766447201528596
best_error: 18.76644719343013
best_error: 18.748389956122278
best_error: 18.74838995611859
best_error: 18.748389947341597
best_error: 18.65720924030512
best_error: 18.657209240298922
best_error: 18.6572092272959
best_error: 16.24096627607401
best_error: 16.2409662725495
best_error: 16.240966074428833
best_error: 15.22287719217098
best_error: 15.222877185819748
best_error: 15.222877034424311
best_error: 14.969085986900582
best_error: 14.969085979888469
best_error: 14.969085887528363
best_error: 14.87267945828625
best_error: 14.8726794519399
best_error: 14.872679447602781
best_error: 14.87267926274713
best_error: 14.844611124447633
best_error: 14.844611111479379
best_error: 13.977812510705792
best_error: 13.977812490595083
best_error: 13.902703161745315
best_error: 13.902703140724519
best_error: 13.84773256056406
best_error: 13.847732539948836
best_error: 13.780653055719085
best_error: 13.780653040487854
best_error: 13.780653036333026
best_error: 13.721656236604865
best_error: 13.72165622944
best_error: 13.721656216444856
best_error: 13.227126662178598
best_error: 13.22712664920658
best_error: 13.227126641753399
best_error: 12.794575677238432
best_error: 12.794575671526527
best_error: 12.794575658695488
best_error: 11.9657185288316
best_error: 11.965718514885967
best_error: 11.965718513368833
best_error: 11.849706896851913
best_error: 11.849706872034488
best_error: 11.310394911315523
best_error: 11.310394902666216
best_error: 11.310394899377936
best_error: 11.260344928729186
best_error: 11.260344892698697
best_error: 11.2566809296153
best_error: 11.256680927245093
best_error: 11.256680920318837
best_error: 11.256680918577738
best_error: 11.255021669769503
best_error: 11.255021667564696
best_error: 11.255021667546297
best_error: 11.25502166719037
best_error: 11.255021660520143
best_error: 11.25502165874994
best_error: 11.25279001054821
best_error: 11.252790008560634
best_error: 11.25279000850591
best_error: 11.25279000750591
best_error: 11.252790001277935
best_error: 11.252789999553215
best_error: 11.251384513602062
best_error: 11.251384511746387
best_error: 11.251384511668817
best_error: 11.251384510306117
best_error: 11.251384504368826
best_error: 11.2513845026227
best_error: 11.251094646402368
best_error: 11.251094644616563
best_error: 11.251094644524965
best_error: 11.25109464295102
best_error: 11.251094637090034
best_error: 11.251094635425645
best_error: 11.250839818306453
best_error: 11.250839816526078
best_error: 11.250839816433906
best_error: 11.250839814847904
best_error: 11.250839809005996
best_error: 11.250839807332083
best_error: 11.250622970105901
best_error: 11.250622968330148
best_error: 11.250622968237488
best_error: 11.250622966641204
best_error: 11.250622960815555
best_error: 11.250622959133533
best_error: 11.250479460004392
best_error: 11.250479458217672
best_error: 11.250479458131892
best_error: 11.25047945662738
best_error: 11.250479450760013
best_error: 11.25047944903335
best_error: 11.250406894363003
best_error: 11.250406892577836
best_error: 11.250406892491892
best_error: 11.25040689098395
best_error: 11.250406885122013
best_error: 11.250406883392632
best_error: 11.250387619483007
best_error: 11.25038761769821
best_error: 11.250387617612223
best_error: 11.250387616103458
best_error: 11.250387610242699
best_error: 11.250387608512803
best_error: 11.250376195469293
best_error: 11.250376193684716
best_error: 11.250376193598703
best_error: 11.250376192089446
best_error: 11.250376186229385
best_error: 11.250376184499187
best_error: 11.250369473221085
best_error: 11.250369471436635
best_error: 11.250369471350613
best_error: 11.250369469841065
best_error: 11.250369463981418
best_error: 11.250369462251038
best_error: 11.250365562714563
best_error: 11.250365560930192
best_error: 11.250365560844159
best_error: 11.250365559334446
best_error: 11.250365553475035
best_error: 11.250365551744553
best_error: 11.250363500717292
best_error: 11.250363325838904
best_error: 11.250363298134038
best_error: 11.250362297492487
best_error: 11.250362295699478
best_error: 11.250362295618906
best_error: 11.250362294180839
best_error: 11.250362288277628
best_error: 11.250362286521778
best_error: 11.250361310858473
best_error: 11.250361309065479
best_error: 11.250361308984905
best_error: 11.250361307546788
best_error: 11.250361301643611
best_error: 11.25036129988776
best_error: 11.250357364314791
best_error: 11.250357362521852
best_error: 11.250357362441267
best_error: 11.25035736100295
best_error: 11.250357355099919
best_error: 11.250357353344064
best_error: 11.250341988267891
best_error: 11.250341986278562
best_error: 11.250341979580504
best_error: 11.250341977297133
best_error: 11.25028087952796
best_error: 11.250280877539506
best_error: 11.250280870840411
best_error: 11.250280868556985
best_error: 11.25003641527398
best_error: 11.25003641328902
best_error: 11.250036406585775
best_error: 11.25003640430214
best_error: 11.249074129539473
best_error: 11.249074127300783
best_error: 11.249074121507928
best_error: 11.249074118564218
best_error: 11.24538329844022
best_error: 11.245383296034499
best_error: 11.245383290764579
best_error: 11.245383287451128
best_error: 11.232276113291288
best_error: 11.232276109792966
best_error: 11.232276108450709
best_error: 11.23227610224523
best_error: 11.203033688275
best_error: 11.203033679647636
best_error: 11.203033677050604
best_error: 11.191509031084856
best_error: 11.191509019217898
best_error: 11.15201615929739
best_error: 11.152016145151055
best_error: 11.113448139030327
best_error: 11.113448031286556
best_error: 11.107014482272248
best_error: 11.107014365803927
best_error: 11.085975520305622
best_error: 11.085975331030301
best_error: 11.05405473805839
best_error: 11.05405458216649
best_error: 10.972110305645817
best_error: 10.972110286487503
best_error: 10.93250389630908
best_error: 10.932503878725193
best_error: 10.916443485327223
best_error: 10.91644346817455
best_error: 10.913346561276832
best_error: 10.91334654417524
best_error: 10.912838355326063
best_error: 10.912838338226564
best_error: 10.912801476250845
best_error: 10.912801423253978
best_error: 10.912531620513203
best_error: 10.912531603415712
best_error: 10.912489177114658
best_error: 10.912489160017447
best_error: 10.912484258186703
best_error: 10.912484205205203
best_error: 10.836935906699328
best_error: 10.83693589531445
best_error: 10.831794217012115
best_error: 10.831794167564937
best_error: 10.815759557771978
best_error: 10.815759508590453
best_error: 10.683289135157144
best_error: 10.683289129657751
best_error: 10.683289126231724
best_error: 10.609908239518527
best_error: 10.609908232687204
best_error: 10.609908230592044
best_error: 10.596357157760151
best_error: 10.596357129934631
best_error: 10.56067131292637
best_error: 10.56067130938316
best_error: 10.560671299136926
best_error: 10.49698476120518
best_error: 10.496984687618223
best_error: 10.480291982797183
best_error: 10.480291937317382
best_error: 10.453517635441003
best_error: 10.453517566364981
best_error: 10.44142137777717
best_error: 10.441421335216353
best_error: 10.429673750477589
best_error: 10.429673729909869
best_error: 10.384646490597213
best_error: 10.384646272112263
best_error: 10.381326287369635
best_error: 10.381326269122896
best_error: 10.378479495775329
best_error: 10.378479477588247
best_error: 10.377147799812121
best_error: 10.377147781737918
best_error: 10.376540671329165
best_error: 10.376540653932624
best_error: 10.376393079807674
best_error: 10.376393062414122
best_error: 10.376383832642214
best_error: 10.376383632946279
best_error: 10.376354645358155
best_error: 10.376354627965476
best_error: 10.376119908966235
best_error: 10.376119891585393
best_error: 10.375408559789165
best_error: 10.375408366619101
best_error: 10.374021813779322
best_error: 10.374021795111442
best_error: 10.37352767714038
best_error: 10.373527657979224
best_error: 10.37336873139518
best_error: 10.373368712245735
best_error: 10.373354257022115
best_error: 10.37335417224571
best_error: 10.373346863653595
best_error: 10.373346844505775
best_error: 10.373310011565007
best_error: 10.373309992419909
best_error: 10.373290569643139
best_error: 10.373290550498462
best_error: 10.373194569292306
best_error: 10.373194484475759
best_error: 10.373118367139629
best_error: 10.373118282302267
best_error: 10.373087781374124
best_error: 10.373087691760068
best_error: 10.373057888658712
best_error: 10.37305779904284
best_error: 10.373054731788681
best_error: 10.37305464217262
best_error: 10.373054602966564
best_error: 10.373054258591047
