ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 82
days_switch 90
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 106.1881515135862
best_error: 106.18815135640212
best_error: 17.35489723962789
best_error: 17.35489723962084
best_error: 17.354897226995863
best_error: 17.341030957910327
best_error: 17.341030944913022
best_error: 17.281365972183842
best_error: 17.281365957564667
best_error: 16.94397047448856
best_error: 16.94397044841721
best_error: 15.784489544270212
best_error: 15.784489457272706
best_error: 13.432725984284136
best_error: 13.432725915575702
best_error: 13.263126462021226
best_error: 13.263126437559961
best_error: 13.258571482048222
best_error: 13.258571481632657
best_error: 13.258571456789586
best_error: 13.256151432882758
best_error: 13.25615140756775
best_error: 13.232065308842515
best_error: 13.232065283670813
best_error: 12.933059462884675
best_error: 12.933059406077195
best_error: 12.493237073056637
best_error: 12.49323706703721
best_error: 12.493237053775731
best_error: 12.402872457961452
best_error: 12.402872457961447
best_error: 12.4028724559816
best_error: 12.402872437149755
best_error: 11.522624768476485
best_error: 11.522624703446759
best_error: 11.00233853529163
best_error: 11.002338216566262
best_error: 10.766144212369282
best_error: 10.76614400497453
best_error: 10.700241986840123
best_error: 10.700241834967196
best_error: 10.652449868524098
best_error: 10.652449854562557
best_error: 10.652449847975092
best_error: 10.652038708718084
best_error: 10.652038558615766
best_error: 10.644812794616598
best_error: 10.644812660775507
best_error: 10.561781485762918
best_error: 10.561781471382314
best_error: 10.561781465197988
best_error: 10.39227940470877
best_error: 10.392279334154779
best_error: 10.297014078241174
best_error: 10.297014009502096
best_error: 10.242256044843057
best_error: 10.242255974855464
best_error: 10.138616664230645
best_error: 10.138616594050587
best_error: 10.134185408284196
best_error: 10.134185393389235
best_error: 10.134185391439008
best_error: 10.114081113040537
best_error: 10.114081047355345
best_error: 10.10876002762667
best_error: 10.108759963081987
best_error: 10.10799473920192
best_error: 10.107994674674066
best_error: 10.107896938270159
best_error: 10.107896921493268
best_error: 10.10789692130468
best_error: 10.107862295374687
best_error: 10.107862230847756
best_error: 10.107787992230477
best_error: 10.107787927704095
best_error: 10.10778283590789
best_error: 10.10778277138156
best_error: 10.107782720511985
best_error: 10.107782655985627
best_error: 10.052886847810672
best_error: 10.052886840774065
best_error: 10.052886832189245
best_error: 10.050957405165263
best_error: 10.050957398799262
best_error: 10.050957389812364
best_error: 10.0499632291059
best_error: 10.049963222843168
best_error: 10.049963213796383
best_error: 10.049409701368507
best_error: 10.049409695159053
best_error: 10.049409686081816
best_error: 10.04909209000565
best_error: 10.049092083801781
best_error: 10.049092074725994
best_error: 10.048909076253047
best_error: 10.048909070052394
best_error: 10.048909060977438
best_error: 10.048803760998442
best_error: 10.048803754799646
best_error: 10.04880374572517
best_error: 10.048743235103968
best_error: 10.048743228906229
best_error: 10.048743219832035
best_error: 10.048691655090458
best_error: 10.048691648942864
best_error: 10.04869163982897
best_error: 10.04866540578771
best_error: 10.048665399640573
best_error: 10.048665390526711
best_error: 10.04865197249874
best_error: 10.048651966351839
best_error: 10.048651957237988
best_error: 10.048650750343961
best_error: 10.04865043115409
best_error: 10.046406159979625
best_error: 10.046406153822893
best_error: 10.04640614470771
best_error: 10.037427698098794
best_error: 10.037427692099532
best_error: 10.037427682819649
best_error: 10.00116645451791
best_error: 10.001166449098125
best_error: 10.001166439209738
best_error: 9.857262807404602
best_error: 9.857262797931531
best_error: 9.857262791717726
best_error: 9.82530093891993
best_error: 9.825300873275989
best_error: 9.81326595963613
best_error: 9.813265894315348
best_error: 9.771950123269116
best_error: 9.771950108239455
best_error: 9.759527223075374
best_error: 9.759527206589482
best_error: 9.743333752395266
best_error: 9.743333739380411
best_error: 9.734187998090738
best_error: 9.73418798424486
best_error: 9.701880086544094
best_error: 9.701880070387729
best_error: 9.677131093285583
best_error: 9.677131019200203
best_error: 9.648204438250485
best_error: 9.648204417112646
best_error: 9.628369606286762
best_error: 9.628369587309002
best_error: 9.59911485014075
best_error: 9.599114791740702
best_error: 9.592500655223555
best_error: 9.592500597618368
best_error: 9.589714003234146
best_error: 9.589713945734665
best_error: 9.588472164833785
best_error: 9.588472109085991
best_error: 9.585274139263124
best_error: 9.58527413094416
best_error: 9.581743246862596
best_error: 9.581743173774878
best_error: 9.581743169817948
best_error: 9.49660844432426
best_error: 9.496608387219496
best_error: 9.476116669617701
best_error: 9.476116662233792
best_error: 9.468242892655688
best_error: 9.468242883499412
best_error: 9.463126228090857
best_error: 9.463126211686642
best_error: 9.457437435316862
best_error: 9.45743742164225
best_error: 9.43981202894157
best_error: 9.439812021813161
best_error: 9.43919114315517
best_error: 9.439190761079677
best_error: 9.37109499848676
best_error: 9.371094986487373
best_error: 9.348321660990392
best_error: 9.348321649388303
best_error: 9.284614515448165
best_error: 9.284614510268398
best_error: 9.28461450948949
best_error: 9.099650240427922
best_error: 9.099649924099104
best_error: 9.0781671567689
best_error: 9.078166877675464
best_error: 9.06403155216137
best_error: 9.064031545391403
best_error: 9.061523780543254
best_error: 9.061523774887574
best_error: 9.061523774433095
best_error: 9.06069416351282
best_error: 9.060694157914817
best_error: 9.06069415740923
best_error: 9.0603355895835
best_error: 9.060335584028849
best_error: 9.060335583482752
best_error: 9.060178289514997
best_error: 9.060178016925398
best_error: 9.060176813833461
best_error: 9.060176808279566
best_error: 9.060176807733942
best_error: 9.060171630503252
best_error: 9.060171357912782
best_error: 9.06016954066716
best_error: 9.060169535113296
best_error: 9.060169534567699
best_error: 9.06016943037288
best_error: 9.06016915778212
