ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 9.859657136050657
best_error: 9.859657009645872
best_error: 8.849988438056322
best_error: 8.849988192534207
best_error: 6.338723556209924
best_error: 6.3387229088459245
best_error: 5.185363125137451
best_error: 5.185362452946211
best_error: 4.645180308353918
best_error: 4.645179717133109
best_error: 4.443087598078692
best_error: 4.4430870413536505
best_error: 4.382036394651889
best_error: 4.382036291049273
best_error: 4.360810633692165
best_error: 4.360810072766874
best_error: 4.360469679098731
best_error: 4.360469576163573
best_error: 4.356817228705048
best_error: 4.35681666849707
best_error: 4.356764362696952
best_error: 4.356764259733156
best_error: 4.355403209664927
best_error: 4.355402649943857
best_error: 4.347207737541161
best_error: 4.347207183539833
best_error: 4.322318810578366
best_error: 4.322318286489808
best_error: 4.32194030177558
best_error: 4.321939841199072
best_error: 4.311996456362712
best_error: 4.311995971209839
best_error: 4.309176627864373
best_error: 4.309176135284424
best_error: 4.292816627266609
best_error: 4.292816101881499
best_error: 4.286896106375046
best_error: 4.286896000859538
best_error: 4.27384232536488
best_error: 4.273842220759108
best_error: 4.237595879906858
best_error: 4.237595394685158
best_error: 4.182854195919471
best_error: 4.1828540720545515
best_error: 4.156921590059913
best_error: 4.156921175863707
best_error: 4.131814749645544
best_error: 4.131814297192233
best_error: 4.083737139801999
best_error: 4.083736708388257
best_error: 4.054405460498366
best_error: 4.054405348936097
best_error: 4.009949443432609
best_error: 4.009948977085526
best_error: 3.9846989895590164
best_error: 3.984698879790862
best_error: 3.9796296970434817
best_error: 3.979629209422783
best_error: 3.937459717442839
best_error: 3.9374591744717344
best_error: 3.9304169040991157
best_error: 3.9304163683912847
best_error: 3.9291357741920923
best_error: 3.9291356664964265
best_error: 3.920647006095286
best_error: 3.920646494074556
best_error: 3.8895322227492457
best_error: 3.889531678260943
best_error: 3.8747738008202206
best_error: 3.8747737115935883
best_error: 3.8747737030106375
best_error: 3.87236737211767
best_error: 3.8723668060172987
best_error: 3.7974487619845734
best_error: 3.7974482008779806
best_error: 3.7416564481491337
best_error: 3.741656377592382
best_error: 3.7416563494918593
best_error: 3.648889572293254
best_error: 3.648889516726213
best_error: 3.5445180265231637
best_error: 3.544517635267165
best_error: 3.5110255382666855
best_error: 3.5110251361602156
best_error: 3.5102762064445305
best_error: 3.5102758043151763
best_error: 3.509836928827756
best_error: 3.5098365270629355
best_error: 3.5095816571030864
best_error: 3.5095812553305863
best_error: 3.5095235469757995
best_error: 3.509523145191803
best_error: 3.5095195797415473
best_error: 3.50951917795677
best_error: 3.509516422596554
best_error: 3.509516020811149
best_error: 3.509514616004755
best_error: 3.509514214219005
best_error: 3.5095133586350986
best_error: 3.5095129568490884
best_error: 3.509512421251026
best_error: 3.5095120194648306
best_error: 3.509512000646736
best_error: 3.509511944785897
best_error: 3.509511545745983
best_error: 3.509510607556012
best_error: 3.5095102057694643
best_error: 3.509510057662819
best_error: 3.5059245602859455
best_error: 3.505924146084004
best_error: 3.5058644234558463
best_error: 3.505864011752088
best_error: 3.5058633976122024
best_error: 3.505862985908382
best_error: 3.505699390297252
best_error: 3.505698977914145
best_error: 3.503991059803635
best_error: 3.503990645334439
best_error: 3.498402365685518
best_error: 3.498401946310944
best_error: 3.4971555520990103
best_error: 3.497155131290258
best_error: 3.4953803399395356
best_error: 3.495379923125732
best_error: 3.4950868342382586
best_error: 3.4950864216461284
best_error: 3.4950598571338647
best_error: 3.4950594452159924
best_error: 3.491227819042421
best_error: 3.491227406865667
best_error: 3.489080596716374
best_error: 3.4890801843953976
best_error: 3.4885305334754264
best_error: 3.4885301211174724
best_error: 3.4882878581377295
best_error: 3.4882878048319568
best_error: 3.4882877653802837
best_error: 3.4882636501200874
best_error: 3.488263237731017
best_error: 3.4882356081492945
best_error: 3.4882351957569497
best_error: 3.4882309152887547
best_error: 3.4882305028958793
best_error: 3.488228245603574
best_error: 3.4882278332103933
best_error: 3.4882263983985675
best_error: 3.4882259860051597
best_error: 3.488225595339843
best_error: 3.488225182946345
best_error: 3.4879334115220573
best_error: 3.4879329971347515
best_error: 3.4879182696104527
best_error: 3.487917855357601
best_error: 3.4869224395355407
best_error: 3.4869223870530783
best_error: 3.486922346662074
best_error: 3.4868917736043876
best_error: 3.4868913591109
best_error: 3.4866977374995565
best_error: 3.486697322960624
best_error: 3.486637346421439
best_error: 3.486636931868265
best_error: 3.4866361846694014
best_error: 3.4866357701159565
best_error: 3.486635604796939
best_error: 3.4866355395961595
best_error: 3.4866355197148926
best_error: 3.4866354464457596
best_error: 3.48663542656449
best_error: 3.486635403807573
best_error: 3.4866353839263082
