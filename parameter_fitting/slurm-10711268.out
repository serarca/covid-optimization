ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 15.597564648591037
best_error: 15.597564638820266
best_error: 15.597564604147053
best_error: 10.612103091563363
best_error: 10.61210230006123
best_error: 8.9493779154373
best_error: 8.949377836348235
best_error: 8.43166062308917
best_error: 8.43166058518388
best_error: 8.431660576762926
best_error: 8.129929677603364
best_error: 8.129929647777997
best_error: 8.129929634230386
best_error: 7.960695476929804
best_error: 7.960695445809163
best_error: 7.960695432849278
best_error: 7.920126994417779
best_error: 7.920126962931983
best_error: 7.920126950142056
best_error: 7.895803204646027
best_error: 7.895803172817569
best_error: 7.895803160201449
best_error: 7.884240486368373
best_error: 7.884240454056227
best_error: 7.8842404417134935
best_error: 7.876197910191246
best_error: 7.876197877543596
best_error: 7.876197865390467
best_error: 7.872181606871272
best_error: 7.872181574707721
best_error: 7.8721815622737115
best_error: 7.872131127328563
best_error: 7.872131095162927
best_error: 7.8721310827301165
best_error: 7.87210397685894
best_error: 7.872103944692167
best_error: 7.8721039322600035
best_error: 7.872090750277063
best_error: 7.8720907181097335
best_error: 7.872090705677873
best_error: 7.8720820729064975
best_error: 7.872082040738821
best_error: 7.872082028307152
best_error: 7.8720782876118065
best_error: 7.872078255443964
best_error: 7.872078243012405
best_error: 7.872076840003369
best_error: 7.872076704420197
best_error: 7.872076418726607
best_error: 7.872076386558675
best_error: 7.872076374127171
best_error: 7.872073462925653
best_error: 7.872073430757558
best_error: 7.872073418326131
best_error: 7.87206311355196
best_error: 7.872062977967961
best_error: 7.8720010052739084
best_error: 7.872000869685666
best_error: 7.871752546635327
best_error: 7.871752411030073
best_error: 7.87075830403487
best_error: 7.870758168361805
best_error: 7.866774828906281
best_error: 7.866774692962759
best_error: 7.8507383679499725
best_error: 7.850738230941144
best_error: 7.78504388143978
best_error: 7.785043740405614
best_error: 7.503053480548871
best_error: 7.503053326279469
best_error: 7.482565576072033
best_error: 7.482565421130535
best_error: 7.482563436860554
best_error: 7.4825632819190515
best_error: 7.482554880017044
best_error: 7.4825547250756035
best_error: 7.482520652682832
best_error: 7.482520497741596
best_error: 7.482383743979618
best_error: 7.482383589039234
best_error: 7.481836119306677
best_error: 7.481835964369832
best_error: 7.479645782869421
best_error: 7.47964562794648
best_error: 7.473857608687476
best_error: 7.473857551400287
best_error: 7.473623590961786
best_error: 7.473623533663113
best_error: 7.472982859395581
best_error: 7.47298270458996
best_error: 7.472846080010758
best_error: 7.47284602267395
best_error: 7.472800959028309
best_error: 7.472800804229464
best_error: 7.472273533719671
best_error: 7.472273476341524
best_error: 7.469780737218404
best_error: 7.469780679688402
best_error: 7.45986251565672
best_error: 7.459862457522071
best_error: 7.4350092479247625
best_error: 7.435009188270618
best_error: 7.429807502154629
best_error: 7.429807440758264
best_error: 7.429593430788989
best_error: 7.429593186491404
best_error: 7.426459324801785
best_error: 7.426459263291314
best_error: 7.401823460340141
best_error: 7.401823399539907
best_error: 7.392991063350211
best_error: 7.392991002349992
best_error: 7.392831910986557
best_error: 7.392831849983003
best_error: 7.392688017640149
best_error: 7.392687956633587
best_error: 7.3925678570878635
best_error: 7.392567796078804
best_error: 7.39245942167231
best_error: 7.392459360660981
best_error: 7.3923562530449285
best_error: 7.392356192031461
best_error: 7.39227439035135
best_error: 7.392274330019019
best_error: 7.392043713237302
best_error: 7.392043652900238
best_error: 7.391918724613421
best_error: 7.391918664273808
best_error: 7.39188572795242
best_error: 7.391885667612131
best_error: 7.391863581294935
best_error: 7.391863520954181
best_error: 7.391794901492061
best_error: 7.391794841149908
best_error: 7.391768622357155
best_error: 7.391768562014466
best_error: 7.391753368095796
best_error: 7.391753307752808
best_error: 7.391750777207503
best_error: 7.391750716864458
best_error: 7.391749039622004
best_error: 7.39174897927893
best_error: 7.391743649820019
best_error: 7.391743589476828
best_error: 7.391742168196192
best_error: 7.3917421078529735
best_error: 7.3917407701119355
best_error: 7.391740709768684
best_error: 7.391740083727809
best_error: 7.391740023384544
best_error: 7.39173943461816
best_error: 7.3917393742748825
best_error: 7.391739342263641
best_error: 7.39173931220794
best_error: 7.3917392964527195
