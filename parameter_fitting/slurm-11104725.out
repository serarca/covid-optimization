ParameterFittingRandomToPython.py:119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:134: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:140: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:146: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:147: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:208: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:210: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
days_ahead 88
days_switch 90
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 97.94234166998368
best_error: 97.94234148332494
best_error: 14.44507129193411
best_error: 14.445071291920696
best_error: 14.445071268086256
best_error: 14.41028429997828
best_error: 14.410284275285754
best_error: 14.258299328427245
best_error: 14.258299299958425
best_error: 13.319601079438534
best_error: 13.319601020507267
best_error: 13.159554662613179
best_error: 13.15955460120368
best_error: 12.99761759414472
best_error: 12.99761752918694
best_error: 11.819271660561606
best_error: 11.819271647969996
best_error: 11.813876802692759
best_error: 11.813876792642464
best_error: 11.66553180419353
best_error: 11.665531794942417
best_error: 11.296583354704541
best_error: 11.296583317536077
best_error: 10.76011544934438
best_error: 10.760115440529795
best_error: 10.760115439106563
best_error: 10.729566037818651
best_error: 10.729566032672832
best_error: 10.729566024958865
best_error: 10.726727988825047
best_error: 10.726727986974895
best_error: 10.726727985369083
best_error: 10.726727975187014
best_error: 10.369282789340451
best_error: 10.369282789339039
best_error: 10.369282780329774
best_error: 10.369282775566305
best_error: 10.362850695625164
best_error: 10.362850695623711
best_error: 10.362850686396333
best_error: 10.362850681772004
best_error: 10.350829653490582
best_error: 10.35082965348906
best_error: 10.350829643856333
best_error: 10.35082963943376
best_error: 10.339097518060305
best_error: 10.339097518058747
best_error: 10.33909750804296
best_error: 10.339097503553948
best_error: 10.321690300359345
best_error: 10.321690300357934
best_error: 10.321690290125636
best_error: 10.321690285271849
best_error: 9.836235953481504
best_error: 9.836235949125815
best_error: 9.836235943998235
best_error: 9.836235939564922
best_error: 8.322617536903687
best_error: 8.32261750529268
best_error: 7.234919583537396
best_error: 7.234918951137949
best_error: 6.804816796642223
best_error: 6.804816656509416
best_error: 6.771197273331977
best_error: 6.771197158100097
best_error: 6.758957845662477
best_error: 6.758957821735699
best_error: 6.75793182618825
best_error: 6.75793148244737
best_error: 6.743745293965497
best_error: 6.743745280071436
best_error: 6.7433438430089865
best_error: 6.743343451386788
best_error: 6.741915853943917
best_error: 6.74191545890742
best_error: 6.741650927146808
best_error: 6.7416509172867105
best_error: 6.741650915539651
best_error: 6.74143206548785
best_error: 6.741432055558665
best_error: 6.74143205383766
best_error: 6.741410266600241
best_error: 6.741410256671566
best_error: 6.741410254949191
best_error: 6.741399924964985
best_error: 6.74139953023822
best_error: 6.737059043036377
best_error: 6.737059033058058
best_error: 6.737059031390446
best_error: 6.72008317433979
best_error: 6.720083163504442
best_error: 6.720083162474367
best_error: 6.655698988596241
best_error: 6.655698977027634
best_error: 6.599429320563674
best_error: 6.599429317435659
best_error: 6.599429317419431
best_error: 6.599429314879084
best_error: 6.563263161912787
best_error: 6.563263152419782
best_error: 6.5468133415344925
best_error: 6.546813331860184
best_error: 6.540482958505875
best_error: 6.5404829229008605
best_error: 6.475974386261642
best_error: 6.475974343349335
best_error: 6.460974958316917
best_error: 6.460974927570008
best_error: 6.4551282932724305
best_error: 6.455128173264143
best_error: 6.451701386879428
best_error: 6.451701356644512
best_error: 6.45027994910612
best_error: 6.450279920973082
best_error: 6.446955811777208
best_error: 6.446955693970425
best_error: 6.399949143317829
best_error: 6.3999491259323005
best_error: 6.394202960229542
best_error: 6.394202848410357
best_error: 6.37124288921232
best_error: 6.3712427296672285
best_error: 6.368628745574249
best_error: 6.3686286770709835
best_error: 6.328618289042591
best_error: 6.328618262393395
best_error: 6.316573708835814
best_error: 6.316573337119637
best_error: 6.30870021431061
best_error: 6.308700100720341
best_error: 6.303915946827084
best_error: 6.303915938801453
best_error: 6.30022804938624
best_error: 6.300227640490547
best_error: 6.2998721680211505
best_error: 6.299871757857527
best_error: 6.299708652169922
best_error: 6.299708639712558
best_error: 6.299136674722808
best_error: 6.29913625384013
best_error: 6.296425233748212
best_error: 6.296425216751704
best_error: 6.28683395967934
best_error: 6.286833535218914
best_error: 6.283102922468341
best_error: 6.283102486741908
best_error: 6.2829276073235585
best_error: 6.28292717146377
best_error: 6.282887694055271
best_error: 6.282887258166106
best_error: 6.282846764247811
best_error: 6.282846328427872
best_error: 6.282831050114683
best_error: 6.282830614283366
best_error: 6.282815214005816
best_error: 6.282814778163068
best_error: 6.2821056133496995
best_error: 6.2821051771056435
best_error: 6.281457109807538
best_error: 6.281456672704881
best_error: 6.280831874223506
best_error: 6.2808314362023125
best_error: 6.280336931796234
best_error: 6.280336493507565
best_error: 6.280242698067552
best_error: 6.280242259729118
best_error: 6.280177027531941
best_error: 6.2801765891589865
best_error: 6.279905642213727
best_error: 6.27990521547943
best_error: 6.279836335925859
best_error: 6.279835897573781
best_error: 6.279835429598947
best_error: 6.279834991238706
best_error: 6.279834842201004
best_error: 6.2798346925772766
best_error: 6.279834638181468
best_error: 6.279834583014436
best_error: 6.279834547503816
best_error: 6.279834511689591
best_error: 6.279834479317653
best_error: 6.279834446705285
best_error: 6.279834427213524
best_error: 6.27983440764042
best_error: 6.27983436070021
best_error: 6.279834294136634
best_error: 6.276074593521885
best_error: 6.276074577874568
best_error: 6.275943763821645
best_error: 6.2759437482964655
best_error: 6.275764767320056
best_error: 6.27576475179952
best_error: 6.275742720195392
best_error: 6.275742282026933
best_error: 6.275737446511854
best_error: 6.275737430992026
best_error: 6.275610101834854
best_error: 6.275610086318329
best_error: 6.2755656834317755
best_error: 6.275565245221259
best_error: 6.275563929836795
best_error: 6.275563914321467
best_error: 6.275563744425303
best_error: 6.275563728909982
best_error: 6.275563002780089
best_error: 6.2755629872647996
best_error: 6.275562909515186
best_error: 6.275562894495866
best_error: 6.275562894484297
best_error: 6.275562894007118
best_error: 6.2755628935544685
best_error: 6.275562893311417
