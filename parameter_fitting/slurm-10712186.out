ParameterFittingRandomToPython.py:116: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  days = data[data['reg']==11][data['cl_age90']==0].jour.values
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:129: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].hosp.values for i in range(0,9)
ParameterFittingRandomToPython.py:131: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].hosp.values
ParameterFittingRandomToPython.py:132: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  beds_real['total']=data[data['reg']==11][data['cl_age90']==0].hosp.values
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:135: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].rea.values for i in range(0,9)
ParameterFittingRandomToPython.py:137: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].rea.values
ParameterFittingRandomToPython.py:138: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  icus_real['total']=data[data['reg']==11][data['cl_age90']==0].rea.values
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:141: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  age_groups[i]:data[data['reg']==11][data['cl_age90']==10*i+9].dc.values for i in range(0,9)
ParameterFittingRandomToPython.py:143: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['age_group_80_plus']+=data[data['reg']==11][data['cl_age90']==90].dc.values
ParameterFittingRandomToPython.py:144: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  deaths_real['total']=data[data['reg']==11][data['cl_age90']==0].dc.values
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:205: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_deaths = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].dc.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
ParameterFittingRandomToPython.py:207: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  mult_icus = np.sum(data[data['reg']==11][data['cl_age90']==0].hosp.values)/np.sum(data[data['reg']==11][data['cl_age90']==0].rea.values)
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
{'groups': 'all', 'params_to_try': {'delta_schooling': [0.5, 1, 5], 'xi': [0, 371990.3, 929975.75, 1859951.5, 3719903, 5579854.5], 'icus': [2000, 2300, 2600, 2900, 3200], 'tests': [[0, 0], [30000, 30000], [60000, 60000], [120000, 120000]], 'testing': ['homogeneous'], 'eta': [0, 0.1, 0.2]}}
0.7791072263244828
7.194862933913178
best_error: 10.74057956506149
best_error: 10.740579534571228
best_error: 10.740579527447906
best_error: 10.204063160358213
best_error: 10.204063110992495
best_error: 9.978319499910805
best_error: 9.978319440355175
best_error: 9.200932999347224
best_error: 9.200932894010457
best_error: 8.835670175210634
best_error: 8.835670114424298
best_error: 8.835670095125508
best_error: 7.249129793237401
best_error: 7.249129763825561
best_error: 7.249129730096556
best_error: 7.019853114591818
best_error: 7.019853099725248
best_error: 7.01985305561963
best_error: 5.537411582189009
best_error: 5.537411018204219
best_error: 5.523470651383861
best_error: 5.523469945873851
best_error: 5.393476398451577
best_error: 5.393476397467585
best_error: 5.361492756873755
best_error: 5.36149275592031
best_error: 5.35276211302536
best_error: 5.352762112076457
best_error: 5.350805320544264
best_error: 5.35080463492152
best_error: 4.821740531153245
best_error: 4.8217405010042205
best_error: 4.614453665367458
best_error: 4.614453646940447
best_error: 3.9529700302855737
best_error: 3.952969541808075
best_error: 3.8812409789969577
best_error: 3.881240602442336
best_error: 3.8725410017305566
best_error: 3.8725406428469134
best_error: 3.784809833417548
best_error: 3.784809831826795
best_error: 3.7802781988721685
best_error: 3.7802778508873027
best_error: 3.769283927352445
best_error: 3.7692835795411885
best_error: 3.767849886173522
best_error: 3.767849538177942
best_error: 3.7672123180171404
best_error: 3.7672119709474057
best_error: 3.766769702224636
best_error: 3.7667693550979866
best_error: 3.766556912580919
best_error: 3.766556565426885
best_error: 3.766412186102781
best_error: 3.766411838930149
best_error: 3.766339155706982
best_error: 3.7663388085249387
best_error: 3.7662735726960967
best_error: 3.7662732255066507
best_error: 3.766251734599666
best_error: 3.766251387407771
best_error: 3.766238101934123
best_error: 3.766237754740677
best_error: 3.7662308624718857
best_error: 3.7662305152776376
best_error: 3.7662259923272243
best_error: 3.7662256451324216
best_error: 3.76622358763456
best_error: 3.7662232404394747
best_error: 3.76622184395584
best_error: 3.7662214967605614
best_error: 3.766220769861263
best_error: 3.766220422665853
best_error: 3.7662204000633652
best_error: 3.763009544289557
best_error: 3.7630095426984806
best_error: 3.7309550549065458
best_error: 3.7309547172545634
best_error: 3.7264450817329817
best_error: 3.726444789515587
best_error: 3.7074867213743965
best_error: 3.707486414626263
best_error: 3.681818507610955
best_error: 3.6818185059840425
best_error: 3.66043613268567
best_error: 3.660435791981071
best_error: 3.596332170223321
best_error: 3.596331826868028
best_error: 3.5934715286675143
best_error: 3.5934711926316942
best_error: 3.5308669190641093
best_error: 3.530866575674965
best_error: 3.4737727267219753
best_error: 3.473772368514289
best_error: 3.3986588103035653
best_error: 3.398658447259603
best_error: 3.3704703984870115
best_error: 3.3704700154463363
best_error: 3.294134941185612
best_error: 3.294134563817374
best_error: 3.2779949499902226
best_error: 3.2779949483194075
best_error: 3.2779948817027993
best_error: 3.27063388915665
best_error: 3.270633504994353
best_error: 3.2687581831508363
best_error: 3.268757798709256
best_error: 3.268457862514154
best_error: 3.268457478027803
best_error: 3.2683541886902487
best_error: 3.268353804189482
best_error: 3.2683276440908875
best_error: 3.268327259586438
best_error: 3.2683176023215745
best_error: 3.268317217815718
best_error: 3.268313021391452
best_error: 3.2683126368849686
best_error: 3.268309694514401
best_error: 3.2683093100074574
best_error: 3.2683088057013236
best_error: 3.2683086295630166
best_error: 3.268308603101307
best_error: 3.268308579913748
best_error: 3.2683085392397597
best_error: 3.268308537855353
best_error: 3.267874227190549
best_error: 3.2678738464905432
best_error: 3.266525571689651
best_error: 3.2665251998111398
best_error: 3.265994178521348
best_error: 3.2659938185643855
best_error: 3.265149681556794
best_error: 3.265149323067282
best_error: 3.2639642037831553
best_error: 3.2639638441797523
best_error: 3.263950059840714
best_error: 3.2639497002523425
best_error: 3.26394202499565
best_error: 3.263941665415982
best_error: 3.2639259912303844
best_error: 3.263925631609162
best_error: 3.263836324671481
best_error: 3.2638359650363915
best_error: 3.263401904243586
best_error: 3.2634015445477633
best_error: 3.2631250008299295
best_error: 3.263125000378958
best_error: 3.2631249328918077
best_error: 3.262794743972135
best_error: 3.2627943842008005
best_error: 3.2618612355515526
best_error: 3.26186087272309
best_error: 3.2617188618223523
best_error: 3.261718498789486
best_error: 3.261716288032808
best_error: 3.261715924998474
best_error: 3.261714270261605
best_error: 3.261713907226107
best_error: 3.261712496761886
best_error: 3.26171213372538
best_error: 3.2617110159079012
best_error: 3.2617106528705593
best_error: 3.261710014064511
best_error: 3.261709651026577
best_error: 3.261709409114564
best_error: 3.2617090460764198
best_error: 3.2617090454537205
best_error: 3.2614060566167584
best_error: 3.2614056936980536
best_error: 3.2606467746006347
best_error: 3.2606464135261657
best_error: 3.2599355414877547
best_error: 3.259935180444497
best_error: 3.2598882622426792
best_error: 3.2598882619430647
best_error: 3.259888194436554
best_error: 3.259819827614936
best_error: 3.25981946657691
best_error: 3.2597514528879614
best_error: 3.259751091853028
best_error: 3.2597492952513027
best_error: 3.2597489342163626
best_error: 3.2597483837457686
best_error: 3.259748314852969
best_error: 3.259748156549687
best_error: 3.259748150179227
best_error: 3.2597481500503656
best_error: 3.2597481017335275
best_error: 3.2597481014334457
